
Copunt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009720  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa0  08009aa0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa0  08009aa0  00019aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aa8  08009aa8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  2000007c  08009b2c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08009b2c  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015652  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f49  00000000  00000000  00035741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00039690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d64  00000000  00000000  0003a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019253  00000000  00000000  0003b5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f7b  00000000  00000000  000547f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eab4  00000000  00000000  0006e772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b24  00000000  00000000  000fd228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00101d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080098a0 	.word	0x080098a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	080098a0 	.word	0x080098a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	4b82      	ldr	r3, [pc, #520]	; (80006f8 <MX_GPIO_Init+0x224>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a81      	ldr	r2, [pc, #516]	; (80006f8 <MX_GPIO_Init+0x224>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b7f      	ldr	r3, [pc, #508]	; (80006f8 <MX_GPIO_Init+0x224>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	4b7b      	ldr	r3, [pc, #492]	; (80006f8 <MX_GPIO_Init+0x224>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a7a      	ldr	r2, [pc, #488]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b78      	ldr	r3, [pc, #480]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	4b74      	ldr	r3, [pc, #464]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a73      	ldr	r2, [pc, #460]	; (80006f8 <MX_GPIO_Init+0x224>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b71      	ldr	r3, [pc, #452]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b6d      	ldr	r3, [pc, #436]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a6c      	ldr	r2, [pc, #432]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b6a      	ldr	r3, [pc, #424]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b66      	ldr	r3, [pc, #408]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a65      	ldr	r2, [pc, #404]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b63      	ldr	r3, [pc, #396]	; (80006f8 <MX_GPIO_Init+0x224>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b5f      	ldr	r3, [pc, #380]	; (80006f8 <MX_GPIO_Init+0x224>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a5e      	ldr	r2, [pc, #376]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b5c      	ldr	r3, [pc, #368]	; (80006f8 <MX_GPIO_Init+0x224>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	4859      	ldr	r0, [pc, #356]	; (80006fc <MX_GPIO_Init+0x228>)
 8000598:	f001 f956 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2101      	movs	r1, #1
 80005a0:	4857      	ldr	r0, [pc, #348]	; (8000700 <MX_GPIO_Init+0x22c>)
 80005a2:	f001 f951 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005ac:	4855      	ldr	r0, [pc, #340]	; (8000704 <MX_GPIO_Init+0x230>)
 80005ae:	f001 f94b 	bl	8001848 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005b2:	2304      	movs	r3, #4
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	4619      	mov	r1, r3
 80005c4:	484d      	ldr	r0, [pc, #308]	; (80006fc <MX_GPIO_Init+0x228>)
 80005c6:	f000 fe7f 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ca:	2308      	movs	r3, #8
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	4846      	ldr	r0, [pc, #280]	; (80006fc <MX_GPIO_Init+0x228>)
 80005e2:	f000 fe71 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005e6:	2332      	movs	r3, #50	; 0x32
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	4840      	ldr	r0, [pc, #256]	; (80006fc <MX_GPIO_Init+0x228>)
 80005fc:	f000 fe64 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000600:	f64f 73c1 	movw	r3, #65473	; 0xffc1
 8000604:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	4839      	ldr	r0, [pc, #228]	; (80006fc <MX_GPIO_Init+0x228>)
 8000616:	f000 fe57 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC4 PC5
                           PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800061a:	f642 3372 	movw	r3, #11122	; 0x2b72
 800061e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2303      	movs	r3, #3
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4834      	ldr	r0, [pc, #208]	; (8000700 <MX_GPIO_Init+0x22c>)
 8000630:	f000 fe4a 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	482d      	ldr	r0, [pc, #180]	; (8000700 <MX_GPIO_Init+0x22c>)
 800064c:	f000 fe3c 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000650:	2301      	movs	r3, #1
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000654:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4828      	ldr	r0, [pc, #160]	; (8000708 <MX_GPIO_Init+0x234>)
 8000666:	f000 fe2f 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 800066a:	f248 130e 	movw	r3, #33038	; 0x810e
 800066e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4822      	ldr	r0, [pc, #136]	; (8000708 <MX_GPIO_Init+0x234>)
 8000680:	f000 fe22 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB14 PB15 PB4 PB5
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 8000684:	f24e 13b7 	movw	r3, #57783	; 0xe1b7
 8000688:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068a:	2303      	movs	r3, #3
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	481c      	ldr	r0, [pc, #112]	; (800070c <MX_GPIO_Init+0x238>)
 800069a:	f000 fe15 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD0 PD1 PD2 PD3
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800069e:	f640 73cf 	movw	r3, #4047	; 0xfcf
 80006a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a4:	2303      	movs	r3, #3
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_GPIO_Init+0x230>)
 80006b4:	f000 fe08 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006b8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006bc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_GPIO_Init+0x230>)
 80006d2:	f000 fdf9 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006d6:	2320      	movs	r3, #32
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_GPIO_Init+0x230>)
 80006ea:	f000 fded 	bl	80012c8 <HAL_GPIO_Init>

}
 80006ee:	bf00      	nop
 80006f0:	3730      	adds	r7, #48	; 0x30
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40021000 	.word	0x40021000
 8000700:	40020800 	.word	0x40020800
 8000704:	40020c00 	.word	0x40020c00
 8000708:	40020000 	.word	0x40020000
 800070c:	40020400 	.word	0x40020400

08000710 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_I2C1_Init+0x50>)
 8000716:	4a13      	ldr	r2, [pc, #76]	; (8000764 <MX_I2C1_Init+0x54>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_I2C1_Init+0x50>)
 800071c:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_I2C1_Init+0x58>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_I2C1_Init+0x50>)
 800072e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_I2C1_Init+0x50>)
 800074e:	f003 f9d3 	bl	8003af8 <HAL_I2C_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000758:	f000 fa84 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000098 	.word	0x20000098
 8000764:	40005400 	.word	0x40005400
 8000768:	000186a0 	.word	0x000186a0

0800076c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <HAL_I2C_MspInit+0x84>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d12c      	bne.n	80007e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <HAL_I2C_MspInit+0x88>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_I2C_MspInit+0x88>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_I2C_MspInit+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b0:	2312      	movs	r3, #18
 80007b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007bc:	2304      	movs	r3, #4
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <HAL_I2C_MspInit+0x8c>)
 80007c8:	f000 fd7e 	bl	80012c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_I2C_MspInit+0x88>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_I2C_MspInit+0x88>)
 80007d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_I2C_MspInit+0x88>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020400 	.word	0x40020400

080007fc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2S2_Init+0x50>)
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_I2S2_Init+0x54>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2S2_Init+0x50>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2S2_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_I2S2_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_I2S2_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_I2S2_Init+0x50>)
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <MX_I2S2_Init+0x58>)
 8000824:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_I2S2_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_I2S2_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_I2S2_Init+0x50>)
 8000834:	2201      	movs	r2, #1
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_I2S2_Init+0x50>)
 800083a:	f003 fb29 	bl	8003e90 <HAL_I2S_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 fa0e 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000ec 	.word	0x200000ec
 8000850:	40003800 	.word	0x40003800
 8000854:	00017700 	.word	0x00017700

08000858 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_I2S3_Init+0x54>)
 800085e:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <MX_I2S3_Init+0x58>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2S3_Init+0x54>)
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_I2S3_Init+0x54>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_I2S3_Init+0x54>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_I2S3_Init+0x54>)
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <MX_I2S3_Init+0x5c>)
 8000882:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_I2S3_Init+0x54>)
 8000898:	f003 fafa 	bl	8003e90 <HAL_I2S_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008a2:	f000 f9df 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000134 	.word	0x20000134
 80008b0:	40003c00 	.word	0x40003c00
 80008b4:	00017700 	.word	0x00017700

080008b8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a59      	ldr	r2, [pc, #356]	; (8000a3c <HAL_I2S_MspInit+0x184>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d15b      	bne.n	8000992 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
 80008de:	4b58      	ldr	r3, [pc, #352]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a57      	ldr	r2, [pc, #348]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	623b      	str	r3, [r7, #32]
 80008f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
 80008fa:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a50      	ldr	r2, [pc, #320]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a49      	ldr	r2, [pc, #292]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800092e:	2304      	movs	r3, #4
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800093e:	2306      	movs	r3, #6
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	4619      	mov	r1, r3
 8000948:	483e      	ldr	r0, [pc, #248]	; (8000a44 <HAL_I2S_MspInit+0x18c>)
 800094a:	f000 fcbd 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800094e:	2308      	movs	r3, #8
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095e:	2305      	movs	r3, #5
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4836      	ldr	r0, [pc, #216]	; (8000a44 <HAL_I2S_MspInit+0x18c>)
 800096a:	f000 fcad 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800096e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000980:	2305      	movs	r3, #5
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	482f      	ldr	r0, [pc, #188]	; (8000a48 <HAL_I2S_MspInit+0x190>)
 800098c:	f000 fc9c 	bl	80012c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000990:	e04f      	b.n	8000a32 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <HAL_I2S_MspInit+0x194>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d14a      	bne.n	8000a32 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6313      	str	r3, [r2, #48]	; 0x30
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_I2S_MspInit+0x188>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009f0:	2310      	movs	r3, #16
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a00:	2306      	movs	r3, #6
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <HAL_I2S_MspInit+0x198>)
 8000a0c:	f000 fc5c 	bl	80012c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a22:	2306      	movs	r3, #6
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <HAL_I2S_MspInit+0x18c>)
 8000a2e:	f000 fc4b 	bl	80012c8 <HAL_GPIO_Init>
}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	; 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40003800 	.word	0x40003800
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40003c00 	.word	0x40003c00
 8000a50:	40020000 	.word	0x40020000

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5a:	f000 fa5f 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5e:	f000 f879 	bl	8000b54 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a62:	f000 f8df 	bl	8000c24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f7ff fd35 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a6a:	f7ff fe51 	bl	8000710 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a6e:	f7ff fec5 	bl	80007fc <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a72:	f7ff fef1 	bl	8000858 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a76:	f000 f905 	bl	8000c84 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a7a:	f008 fabb 	bl	8008ff4 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int button_is_pressed = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
  int last_change_tick = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]

  while (1)
  {
    HAL_Delay(50);
 8000a86:	2032      	movs	r0, #50	; 0x32
 8000a88:	f000 faba 	bl	8001000 <HAL_Delay>

    if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == GPIO_PIN_SET)
 8000a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a90:	482e      	ldr	r0, [pc, #184]	; (8000b4c <main+0xf8>)
 8000a92:	f000 feb3 	bl	80017fc <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d117      	bne.n	8000acc <main+0x78>
    {
      if (HAL_GetTick() - last_change_tick >= 50)
 8000a9c:	f000 faa4 	bl	8000fe8 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b31      	cmp	r3, #49	; 0x31
 8000aa8:	d910      	bls.n	8000acc <main+0x78>
      {
        last_change_tick = HAL_GetTick();
 8000aaa:	f000 fa9d 	bl	8000fe8 <HAL_GetTick>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	603b      	str	r3, [r7, #0]

        if (button_is_pressed)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d007      	beq.n	8000ac8 <main+0x74>
        {
          button_is_pressed = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
          ++pressed;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <main+0xfc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <main+0xfc>)
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e001      	b.n	8000acc <main+0x78>
        }
        else
        {
          button_is_pressed = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
        }
      }
    }

    // Update LEDs based on 'pressed' value
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, pressed & 1);
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <main+0xfc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ade:	481b      	ldr	r0, [pc, #108]	; (8000b4c <main+0xf8>)
 8000ae0:	f000 feb2 	bl	8001848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, pressed & 1 << 1);
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <main+0xfc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af6:	4815      	ldr	r0, [pc, #84]	; (8000b4c <main+0xf8>)
 8000af8:	f000 fea6 	bl	8001848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, pressed & 1 << 2);
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <main+0xfc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <main+0xf8>)
 8000b10:	f000 fe9a 	bl	8001848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, pressed & 1 << 3);
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <main+0xfc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <main+0xf8>)
 8000b28:	f000 fe8e 	bl	8001848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, pressed & 1 << 4);
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <main+0xfc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <main+0xf8>)
 8000b40:	f000 fe82 	bl	8001848 <HAL_GPIO_WritePin>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b44:	f008 fa7c 	bl	8009040 <MX_USB_HOST_Process>
    HAL_Delay(50);
 8000b48:	e79d      	b.n	8000a86 <main+0x32>
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	2000017c 	.word	0x2000017c

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	; 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 fe0c 	bl	8009780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <SystemClock_Config+0xcc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bc8:	23c0      	movs	r3, #192	; 0xc0
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 feb7 	bl	800494c <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000be4:	f000 f83e 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2103      	movs	r1, #3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 f9cd 	bl	8004fa4 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c10:	f000 f828 	bl	8000c64 <Error_Handler>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3750      	adds	r7, #80	; 0x50
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000c3e:	23c8      	movs	r3, #200	; 0xc8
 8000c40:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000c42:	2305      	movs	r3, #5
 8000c44:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fc5d 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000c58:	f000 f804 	bl	8000c64 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>

08000c6e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <MX_SPI1_Init+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd0:	220a      	movs	r2, #10
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd6:	f004 fe91 	bl	80059fc <HAL_SPI_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce0:	f7ff ffc0 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000180 	.word	0x20000180
 8000cec:	40013000 	.word	0x40013000

08000cf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12b      	bne.n	8000d6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d4a:	23e0      	movs	r3, #224	; 0xe0
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_SPI_MspInit+0x8c>)
 8000d66:	f000 faaf 	bl	80012c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x4c>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dbe:	2007      	movs	r0, #7
 8000dc0:	f000 fa12 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f8d0 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <OTG_FS_IRQHandler+0x10>)
 8000e2a:	f001 f82b 	bl	8001e84 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200005bc 	.word	0x200005bc

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f008 fca2 	bl	80097b0 <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	200001d8 	.word	0x200001d8
 8000ea0:	20000ae8 	.word	0x20000ae8

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ecc:	f7ff ffea 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	; (8000f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	; (8000f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f008 fc61 	bl	80097bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fdab 	bl	8000a54 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f0c:	08009ab0 	.word	0x08009ab0
  ldr r2, =_sbss
 8000f10:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f14:	20000ae4 	.word	0x20000ae4

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f94f 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff ff16 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f996 	bl	80012b0 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f000 f944 	bl	8001228 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200001dc 	.word	0x200001dc

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200001dc 	.word	0x200001dc

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	d00f      	beq.n	8001216 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b06      	cmp	r3, #6
 80011fa:	d00c      	beq.n	8001216 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d009      	beq.n	8001216 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b04      	cmp	r3, #4
 8001206:	d006      	beq.n	8001216 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d003      	beq.n	8001216 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800120e:	2190      	movs	r1, #144	; 0x90
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001212:	f7ff fd2c 	bl	8000c6e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff16 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	080098b8 	.word	0x080098b8

08001228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d903      	bls.n	8001248 <HAL_NVIC_SetPriority+0x20>
 8001240:	21a8      	movs	r1, #168	; 0xa8
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <HAL_NVIC_SetPriority+0x54>)
 8001244:	f7ff fd13 	bl	8000c6e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	d903      	bls.n	8001256 <HAL_NVIC_SetPriority+0x2e>
 800124e:	21a9      	movs	r1, #169	; 0xa9
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <HAL_NVIC_SetPriority+0x54>)
 8001252:	f7ff fd0c 	bl	8000c6e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001256:	f7ff ff1b 	bl	8001090 <__NVIC_GetPriorityGrouping>
 800125a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f7ff ff6b 	bl	800113c <NVIC_EncodePriority>
 8001266:	4602      	mov	r2, r0
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff3a 	bl	80010e8 <__NVIC_SetPriority>
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	080098b8 	.word	0x080098b8

08001280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da03      	bge.n	800129a <HAL_NVIC_EnableIRQ+0x1a>
 8001292:	21bc      	movs	r1, #188	; 0xbc
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_NVIC_EnableIRQ+0x2c>)
 8001296:	f7ff fcea 	bl	8000c6e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff04 	bl	80010ac <__NVIC_EnableIRQ>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	080098b8 	.word	0x080098b8

080012b0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff73 	bl	80011a4 <SysTick_Config>
 80012be:	4603      	mov	r3, r0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <HAL_GPIO_Init+0xe8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_GPIO_Init+0xec>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a31      	ldr	r2, [pc, #196]	; (80013b8 <HAL_GPIO_Init+0xf0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00f      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a30      	ldr	r2, [pc, #192]	; (80013bc <HAL_GPIO_Init+0xf4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00b      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0xf8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a2e      	ldr	r2, [pc, #184]	; (80013c4 <HAL_GPIO_Init+0xfc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 800130e:	21ac      	movs	r1, #172	; 0xac
 8001310:	482d      	ldr	r0, [pc, #180]	; (80013c8 <HAL_GPIO_Init+0x100>)
 8001312:	f7ff fcac 	bl	8000c6e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_GPIO_Init+0x64>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0c1b      	lsrs	r3, r3, #16
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x6c>
 800132c:	21ad      	movs	r1, #173	; 0xad
 800132e:	4826      	ldr	r0, [pc, #152]	; (80013c8 <HAL_GPIO_Init+0x100>)
 8001330:	f7ff fc9d 	bl	8000c6e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d035      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d031      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b11      	cmp	r3, #17
 800134a:	d02d      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d029      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b12      	cmp	r3, #18
 800135a:	d025      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001364:	d020      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800136e:	d01b      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001378:	d016      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001382:	d011      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800138c:	d00c      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001396:	d007      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 80013a0:	21ae      	movs	r1, #174	; 0xae
 80013a2:	4809      	ldr	r0, [pc, #36]	; (80013c8 <HAL_GPIO_Init+0x100>)
 80013a4:	f7ff fc63 	bl	8000c6e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	e20c      	b.n	80017c8 <HAL_GPIO_Init+0x500>
 80013ae:	bf00      	nop
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40021c00 	.word	0x40021c00
 80013c8:	080098f4 	.word	0x080098f4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	f040 81ec 	bne.w	80017c2 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d005      	beq.n	8001402 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d144      	bne.n	800148c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00f      	beq.n	800142a <HAL_GPIO_Init+0x162>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d00b      	beq.n	800142a <HAL_GPIO_Init+0x162>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x162>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x162>
 8001422:	21c0      	movs	r1, #192	; 0xc0
 8001424:	4884      	ldr	r0, [pc, #528]	; (8001638 <HAL_GPIO_Init+0x370>)
 8001426:	f7ff fc22 	bl	8000c6e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 0201 	and.w	r2, r3, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b03      	cmp	r3, #3
 8001496:	d027      	beq.n	80014e8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <HAL_GPIO_Init+0x1f0>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x1f0>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x1f0>
 80014b0:	21d1      	movs	r1, #209	; 0xd1
 80014b2:	4861      	ldr	r0, [pc, #388]	; (8001638 <HAL_GPIO_Init+0x370>)
 80014b4:	f7ff fbdb 	bl	8000c6e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	f040 80a3 	bne.w	800163c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d077      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b09      	cmp	r3, #9
 8001504:	d073      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d06f      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d06b      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d067      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d063      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d05f      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d05b      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d057      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d053      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d04f      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d04b      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b04      	cmp	r3, #4
 800155c:	d047      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d043      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d03f      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d03b      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b05      	cmp	r3, #5
 800157c:	d037      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b06      	cmp	r3, #6
 8001584:	d033      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b06      	cmp	r3, #6
 800158c:	d02f      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d02b      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b06      	cmp	r3, #6
 800159c:	d027      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b07      	cmp	r3, #7
 80015a4:	d023      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	d01f      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	d01b      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d017      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d00f      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b09      	cmp	r3, #9
 80015d4:	d00b      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x326>
 80015e6:	21de      	movs	r1, #222	; 0xde
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <HAL_GPIO_Init+0x370>)
 80015ea:	f7ff fb40 	bl	8000c6e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	69b9      	ldr	r1, [r7, #24]
 8001632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001636:	e001      	b.n	800163c <HAL_GPIO_Init+0x374>
 8001638:	080098f4 	.word	0x080098f4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a2 	beq.w	80017c2 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b56      	ldr	r3, [pc, #344]	; (80017dc <HAL_GPIO_Init+0x514>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a55      	ldr	r2, [pc, #340]	; (80017dc <HAL_GPIO_Init+0x514>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_GPIO_Init+0x514>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <HAL_GPIO_Init+0x518>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_GPIO_Init+0x51c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x432>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <HAL_GPIO_Init+0x520>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x42e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a46      	ldr	r2, [pc, #280]	; (80017ec <HAL_GPIO_Init+0x524>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x42a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a45      	ldr	r2, [pc, #276]	; (80017f0 <HAL_GPIO_Init+0x528>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x426>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a44      	ldr	r2, [pc, #272]	; (80017f4 <HAL_GPIO_Init+0x52c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x422>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x434>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x434>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x434>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x434>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x434>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4934      	ldr	r1, [pc, #208]	; (80017e0 <HAL_GPIO_Init+0x518>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0x530>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173e:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <HAL_GPIO_Init+0x530>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <HAL_GPIO_Init+0x530>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001768:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <HAL_GPIO_Init+0x530>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_GPIO_Init+0x530>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001792:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_GPIO_Init+0x530>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_GPIO_Init+0x530>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_GPIO_Init+0x530>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f adfe 	bls.w	80013cc <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <HAL_GPIO_ReadPin+0x1c>
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_GPIO_ReadPin+0x26>
 8001818:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <HAL_GPIO_ReadPin+0x48>)
 800181e:	f7ff fa26 	bl	8000c6e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
 8001832:	e001      	b.n	8001838 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	080098f4 	.word	0x080098f4

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d004      	beq.n	8001868 <HAL_GPIO_WritePin+0x20>
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	041b      	lsls	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_GPIO_WritePin+0x2a>
 8001868:	f240 119d 	movw	r1, #413	; 0x19d
 800186c:	480e      	ldr	r0, [pc, #56]	; (80018a8 <HAL_GPIO_WritePin+0x60>)
 800186e:	f7ff f9fe 	bl	8000c6e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001872:	787b      	ldrb	r3, [r7, #1]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_GPIO_WritePin+0x40>
 8001878:	787b      	ldrb	r3, [r7, #1]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d004      	beq.n	8001888 <HAL_GPIO_WritePin+0x40>
 800187e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001882:	4809      	ldr	r0, [pc, #36]	; (80018a8 <HAL_GPIO_WritePin+0x60>)
 8001884:	f7ff f9f3 	bl	8000c6e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	080098f4 	.word	0x080098f4

080018ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e062      	b.n	8001984 <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018c6:	d003      	beq.n	80018d0 <HAL_HCD_Init+0x24>
 80018c8:	217b      	movs	r1, #123	; 0x7b
 80018ca:	4830      	ldr	r0, [pc, #192]	; (800198c <HAL_HCD_Init+0xe0>)
 80018cc:	f7ff f9cf 	bl	8000c6e <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f007 fbe0 	bl	80090b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2203      	movs	r2, #3
 80018f4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fe:	d102      	bne.n	8001906 <HAL_HCD_Init+0x5a>
  {
    hhcd->Init.dma_enable = 0U;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f004 fa87 	bl	8005e1e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7c1a      	ldrb	r2, [r3, #16]
 8001918:	f88d 2000 	strb.w	r2, [sp]
 800191c:	3304      	adds	r3, #4
 800191e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001920:	f004 fa08 	bl	8005d34 <USB_CoreInit>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_HCD_Init+0x8a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e026      	b.n	8001984 <HAL_HCD_Init+0xd8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	4618      	mov	r0, r3
 800193e:	f004 fa7f 	bl	8005e40 <USB_SetCurrentMode>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e017      	b.n	8001984 <HAL_HCD_Init+0xd8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7c1a      	ldrb	r2, [r3, #16]
 800195c:	f88d 2000 	strb.w	r2, [sp]
 8001960:	3304      	adds	r3, #4
 8001962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001964:	f004 fc22 	bl	80061ac <USB_HostInit>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_HCD_Init+0xce>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e004      	b.n	8001984 <HAL_HCD_Init+0xd8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	08009930 	.word	0x08009930

08001990 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b08b      	sub	sp, #44	; 0x2c
 8001994:	af04      	add	r7, sp, #16
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	70fb      	strb	r3, [r7, #3]
 80019a2:	460b      	mov	r3, r1
 80019a4:	70bb      	strb	r3, [r7, #2]
 80019a6:	4613      	mov	r3, r2
 80019a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80019aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019ac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_HCD_HC_Init+0x2c>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e09d      	b.n	8001af8 <HAL_HCD_HC_Init+0x168>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3319      	adds	r3, #25
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3314      	adds	r3, #20
 80019e8:	787a      	ldrb	r2, [r7, #1]
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3315      	adds	r3, #21
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3326      	adds	r3, #38	; 0x26
 8001a10:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001a14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	78bb      	ldrb	r3, [r7, #2]
 8001a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a1e:	b2d8      	uxtb	r0, r3
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3316      	adds	r3, #22
 8001a2e:	4602      	mov	r2, r0
 8001a30:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	4619      	mov	r1, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fbc8 	bl	80021cc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001a3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da0a      	bge.n	8001a5a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	3317      	adds	r3, #23
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e009      	b.n	8001a6e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	3317      	adds	r3, #23
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 fce8 	bl	8006448 <USB_GetHostSpeed>
 8001a78:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10b      	bne.n	8001a9a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001a82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d107      	bne.n	8001a9a <HAL_HCD_HC_Init+0x10a>
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d104      	bne.n	8001a9a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2bbc      	cmp	r3, #188	; 0xbc
 8001a94:	d901      	bls.n	8001a9a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001a96:	23bc      	movs	r3, #188	; 0xbc
 8001a98:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3328      	adds	r3, #40	; 0x28
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	787c      	ldrb	r4, [r7, #1]
 8001ad2:	78ba      	ldrb	r2, [r7, #2]
 8001ad4:	78f9      	ldrb	r1, [r7, #3]
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	f004 fcd7 	bl	8006498 <USB_HC_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}

08001b00 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_HCD_HC_Halt+0x1e>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e00f      	b.n	8001b3e <HAL_HCD_HC_Halt+0x3e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f005 f81d 	bl	8006b6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	70fb      	strb	r3, [r7, #3]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	70bb      	strb	r3, [r7, #2]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3317      	adds	r3, #23
 8001b72:	78ba      	ldrb	r2, [r7, #2]
 8001b74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3326      	adds	r3, #38	; 0x26
 8001b86:	787a      	ldrb	r2, [r7, #1]
 8001b88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b8a:	7c3b      	ldrb	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d114      	bne.n	8001bba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	332a      	adds	r3, #42	; 0x2a
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3319      	adds	r3, #25
 8001bb4:	7f3a      	ldrb	r2, [r7, #28]
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e009      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	332a      	adds	r3, #42	; 0x2a
 8001bca:	2202      	movs	r2, #2
 8001bcc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bce:	787b      	ldrb	r3, [r7, #1]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	f200 8102 	bhi.w	8001dda <HAL_HCD_HC_SubmitRequest+0x292>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <HAL_HCD_HC_SubmitRequest+0x94>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001dc5 	.word	0x08001dc5
 8001be4:	08001cb1 	.word	0x08001cb1
 8001be8:	08001d3b 	.word	0x08001d3b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001bec:	7c3b      	ldrb	r3, [r7, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	f040 80f5 	bne.w	8001dde <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001bf4:	78bb      	ldrb	r3, [r7, #2]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d12d      	bne.n	8001c56 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001bfa:	8b3b      	ldrh	r3, [r7, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	333d      	adds	r3, #61	; 0x3d
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	333d      	adds	r3, #61	; 0x3d
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	332a      	adds	r3, #42	; 0x2a
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001c3e:	e0ce      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	332a      	adds	r3, #42	; 0x2a
 8001c50:	2202      	movs	r2, #2
 8001c52:	701a      	strb	r2, [r3, #0]
      break;
 8001c54:	e0c3      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	331a      	adds	r3, #26
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	f040 80b8 	bne.w	8001dde <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	333c      	adds	r3, #60	; 0x3c
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	332a      	adds	r3, #42	; 0x2a
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
      break;
 8001c98:	e0a1      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	332a      	adds	r3, #42	; 0x2a
 8001caa:	2202      	movs	r2, #2
 8001cac:	701a      	strb	r2, [r3, #0]
      break;
 8001cae:	e096      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cb0:	78bb      	ldrb	r3, [r7, #2]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d120      	bne.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	333d      	adds	r3, #61	; 0x3d
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10a      	bne.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	332a      	adds	r3, #42	; 0x2a
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ce0:	e07e      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	332a      	adds	r3, #42	; 0x2a
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	701a      	strb	r2, [r3, #0]
      break;
 8001cf6:	e073      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	333c      	adds	r3, #60	; 0x3c
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	332a      	adds	r3, #42	; 0x2a
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
      break;
 8001d22:	e05d      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	332a      	adds	r3, #42	; 0x2a
 8001d34:	2202      	movs	r2, #2
 8001d36:	701a      	strb	r2, [r3, #0]
      break;
 8001d38:	e052      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d3a:	78bb      	ldrb	r3, [r7, #2]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d120      	bne.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	333d      	adds	r3, #61	; 0x3d
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10a      	bne.n	8001d6c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	332a      	adds	r3, #42	; 0x2a
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d6a:	e039      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	332a      	adds	r3, #42	; 0x2a
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	701a      	strb	r2, [r3, #0]
      break;
 8001d80:	e02e      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	333c      	adds	r3, #60	; 0x3c
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10a      	bne.n	8001dae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	332a      	adds	r3, #42	; 0x2a
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
      break;
 8001dac:	e018      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	332a      	adds	r3, #42	; 0x2a
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
      break;
 8001dc2:	e00d      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	332a      	adds	r3, #42	; 0x2a
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
      break;
 8001dd8:	e002      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001dde:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	332c      	adds	r3, #44	; 0x2c
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	8b39      	ldrh	r1, [r7, #24]
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4403      	add	r3, r0
 8001e04:	3334      	adds	r3, #52	; 0x34
 8001e06:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	334c      	adds	r3, #76	; 0x4c
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3338      	adds	r3, #56	; 0x38
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3315      	adds	r3, #21
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	334d      	adds	r3, #77	; 0x4d
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	3310      	adds	r3, #16
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	1d19      	adds	r1, r3, #4
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	799b      	ldrb	r3, [r3, #6]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f004 fc26 	bl	80066c4 <USB_HC_StartXfer>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop

08001e84 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f004 f946 	bl	800612c <USB_GetMode>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	f040 80fb 	bne.w	800209e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 f909 	bl	80060c4 <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80f1 	beq.w	800209c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 f900 	bl	80060c4 <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ece:	d104      	bne.n	8001eda <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ed8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f8f0 	bl	80060c4 <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eee:	d104      	bne.n	8001efa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ef8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 f8e0 	bl	80060c4 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f0e:	d104      	bne.n	8001f1a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 f8d0 	bl	80060c4 <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d103      	bne.n	8001f36 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2202      	movs	r2, #2
 8001f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 f8c2 	bl	80060c4 <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f4a:	d120      	bne.n	8001f8e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f54:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d113      	bne.n	8001f8e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f66:	2110      	movs	r1, #16
 8001f68:	6938      	ldr	r0, [r7, #16]
 8001f6a:	f003 ffb5 	bl	8005ed8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f6e:	6938      	ldr	r0, [r7, #16]
 8001f70:	f003 ffe4 	bl	8005f3c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7a5b      	ldrb	r3, [r3, #9]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d105      	bne.n	8001f88 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f9c0 	bl	8006308 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f007 f90f 	bl	80091ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f004 f896 	bl	80060c4 <USB_ReadInterrupts>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa2:	d102      	bne.n	8001faa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f001 fd33 	bl	8003a10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 f888 	bl	80060c4 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d106      	bne.n	8001fcc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f007 f8d8 	bl	8009174 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 f877 	bl	80060c4 <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fe0:	d139      	bne.n	8002056 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 fdb0 	bl	8006b4c <USB_HC_ReadInterrupt>
 8001fec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e025      	b.n	8002040 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d018      	beq.n	800203a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800201a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201e:	d106      	bne.n	800202e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f905 	bl	8002236 <HCD_HC_IN_IRQHandler>
 800202c:	e005      	b.n	800203a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 ff67 	bl	8002f08 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	795b      	ldrb	r3, [r3, #5]
 8002044:	461a      	mov	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4293      	cmp	r3, r2
 800204a:	d3d3      	bcc.n	8001ff4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f004 f832 	bl	80060c4 <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b10      	cmp	r3, #16
 8002068:	d101      	bne.n	800206e <HAL_HCD_IRQHandler+0x1ea>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_HCD_IRQHandler+0x1ec>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d014      	beq.n	800209e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0210 	bic.w	r2, r2, #16
 8002082:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f001 fbe4 	bl	8003852 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0210 	orr.w	r2, r2, #16
 8002098:	619a      	str	r2, [r3, #24]
 800209a:	e000      	b.n	800209e <HAL_HCD_IRQHandler+0x21a>
      return;
 800209c:	bf00      	nop
    }
  }
}
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_HCD_Start+0x16>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e013      	b.n	80020e2 <HAL_HCD_Start+0x3e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 f984 	bl	80063d6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fe92 	bl	8005dfc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_HCD_Stop+0x16>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e00d      	b.n	800211c <HAL_HCD_Stop+0x32>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f004 fe4e 	bl	8006dae <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f004 f926 	bl	8006382 <USB_ResetPort>
 8002136:	4603      	mov	r3, r0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	334c      	adds	r3, #76	; 0x4c
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3338      	adds	r3, #56	; 0x38
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 f968 	bl	8006476 <USB_GetCurrentFrame>
 80021a6:	4603      	mov	r3, r0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 f943 	bl	8006448 <USB_GetHostSpeed>
 80021c2:	4603      	mov	r3, r0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	331a      	adds	r3, #26
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	331b      	adds	r3, #27
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3325      	adds	r3, #37	; 0x25
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3324      	adds	r3, #36	; 0x24
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f003 ff48 	bl	80060ea <USB_ReadChInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b04      	cmp	r3, #4
 8002262:	d11a      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	461a      	mov	r2, r3
 8002272:	2304      	movs	r3, #4
 8002274:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	334d      	adds	r3, #77	; 0x4d
 8002286:	2207      	movs	r2, #7
 8002288:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fc6b 	bl	8006b6e <USB_HC_Halt>
 8002298:	e09e      	b.n	80023d8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 ff21 	bl	80060ea <USB_ReadChInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b2:	d11b      	bne.n	80022ec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	; 0x4d
 80022d8:	2208      	movs	r2, #8
 80022da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 fc42 	bl	8006b6e <USB_HC_Halt>
 80022ea:	e075      	b.n	80023d8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fef8 	bl	80060ea <USB_ReadChInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b08      	cmp	r3, #8
 8002302:	d11a      	bne.n	800233a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	461a      	mov	r2, r3
 8002312:	2308      	movs	r3, #8
 8002314:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	334d      	adds	r3, #77	; 0x4d
 8002326:	2206      	movs	r2, #6
 8002328:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fc1b 	bl	8006b6e <USB_HC_Halt>
 8002338:	e04e      	b.n	80023d8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fed1 	bl	80060ea <USB_ReadChInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002352:	d11b      	bne.n	800238c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002366:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	334d      	adds	r3, #77	; 0x4d
 8002378:	2209      	movs	r2, #9
 800237a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fbf2 	bl	8006b6e <USB_HC_Halt>
 800238a:	e025      	b.n	80023d8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f003 fea8 	bl	80060ea <USB_ReadChInterrupts>
 800239a:	4603      	mov	r3, r0
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b80      	cmp	r3, #128	; 0x80
 80023a2:	d119      	bne.n	80023d8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	461a      	mov	r2, r3
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	334d      	adds	r3, #77	; 0x4d
 80023c6:	2207      	movs	r2, #7
 80023c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 fbcb 	bl	8006b6e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 fe82 	bl	80060ea <USB_ReadChInterrupts>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f0:	d112      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f004 fbb7 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002412:	6093      	str	r3, [r2, #8]
 8002414:	f000 bd75 	b.w	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fe62 	bl	80060ea <USB_ReadChInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 8128 	bne.w	8002682 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2320      	movs	r3, #32
 8002442:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	331b      	adds	r3, #27
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d119      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	331b      	adds	r3, #27
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	0151      	lsls	r1, r2, #5
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	440a      	add	r2, r1
 8002484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	799b      	ldrb	r3, [r3, #6]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d01b      	beq.n	80024ce <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3330      	adds	r3, #48	; 0x30
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	1ac9      	subs	r1, r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4403      	add	r3, r0
 80024ca:	3338      	adds	r3, #56	; 0x38
 80024cc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	334d      	adds	r3, #77	; 0x4d
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3344      	adds	r3, #68	; 0x44
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	2301      	movs	r3, #1
 8002506:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3326      	adds	r3, #38	; 0x26
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3326      	adds	r3, #38	; 0x26
 800252e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002530:	2b02      	cmp	r3, #2
 8002532:	d110      	bne.n	8002556 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f004 fb16 	bl	8006b6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	461a      	mov	r2, r3
 8002550:	2310      	movs	r3, #16
 8002552:	6093      	str	r3, [r2, #8]
 8002554:	e03d      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3326      	adds	r3, #38	; 0x26
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d00a      	beq.n	8002582 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3326      	adds	r3, #38	; 0x26
 800257c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800257e:	2b01      	cmp	r3, #1
 8002580:	d127      	bne.n	80025d2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	440a      	add	r2, r1
 8002598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025a0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	334c      	adds	r3, #76	; 0x4c
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	334c      	adds	r3, #76	; 0x4c
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f006 fdfb 	bl	80091c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	799b      	ldrb	r3, [r3, #6]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d13b      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3338      	adds	r3, #56	; 0x38
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4403      	add	r3, r0
 80025fa:	3328      	adds	r3, #40	; 0x28
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	440b      	add	r3, r1
 8002600:	1e59      	subs	r1, r3, #1
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4403      	add	r3, r0
 8002610:	3328      	adds	r3, #40	; 0x28
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	fbb1 f3f3 	udiv	r3, r1, r3
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8470 	beq.w	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	333c      	adds	r3, #60	; 0x3c
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2d8      	uxtb	r0, r3
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	333c      	adds	r3, #60	; 0x3c
 800264a:	4602      	mov	r2, r0
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	f000 bc58 	b.w	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	333c      	adds	r3, #60	; 0x3c
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	f083 0301 	eor.w	r3, r3, #1
 800266a:	b2d8      	uxtb	r0, r3
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	333c      	adds	r3, #60	; 0x3c
 800267a:	4602      	mov	r2, r0
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	f000 bc40 	b.w	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fd2d 	bl	80060ea <USB_ReadChInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b20      	cmp	r3, #32
 8002698:	d131      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	461a      	mov	r2, r3
 80026a8:	2320      	movs	r3, #32
 80026aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	331a      	adds	r3, #26
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 841f 	bne.w	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	331b      	adds	r3, #27
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	334d      	adds	r3, #77	; 0x4d
 80026e8:	2203      	movs	r2, #3
 80026ea:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 fa3a 	bl	8006b6e <USB_HC_Halt>
 80026fa:	f000 bc02 	b.w	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fcef 	bl	80060ea <USB_ReadChInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	f040 8305 	bne.w	8002d22 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	2302      	movs	r3, #2
 8002728:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	334d      	adds	r3, #77	; 0x4d
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d114      	bne.n	800276a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	334d      	adds	r3, #77	; 0x4d
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	334c      	adds	r3, #76	; 0x4c
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e2cc      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	334d      	adds	r3, #77	; 0x4d
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d114      	bne.n	80027aa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	334d      	adds	r3, #77	; 0x4d
 8002790:	2202      	movs	r2, #2
 8002792:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	334c      	adds	r3, #76	; 0x4c
 80027a4:	2205      	movs	r2, #5
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e2ac      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	334d      	adds	r3, #77	; 0x4d
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b07      	cmp	r3, #7
 80027be:	d00b      	beq.n	80027d8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	334d      	adds	r3, #77	; 0x4d
 80027d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027d2:	2b09      	cmp	r3, #9
 80027d4:	f040 80a6 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	334d      	adds	r3, #77	; 0x4d
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	3344      	adds	r3, #68	; 0x44
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1c59      	adds	r1, r3, #1
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4403      	add	r3, r0
 800280c:	3344      	adds	r3, #68	; 0x44
 800280e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3344      	adds	r3, #68	; 0x44
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d943      	bls.n	80028ae <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3344      	adds	r3, #68	; 0x44
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	331a      	adds	r3, #26
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d123      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	331b      	adds	r3, #27
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	331c      	adds	r3, #28
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	0151      	lsls	r1, r2, #5
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	440a      	add	r2, r1
 800288e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	334c      	adds	r3, #76	; 0x4c
 80028a8:	2204      	movs	r2, #4
 80028aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028ac:	e229      	b.n	8002d02 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	334c      	adds	r3, #76	; 0x4c
 80028be:	2202      	movs	r2, #2
 80028c0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	3326      	adds	r3, #38	; 0x26
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	3326      	adds	r3, #38	; 0x26
 80028e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	f040 8209 	bne.w	8002d02 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002906:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800290e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002922:	e1ee      	b.n	8002d02 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	334d      	adds	r3, #77	; 0x4d
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b05      	cmp	r3, #5
 8002938:	f040 80c8 	bne.w	8002acc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	334d      	adds	r3, #77	; 0x4d
 800294c:	2202      	movs	r2, #2
 800294e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	331b      	adds	r3, #27
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b01      	cmp	r3, #1
 8002964:	f040 81ce 	bne.w	8002d04 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3326      	adds	r3, #38	; 0x26
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d16b      	bne.n	8002a56 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3348      	adds	r3, #72	; 0x48
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1c59      	adds	r1, r3, #1
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4403      	add	r3, r0
 800299e:	3348      	adds	r3, #72	; 0x48
 80029a0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3348      	adds	r3, #72	; 0x48
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d943      	bls.n	8002a40 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3348      	adds	r3, #72	; 0x48
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	331b      	adds	r3, #27
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	3344      	adds	r3, #68	; 0x44
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d809      	bhi.n	8002a0a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	331c      	adds	r3, #28
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	0151      	lsls	r1, r2, #5
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	440a      	add	r2, r1
 8002a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a28:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	334c      	adds	r3, #76	; 0x4c
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e014      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	334c      	adds	r3, #76	; 0x4c
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e009      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334c      	adds	r3, #76	; 0x4c
 8002a66:	2202      	movs	r2, #2
 8002a68:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3326      	adds	r3, #38	; 0x26
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3326      	adds	r3, #38	; 0x26
 8002a90:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	f040 8136 	bne.w	8002d04 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e11b      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334d      	adds	r3, #77	; 0x4d
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	f040 8081 	bne.w	8002be6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	334d      	adds	r3, #77	; 0x4d
 8002af4:	2202      	movs	r2, #2
 8002af6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	331b      	adds	r3, #27
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f040 80fa 	bne.w	8002d04 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	334c      	adds	r3, #76	; 0x4c
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	0151      	lsls	r1, r2, #5
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	440a      	add	r2, r1
 8002b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	0151      	lsls	r1, r2, #5
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	440a      	add	r2, r1
 8002b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b62:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	0151      	lsls	r1, r2, #5
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	440a      	add	r2, r1
 8002b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7e:	f023 0320 	bic.w	r3, r3, #32
 8002b82:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3326      	adds	r3, #38	; 0x26
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3326      	adds	r3, #38	; 0x26
 8002baa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	f040 80a9 	bne.w	8002d04 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bc8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bd0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e08e      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	334d      	adds	r3, #77	; 0x4d
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d143      	bne.n	8002c84 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334d      	adds	r3, #77	; 0x4d
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	334c      	adds	r3, #76	; 0x4c
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3326      	adds	r3, #38	; 0x26
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	3326      	adds	r3, #38	; 0x26
 8002c4a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d159      	bne.n	8002d04 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c66:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c6e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e03f      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	334d      	adds	r3, #77	; 0x4d
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d126      	bne.n	8002ce8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	334d      	adds	r3, #77	; 0x4d
 8002caa:	2202      	movs	r2, #2
 8002cac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3344      	adds	r3, #68	; 0x44
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	1c59      	adds	r1, r3, #1
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4403      	add	r3, r0
 8002cce:	3344      	adds	r3, #68	; 0x44
 8002cd0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	334c      	adds	r3, #76	; 0x4c
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e00d      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334d      	adds	r3, #77	; 0x4d
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	f000 8100 	beq.w	8002f00 <HCD_HC_IN_IRQHandler+0xcca>
 8002d00:	e000      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d02:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	334c      	adds	r3, #76	; 0x4c
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f006 fa54 	bl	80091c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d20:	e0ef      	b.n	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 f9dd 	bl	80060ea <USB_ReadChInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d12f      	bne.n	8002d9a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2340      	movs	r3, #64	; 0x40
 8002d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	334d      	adds	r3, #77	; 0x4d
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	331a      	adds	r3, #26
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3344      	adds	r3, #68	; 0x44
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 feeb 	bl	8006b6e <USB_HC_Halt>
 8002d98:	e0b3      	b.n	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 f9a1 	bl	80060ea <USB_ReadChInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	f040 80a7 	bne.w	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3326      	adds	r3, #38	; 0x26
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d11b      	bne.n	8002e02 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3344      	adds	r3, #68	; 0x44
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	334d      	adds	r3, #77	; 0x4d
 8002dee:	2204      	movs	r2, #4
 8002df0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 feb7 	bl	8006b6e <USB_HC_Halt>
 8002e00:	e03f      	b.n	8002e82 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3326      	adds	r3, #38	; 0x26
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3326      	adds	r3, #38	; 0x26
 8002e28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d129      	bne.n	8002e82 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3344      	adds	r3, #68	; 0x44
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	799b      	ldrb	r3, [r3, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HCD_HC_IN_IRQHandler+0xc2a>
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	331b      	adds	r3, #27
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d110      	bne.n	8002e82 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	; 0x4d
 8002e70:	2204      	movs	r2, #4
 8002e72:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fe76 	bl	8006b6e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	331b      	adds	r3, #27
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d129      	bne.n	8002eec <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	331b      	adds	r3, #27
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	0151      	lsls	r1, r2, #5
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	440a      	add	r2, r1
 8002ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	0151      	lsls	r1, r2, #5
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	440a      	add	r2, r1
 8002ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ee6:	f043 0320 	orr.w	r3, r3, #32
 8002eea:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2310      	movs	r3, #16
 8002efc:	6093      	str	r3, [r2, #8]
 8002efe:	e000      	b.n	8002f02 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002f00:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 f8df 	bl	80060ea <USB_ReadChInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d11b      	bne.n	8002f6e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	461a      	mov	r2, r3
 8002f44:	2304      	movs	r3, #4
 8002f46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	334d      	adds	r3, #77	; 0x4d
 8002f58:	2207      	movs	r2, #7
 8002f5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 fe02 	bl	8006b6e <USB_HC_Halt>
 8002f6a:	f000 bc6f 	b.w	800384c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 f8b7 	bl	80060ea <USB_ReadChInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	f040 8082 	bne.w	800308c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	461a      	mov	r2, r3
 8002f96:	2320      	movs	r3, #32
 8002f98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3319      	adds	r3, #25
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d124      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3319      	adds	r3, #25
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	334c      	adds	r3, #76	; 0x4c
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	334d      	adds	r3, #77	; 0x4d
 8002fe8:	2203      	movs	r2, #3
 8002fea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 fdba 	bl	8006b6e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	331a      	adds	r3, #26
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	f040 841d 	bne.w	800384c <HCD_HC_OUT_IRQHandler+0x944>
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	331b      	adds	r3, #27
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 8411 	bne.w	800384c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3326      	adds	r3, #38	; 0x26
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d009      	beq.n	8003054 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	331b      	adds	r3, #27
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	334d      	adds	r3, #77	; 0x4d
 8003064:	2203      	movs	r2, #3
 8003066:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f003 fd7c 	bl	8006b6e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	3344      	adds	r3, #68	; 0x44
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e3df      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f003 f828 	bl	80060ea <USB_ReadChInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a4:	d111      	bne.n	80030ca <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	461a      	mov	r2, r3
 80030b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fd53 	bl	8006b6e <USB_HC_Halt>
 80030c8:	e3c0      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 f809 	bl	80060ea <USB_ReadChInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d168      	bne.n	80031b4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3344      	adds	r3, #68	; 0x44
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f002 fff3 	bl	80060ea <USB_ReadChInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d112      	bne.n	8003134 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3319      	adds	r3, #25
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	461a      	mov	r2, r3
 8003130:	2340      	movs	r3, #64	; 0x40
 8003132:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	331b      	adds	r3, #27
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d019      	beq.n	800317e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	331b      	adds	r3, #27
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	0151      	lsls	r1, r2, #5
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	440a      	add	r2, r1
 8003174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	461a      	mov	r2, r3
 800318c:	2301      	movs	r3, #1
 800318e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	334d      	adds	r3, #77	; 0x4d
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 fcde 	bl	8006b6e <USB_HC_Halt>
 80031b2:	e34b      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f002 ff94 	bl	80060ea <USB_ReadChInterrupts>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d139      	bne.n	8003240 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	334d      	adds	r3, #77	; 0x4d
 80031dc:	2205      	movs	r2, #5
 80031de:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	331a      	adds	r3, #26
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3319      	adds	r3, #25
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3344      	adds	r3, #68	; 0x44
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f003 fca1 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	461a      	mov	r2, r3
 800323a:	2340      	movs	r3, #64	; 0x40
 800323c:	6093      	str	r3, [r2, #8]
 800323e:	e305      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f002 ff4e 	bl	80060ea <USB_ReadChInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b08      	cmp	r3, #8
 8003256:	d11a      	bne.n	800328e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	2308      	movs	r3, #8
 8003268:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	334d      	adds	r3, #77	; 0x4d
 800327a:	2206      	movs	r2, #6
 800327c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f003 fc71 	bl	8006b6e <USB_HC_Halt>
 800328c:	e2de      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f002 ff27 	bl	80060ea <USB_ReadChInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d144      	bne.n	8003330 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3344      	adds	r3, #68	; 0x44
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334d      	adds	r3, #77	; 0x4d
 80032ca:	2204      	movs	r2, #4
 80032cc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3319      	adds	r3, #25
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d114      	bne.n	800330e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	3318      	adds	r3, #24
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3319      	adds	r3, #25
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fc29 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2310      	movs	r3, #16
 800332c:	6093      	str	r3, [r2, #8]
 800332e:	e28d      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f002 fed6 	bl	80060ea <USB_ReadChInterrupts>
 800333e:	4603      	mov	r3, r0
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	d169      	bne.n	800341c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	799b      	ldrb	r3, [r3, #6]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d111      	bne.n	8003374 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334d      	adds	r3, #77	; 0x4d
 8003360:	2207      	movs	r2, #7
 8003362:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f003 fbfe 	bl	8006b6e <USB_HC_Halt>
 8003372:	e049      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3344      	adds	r3, #68	; 0x44
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	1c59      	adds	r1, r3, #1
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4403      	add	r3, r0
 8003394:	3344      	adds	r3, #68	; 0x44
 8003396:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3344      	adds	r3, #68	; 0x44
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d922      	bls.n	80033f4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	3344      	adds	r3, #68	; 0x44
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	334c      	adds	r3, #76	; 0x4c
 80033d2:	2204      	movs	r2, #4
 80033d4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334c      	adds	r3, #76	; 0x4c
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f005 feeb 	bl	80091c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033f2:	e009      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	334c      	adds	r3, #76	; 0x4c
 8003404:	2202      	movs	r2, #2
 8003406:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	6093      	str	r3, [r2, #8]
 800341a:	e217      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f002 fe60 	bl	80060ea <USB_ReadChInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003434:	d11b      	bne.n	800346e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	334d      	adds	r3, #77	; 0x4d
 8003446:	2209      	movs	r2, #9
 8003448:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fb8b 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	461a      	mov	r2, r3
 8003466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346a:	6093      	str	r3, [r2, #8]
 800346c:	e1ee      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f002 fe37 	bl	80060ea <USB_ReadChInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b02      	cmp	r3, #2
 8003484:	f040 81df 	bne.w	8003846 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	461a      	mov	r2, r3
 8003496:	2302      	movs	r3, #2
 8003498:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334d      	adds	r3, #77	; 0x4d
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	f040 8093 	bne.w	80035d8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	334d      	adds	r3, #77	; 0x4d
 80034c2:	2202      	movs	r2, #2
 80034c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334c      	adds	r3, #76	; 0x4c
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3326      	adds	r3, #38	; 0x26
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d00b      	beq.n	8003508 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3326      	adds	r3, #38	; 0x26
 8003500:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003502:	2b03      	cmp	r3, #3
 8003504:	f040 8190 	bne.w	8003828 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	799b      	ldrb	r3, [r3, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d115      	bne.n	800353c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	333d      	adds	r3, #61	; 0x3d
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2d8      	uxtb	r0, r3
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	333d      	adds	r3, #61	; 0x3d
 8003538:	4602      	mov	r2, r0
 800353a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	799b      	ldrb	r3, [r3, #6]
 8003540:	2b01      	cmp	r3, #1
 8003542:	f040 8171 	bne.w	8003828 <HCD_HC_OUT_IRQHandler+0x920>
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3334      	adds	r3, #52	; 0x34
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8165 	beq.w	8003828 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3334      	adds	r3, #52	; 0x34
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4403      	add	r3, r0
 800357e:	3328      	adds	r3, #40	; 0x28
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	440b      	add	r3, r1
 8003584:	1e59      	subs	r1, r3, #1
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4403      	add	r3, r0
 8003594:	3328      	adds	r3, #40	; 0x28
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	fbb1 f3f3 	udiv	r3, r1, r3
 800359c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 813f 	beq.w	8003828 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	333d      	adds	r3, #61	; 0x3d
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	f083 0301 	eor.w	r3, r3, #1
 80035c2:	b2d8      	uxtb	r0, r3
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	333d      	adds	r3, #61	; 0x3d
 80035d2:	4602      	mov	r2, r0
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e127      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	334d      	adds	r3, #77	; 0x4d
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d120      	bne.n	8003630 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334d      	adds	r3, #77	; 0x4d
 80035fe:	2202      	movs	r2, #2
 8003600:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	331b      	adds	r3, #27
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 8107 	bne.w	8003828 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	334c      	adds	r3, #76	; 0x4c
 800362a:	2202      	movs	r2, #2
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e0fb      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334d      	adds	r3, #77	; 0x4d
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d13a      	bne.n	80036bc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	334d      	adds	r3, #77	; 0x4d
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	334c      	adds	r3, #76	; 0x4c
 800366a:	2202      	movs	r2, #2
 800366c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	331b      	adds	r3, #27
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	f040 80d1 	bne.w	8003828 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	331b      	adds	r3, #27
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	0151      	lsls	r1, r2, #5
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	440a      	add	r2, r1
 80036b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b8:	6053      	str	r3, [r2, #4]
 80036ba:	e0b5      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	334d      	adds	r3, #77	; 0x4d
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d114      	bne.n	80036fc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	334d      	adds	r3, #77	; 0x4d
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	334c      	adds	r3, #76	; 0x4c
 80036f6:	2202      	movs	r2, #2
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e095      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	334d      	adds	r3, #77	; 0x4d
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b06      	cmp	r3, #6
 8003710:	d114      	bne.n	800373c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	334d      	adds	r3, #77	; 0x4d
 8003722:	2202      	movs	r2, #2
 8003724:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	334c      	adds	r3, #76	; 0x4c
 8003736:	2205      	movs	r2, #5
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e075      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	; 0x4d
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b07      	cmp	r3, #7
 8003750:	d00a      	beq.n	8003768 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	334d      	adds	r3, #77	; 0x4d
 8003762:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003764:	2b09      	cmp	r3, #9
 8003766:	d170      	bne.n	800384a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	334d      	adds	r3, #77	; 0x4d
 8003778:	2202      	movs	r2, #2
 800377a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3344      	adds	r3, #68	; 0x44
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	1c59      	adds	r1, r3, #1
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4403      	add	r3, r0
 800379c:	3344      	adds	r3, #68	; 0x44
 800379e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3344      	adds	r3, #68	; 0x44
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d914      	bls.n	80037e0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3344      	adds	r3, #68	; 0x44
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	334c      	adds	r3, #76	; 0x4c
 80037da:	2204      	movs	r2, #4
 80037dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037de:	e022      	b.n	8003826 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334c      	adds	r3, #76	; 0x4c
 80037f0:	2202      	movs	r2, #2
 80037f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800380a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003812:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	461a      	mov	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003826:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	334c      	adds	r3, #76	; 0x4c
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f005 fcc2 	bl	80091c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003844:	e002      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800384a:	bf00      	nop
  }
}
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b08a      	sub	sp, #40	; 0x28
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	0c5b      	lsrs	r3, r3, #17
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003886:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d004      	beq.n	8003898 <HCD_RXQLVL_IRQHandler+0x46>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b05      	cmp	r3, #5
 8003892:	f000 80b6 	beq.w	8003a02 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003896:	e0b7      	b.n	8003a08 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80b3 	beq.w	8003a06 <HCD_RXQLVL_IRQHandler+0x1b4>
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	332c      	adds	r3, #44	; 0x2c
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80a7 	beq.w	8003a06 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3338      	adds	r3, #56	; 0x38
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	18d1      	adds	r1, r2, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4403      	add	r3, r0
 80038dc:	3334      	adds	r3, #52	; 0x34
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4299      	cmp	r1, r3
 80038e2:	f200 8083 	bhi.w	80039ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	332c      	adds	r3, #44	; 0x2c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	b292      	uxth	r2, r2
 8003900:	4619      	mov	r1, r3
 8003902:	f002 fb87 	bl	8006014 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	332c      	adds	r3, #44	; 0x2c
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	18d1      	adds	r1, r2, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4403      	add	r3, r0
 800392a:	332c      	adds	r3, #44	; 0x2c
 800392c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3338      	adds	r3, #56	; 0x38
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	18d1      	adds	r1, r2, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4403      	add	r3, r0
 8003952:	3338      	adds	r3, #56	; 0x38
 8003954:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	0cdb      	lsrs	r3, r3, #19
 8003966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800396a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3328      	adds	r3, #40	; 0x28
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4293      	cmp	r3, r2
 8003984:	d13f      	bne.n	8003a06 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d03c      	beq.n	8003a06 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	333c      	adds	r3, #60	; 0x3c
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f083 0301 	eor.w	r3, r3, #1
 80039d4:	b2d8      	uxtb	r0, r3
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4613      	mov	r3, r2
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	333c      	adds	r3, #60	; 0x3c
 80039e6:	4602      	mov	r2, r0
 80039e8:	701a      	strb	r2, [r3, #0]
      break;
 80039ea:	e00c      	b.n	8003a06 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	334c      	adds	r3, #76	; 0x4c
 80039fc:	2204      	movs	r2, #4
 80039fe:	701a      	strb	r2, [r3, #0]
      break;
 8003a00:	e001      	b.n	8003a06 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003a06:	bf00      	nop
  }
}
 8003a08:	bf00      	nop
 8003a0a:	3728      	adds	r7, #40	; 0x28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d10b      	bne.n	8003a60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f005 fb9c 	bl	8009190 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d132      	bne.n	8003ad0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d126      	bne.n	8003aca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7a5b      	ldrb	r3, [r3, #9]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d113      	bne.n	8003aac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a8e:	d106      	bne.n	8003a9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 fc36 	bl	8006308 <USB_InitFSLSPClkSel>
 8003a9c:	e011      	b.n	8003ac2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 fc2f 	bl	8006308 <USB_InitFSLSPClkSel>
 8003aaa:	e00a      	b.n	8003ac2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	79db      	ldrb	r3, [r3, #7]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aba:	461a      	mov	r2, r3
 8003abc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ac0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f005 fb8e 	bl	80091e4 <HAL_HCD_PortEnabled_Callback>
 8003ac8:	e002      	b.n	8003ad0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f005 fb98 	bl	8009200 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d103      	bne.n	8003ae2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f043 0320 	orr.w	r3, r3, #32
 8003ae0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	6013      	str	r3, [r2, #0]
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1bd      	b.n	8003e86 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a93      	ldr	r2, [pc, #588]	; (8003d5c <HAL_I2C_Init+0x264>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_I2C_Init+0x3a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a91      	ldr	r2, [pc, #580]	; (8003d60 <HAL_I2C_Init+0x268>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_I2C_Init+0x3a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a90      	ldr	r2, [pc, #576]	; (8003d64 <HAL_I2C_Init+0x26c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_I2C_Init+0x3a>
 8003b28:	f240 11c9 	movw	r1, #457	; 0x1c9
 8003b2c:	488e      	ldr	r0, [pc, #568]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003b2e:	f7fd f89e 	bl	8000c6e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_I2C_Init+0x4c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a8b      	ldr	r2, [pc, #556]	; (8003d6c <HAL_I2C_Init+0x274>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d904      	bls.n	8003b4e <HAL_I2C_Init+0x56>
 8003b44:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8003b48:	4887      	ldr	r0, [pc, #540]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003b4a:	f7fd f890 	bl	8000c6e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_I2C_Init+0x72>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b5e:	d004      	beq.n	8003b6a <HAL_I2C_Init+0x72>
 8003b60:	f240 11cb 	movw	r1, #459	; 0x1cb
 8003b64:	4880      	ldr	r0, [pc, #512]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003b66:	f7fd f882 	bl	8000c6e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <HAL_I2C_Init+0x8c>
 8003b7a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003b7e:	487a      	ldr	r0, [pc, #488]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003b80:	f7fd f875 	bl	8000c6e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8c:	d009      	beq.n	8003ba2 <HAL_I2C_Init+0xaa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b96:	d004      	beq.n	8003ba2 <HAL_I2C_Init+0xaa>
 8003b98:	f240 11cd 	movw	r1, #461	; 0x1cd
 8003b9c:	4872      	ldr	r0, [pc, #456]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003b9e:	f7fd f866 	bl	8000c6e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_I2C_Init+0xc4>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d004      	beq.n	8003bbc <HAL_I2C_Init+0xc4>
 8003bb2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8003bb6:	486c      	ldr	r0, [pc, #432]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003bb8:	f7fd f859 	bl	8000c6e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_I2C_Init+0xda>
 8003bc8:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003bcc:	4866      	ldr	r0, [pc, #408]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003bce:	f7fd f84e 	bl	8000c6e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_I2C_Init+0xf4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	d004      	beq.n	8003bec <HAL_I2C_Init+0xf4>
 8003be2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8003be6:	4860      	ldr	r0, [pc, #384]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003be8:	f7fd f841 	bl	8000c6e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_I2C_Init+0x10e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	2b80      	cmp	r3, #128	; 0x80
 8003bfa:	d004      	beq.n	8003c06 <HAL_I2C_Init+0x10e>
 8003bfc:	f240 11d1 	movw	r1, #465	; 0x1d1
 8003c00:	4859      	ldr	r0, [pc, #356]	; (8003d68 <HAL_I2C_Init+0x270>)
 8003c02:	f7fd f834 	bl	8000c6e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fc fda6 	bl	800076c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c58:	f001 fc44 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4a43      	ldr	r2, [pc, #268]	; (8003d70 <HAL_I2C_Init+0x278>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d807      	bhi.n	8003c78 <HAL_I2C_Init+0x180>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <HAL_I2C_Init+0x27c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e006      	b.n	8003c86 <HAL_I2C_Init+0x18e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a3f      	ldr	r2, [pc, #252]	; (8003d78 <HAL_I2C_Init+0x280>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bf94      	ite	ls
 8003c80:	2301      	movls	r3, #1
 8003c82:	2300      	movhi	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0fb      	b.n	8003e86 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <HAL_I2C_Init+0x284>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0c9b      	lsrs	r3, r3, #18
 8003c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <HAL_I2C_Init+0x278>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d802      	bhi.n	8003cc8 <HAL_I2C_Init+0x1d0>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	e009      	b.n	8003cdc <HAL_I2C_Init+0x1e4>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	4a2b      	ldr	r2, [pc, #172]	; (8003d80 <HAL_I2C_Init+0x288>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	3301      	adds	r3, #1
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	491e      	ldr	r1, [pc, #120]	; (8003d70 <HAL_I2C_Init+0x278>)
 8003cf8:	428b      	cmp	r3, r1
 8003cfa:	d819      	bhi.n	8003d30 <HAL_I2C_Init+0x238>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e59      	subs	r1, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d10:	400b      	ands	r3, r1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_I2C_Init+0x234>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e59      	subs	r1, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2a:	e065      	b.n	8003df8 <HAL_I2C_Init+0x300>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	e063      	b.n	8003df8 <HAL_I2C_Init+0x300>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d125      	bne.n	8003d84 <HAL_I2C_Init+0x28c>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1e58      	subs	r0, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e026      	b.n	8003daa <HAL_I2C_Init+0x2b2>
 8003d5c:	40005400 	.word	0x40005400
 8003d60:	40005800 	.word	0x40005800
 8003d64:	40005c00 	.word	0x40005c00
 8003d68:	08009968 	.word	0x08009968
 8003d6c:	00061a80 	.word	0x00061a80
 8003d70:	000186a0 	.word	0x000186a0
 8003d74:	001e847f 	.word	0x001e847f
 8003d78:	003d08ff 	.word	0x003d08ff
 8003d7c:	431bde83 	.word	0x431bde83
 8003d80:	10624dd3 	.word	0x10624dd3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Init+0x2ba>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e022      	b.n	8003df8 <HAL_I2C_Init+0x300>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <HAL_I2C_Init+0x2e0>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e58      	subs	r0, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	e00f      	b.n	8003df8 <HAL_I2C_Init+0x300>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e58      	subs	r0, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	0099      	lsls	r1, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	6809      	ldr	r1, [r1, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6911      	ldr	r1, [r2, #16]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop

08003e90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e1e7      	b.n	8004272 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a92      	ldr	r2, [pc, #584]	; (80040f0 <HAL_I2S_Init+0x260>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_I2S_Init+0x4e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a90      	ldr	r2, [pc, #576]	; (80040f4 <HAL_I2S_Init+0x264>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_I2S_Init+0x4e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a8f      	ldr	r2, [pc, #572]	; (80040f8 <HAL_I2S_Init+0x268>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_I2S_Init+0x4e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a8d      	ldr	r2, [pc, #564]	; (80040fc <HAL_I2S_Init+0x26c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_I2S_Init+0x4e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a8c      	ldr	r2, [pc, #560]	; (8004100 <HAL_I2S_Init+0x270>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_I2S_Init+0x4e>
 8003ed4:	f240 111b 	movw	r1, #283	; 0x11b
 8003ed8:	488a      	ldr	r0, [pc, #552]	; (8004104 <HAL_I2S_Init+0x274>)
 8003eda:	f7fc fec8 	bl	8000c6e <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d013      	beq.n	8003f0e <HAL_I2S_Init+0x7e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eee:	d00e      	beq.n	8003f0e <HAL_I2S_Init+0x7e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef8:	d009      	beq.n	8003f0e <HAL_I2S_Init+0x7e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f02:	d004      	beq.n	8003f0e <HAL_I2S_Init+0x7e>
 8003f04:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8003f08:	487e      	ldr	r0, [pc, #504]	; (8004104 <HAL_I2S_Init+0x274>)
 8003f0a:	f7fc feb0 	bl	8000c6e <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <HAL_I2S_Init+0xb0>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d010      	beq.n	8003f40 <HAL_I2S_Init+0xb0>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d00c      	beq.n	8003f40 <HAL_I2S_Init+0xb0>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b30      	cmp	r3, #48	; 0x30
 8003f2c:	d008      	beq.n	8003f40 <HAL_I2S_Init+0xb0>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2bb0      	cmp	r3, #176	; 0xb0
 8003f34:	d004      	beq.n	8003f40 <HAL_I2S_Init+0xb0>
 8003f36:	f240 111d 	movw	r1, #285	; 0x11d
 8003f3a:	4872      	ldr	r0, [pc, #456]	; (8004104 <HAL_I2S_Init+0x274>)
 8003f3c:	f7fc fe97 	bl	8000c6e <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_I2S_Init+0xda>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d00c      	beq.n	8003f6a <HAL_I2S_Init+0xda>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d008      	beq.n	8003f6a <HAL_I2S_Init+0xda>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d004      	beq.n	8003f6a <HAL_I2S_Init+0xda>
 8003f60:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003f64:	4867      	ldr	r0, [pc, #412]	; (8004104 <HAL_I2S_Init+0x274>)
 8003f66:	f7fc fe82 	bl	8000c6e <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f72:	d008      	beq.n	8003f86 <HAL_I2S_Init+0xf6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_I2S_Init+0xf6>
 8003f7c:	f240 111f 	movw	r1, #287	; 0x11f
 8003f80:	4860      	ldr	r0, [pc, #384]	; (8004104 <HAL_I2S_Init+0x274>)
 8003f82:	f7fc fe74 	bl	8000c6e <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003f8e:	d304      	bcc.n	8003f9a <HAL_I2S_Init+0x10a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	4a5c      	ldr	r2, [pc, #368]	; (8004108 <HAL_I2S_Init+0x278>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d908      	bls.n	8003fac <HAL_I2S_Init+0x11c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d004      	beq.n	8003fac <HAL_I2S_Init+0x11c>
 8003fa2:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003fa6:	4857      	ldr	r0, [pc, #348]	; (8004104 <HAL_I2S_Init+0x274>)
 8003fa8:	f7fc fe61 	bl	8000c6e <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_I2S_Init+0x136>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d004      	beq.n	8003fc6 <HAL_I2S_Init+0x136>
 8003fbc:	f240 1121 	movw	r1, #289	; 0x121
 8003fc0:	4850      	ldr	r0, [pc, #320]	; (8004104 <HAL_I2S_Init+0x274>)
 8003fc2:	f7fc fe54 	bl	8000c6e <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d008      	beq.n	8003fe0 <HAL_I2S_Init+0x150>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <HAL_I2S_Init+0x150>
 8003fd6:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003fda:	484a      	ldr	r0, [pc, #296]	; (8004104 <HAL_I2S_Init+0x274>)
 8003fdc:	f7fc fe47 	bl	8000c6e <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a45      	ldr	r2, [pc, #276]	; (800410c <HAL_I2S_Init+0x27c>)
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fc5c 	bl	80008b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004016:	f023 030f 	bic.w	r3, r3, #15
 800401a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2202      	movs	r2, #2
 8004022:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d073      	beq.n	8004114 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004034:	2310      	movs	r3, #16
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e001      	b.n	800403e <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800403a:	2320      	movs	r3, #32
 800403c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b20      	cmp	r3, #32
 8004044:	d802      	bhi.n	800404c <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800404c:	2001      	movs	r0, #1
 800404e:	f001 fc73 	bl	8005938 <HAL_RCCEx_GetPeriphCLKFreq>
 8004052:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405c:	d125      	bne.n	80040aa <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	3305      	adds	r3, #5
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e01f      	b.n	80040c8 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	3305      	adds	r3, #5
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	e00e      	b.n	80040c8 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	461a      	mov	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	3305      	adds	r3, #5
 80040c6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_I2S_Init+0x280>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	08db      	lsrs	r3, r3, #3
 80040d2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	e016      	b.n	800411c <HAL_I2S_Init+0x28c>
 80040ee:	bf00      	nop
 80040f0:	40013000 	.word	0x40013000
 80040f4:	40003800 	.word	0x40003800
 80040f8:	40003c00 	.word	0x40003c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40015000 	.word	0x40015000
 8004104:	080099a0 	.word	0x080099a0
 8004108:	0002ee00 	.word	0x0002ee00
 800410c:	08004383 	.word	0x08004383
 8004110:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004114:	2302      	movs	r3, #2
 8004116:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d902      	bls.n	8004128 <HAL_I2S_Init+0x298>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2bff      	cmp	r3, #255	; 0xff
 8004126:	d907      	bls.n	8004138 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f043 0210 	orr.w	r2, r3, #16
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e09c      	b.n	8004272 <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	ea42 0103 	orr.w	r1, r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	430a      	orrs	r2, r1
 800414a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004156:	f023 030f 	bic.w	r3, r3, #15
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6851      	ldr	r1, [r2, #4]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6892      	ldr	r2, [r2, #8]
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68d2      	ldr	r2, [r2, #12]
 8004168:	4311      	orrs	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6992      	ldr	r2, [r2, #24]
 800416e:	430a      	orrs	r2, r1
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_I2S_Init+0x306>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d004      	beq.n	8004196 <HAL_I2S_Init+0x306>
 800418c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8004190:	483a      	ldr	r0, [pc, #232]	; (800427c <HAL_I2S_Init+0x3ec>)
 8004192:	f7fc fd6c 	bl	8000c6e <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d161      	bne.n	8004262 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a37      	ldr	r2, [pc, #220]	; (8004280 <HAL_I2S_Init+0x3f0>)
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a36      	ldr	r2, [pc, #216]	; (8004284 <HAL_I2S_Init+0x3f4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d101      	bne.n	80041b2 <HAL_I2S_Init+0x322>
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <HAL_I2S_Init+0x3f8>)
 80041b0:	e001      	b.n	80041b6 <HAL_I2S_Init+0x326>
 80041b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	4931      	ldr	r1, [pc, #196]	; (8004284 <HAL_I2S_Init+0x3f4>)
 80041be:	428a      	cmp	r2, r1
 80041c0:	d101      	bne.n	80041c6 <HAL_I2S_Init+0x336>
 80041c2:	4a31      	ldr	r2, [pc, #196]	; (8004288 <HAL_I2S_Init+0x3f8>)
 80041c4:	e001      	b.n	80041ca <HAL_I2S_Init+0x33a>
 80041c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041ce:	f023 030f 	bic.w	r3, r3, #15
 80041d2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_I2S_Init+0x3f4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_I2S_Init+0x352>
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_I2S_Init+0x3f8>)
 80041e0:	e001      	b.n	80041e6 <HAL_I2S_Init+0x356>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e6:	2202      	movs	r2, #2
 80041e8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a25      	ldr	r2, [pc, #148]	; (8004284 <HAL_I2S_Init+0x3f4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <HAL_I2S_Init+0x368>
 80041f4:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_I2S_Init+0x3f8>)
 80041f6:	e001      	b.n	80041fc <HAL_I2S_Init+0x36c>
 80041f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d003      	beq.n	8004212 <HAL_I2S_Init+0x382>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	e001      	b.n	800421e <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004228:	4313      	orrs	r3, r2
 800422a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004232:	4313      	orrs	r3, r2
 8004234:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800423c:	4313      	orrs	r3, r2
 800423e:	b29a      	uxth	r2, r3
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	4313      	orrs	r3, r2
 8004244:	b29b      	uxth	r3, r3
 8004246:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800424a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <HAL_I2S_Init+0x3f4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_I2S_Init+0x3ca>
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <HAL_I2S_Init+0x3f8>)
 8004258:	e001      	b.n	800425e <HAL_I2S_Init+0x3ce>
 800425a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425e:	897a      	ldrh	r2, [r7, #10]
 8004260:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	080099a0 	.word	0x080099a0
 8004280:	08004499 	.word	0x08004499
 8004284:	40003800 	.word	0x40003800
 8004288:	40003400 	.word	0x40003400

0800428c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	881a      	ldrh	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c9a      	adds	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10e      	bne.n	800431c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800430c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ffb8 	bl	800428c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	b292      	uxth	r2, r2
 8004338:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	1c9a      	adds	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10e      	bne.n	800437a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800436a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff93 	bl	80042a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b04      	cmp	r3, #4
 800439c:	d13a      	bne.n	8004414 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d109      	bne.n	80043bc <I2S_IRQHandler+0x3a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d102      	bne.n	80043bc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ffb4 	bl	8004324 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d126      	bne.n	8004414 <I2S_IRQHandler+0x92>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d11f      	bne.n	8004414 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f043 0202 	orr.w	r2, r3, #2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff50 	bl	80042b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b03      	cmp	r3, #3
 800441e:	d136      	bne.n	800448e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d109      	bne.n	800443e <I2S_IRQHandler+0xbc>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d102      	bne.n	800443e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff45 	bl	80042c8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b08      	cmp	r3, #8
 8004446:	d122      	bne.n	800448e <I2S_IRQHandler+0x10c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b20      	cmp	r3, #32
 8004454:	d11b      	bne.n	800448e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004464:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff13 	bl	80042b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a92      	ldr	r2, [pc, #584]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044b2:	4b92      	ldr	r3, [pc, #584]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044b4:	e001      	b.n	80044ba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a8b      	ldr	r2, [pc, #556]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044d0:	4b8a      	ldr	r3, [pc, #552]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044d2:	e001      	b.n	80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e4:	d004      	beq.n	80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 8099 	bne.w	8004622 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d107      	bne.n	800450a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f925 	bl	8004754 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d107      	bne.n	8004524 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f9c8 	bl	80048b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d13a      	bne.n	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d035      	beq.n	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a6e      	ldr	r2, [pc, #440]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004542:	4b6e      	ldr	r3, [pc, #440]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004544:	e001      	b.n	800454a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4969      	ldr	r1, [pc, #420]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004552:	428b      	cmp	r3, r1
 8004554:	d101      	bne.n	800455a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004556:	4b69      	ldr	r3, [pc, #420]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004558:	e001      	b.n	800455e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800455a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800455e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004562:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004572:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f043 0202 	orr.w	r2, r3, #2
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fe88 	bl	80042b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	f040 80c3 	bne.w	8004736 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80bd 	beq.w	8004736 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a49      	ldr	r2, [pc, #292]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045d6:	4b49      	ldr	r3, [pc, #292]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045d8:	e001      	b.n	80045de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4944      	ldr	r1, [pc, #272]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045e6:	428b      	cmp	r3, r1
 80045e8:	d101      	bne.n	80045ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045ea:	4b44      	ldr	r3, [pc, #272]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045ec:	e001      	b.n	80045f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f043 0204 	orr.w	r2, r3, #4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fe4a 	bl	80042b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004620:	e089      	b.n	8004736 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b02      	cmp	r3, #2
 800462a:	d107      	bne.n	800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8be 	bl	80047b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f8fd 	bl	8004850 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d12f      	bne.n	80046c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d02a      	beq.n	80046c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004678:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004684:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004686:	e001      	b.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4919      	ldr	r1, [pc, #100]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004694:	428b      	cmp	r3, r1
 8004696:	d101      	bne.n	800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004698:	4b18      	ldr	r3, [pc, #96]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800469a:	e001      	b.n	80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800469c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	f043 0202 	orr.w	r2, r3, #2
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fdfa 	bl	80042b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d136      	bne.n	8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d031      	beq.n	8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a07      	ldr	r2, [pc, #28]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046de:	4b07      	ldr	r3, [pc, #28]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046e0:	e001      	b.n	80046e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4902      	ldr	r1, [pc, #8]	; (80046f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ee:	428b      	cmp	r3, r1
 80046f0:	d106      	bne.n	8004700 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80046f2:	4b02      	ldr	r3, [pc, #8]	; (80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046f4:	e006      	b.n	8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80046f6:	bf00      	nop
 80046f8:	40003800 	.word	0x40003800
 80046fc:	40003400 	.word	0x40003400
 8004700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004704:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004708:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004718:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	f043 0204 	orr.w	r2, r3, #4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fdc0 	bl	80042b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004734:	e000      	b.n	8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004736:	bf00      	nop
}
 8004738:	bf00      	nop
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	1c99      	adds	r1, r3, #2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6251      	str	r1, [r2, #36]	; 0x24
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d113      	bne.n	80047ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004794:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ffc9 	bl	8004740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	1c99      	adds	r1, r3, #2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6251      	str	r1, [r2, #36]	; 0x24
 80047ca:	8819      	ldrh	r1, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <I2SEx_TxISR_I2SExt+0x90>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <I2SEx_TxISR_I2SExt+0x22>
 80047d6:	4b1d      	ldr	r3, [pc, #116]	; (800484c <I2SEx_TxISR_I2SExt+0x94>)
 80047d8:	e001      	b.n	80047de <I2SEx_TxISR_I2SExt+0x26>
 80047da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047de:	460a      	mov	r2, r1
 80047e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d121      	bne.n	800483e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a12      	ldr	r2, [pc, #72]	; (8004848 <I2SEx_TxISR_I2SExt+0x90>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d101      	bne.n	8004808 <I2SEx_TxISR_I2SExt+0x50>
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <I2SEx_TxISR_I2SExt+0x94>)
 8004806:	e001      	b.n	800480c <I2SEx_TxISR_I2SExt+0x54>
 8004808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	490d      	ldr	r1, [pc, #52]	; (8004848 <I2SEx_TxISR_I2SExt+0x90>)
 8004814:	428b      	cmp	r3, r1
 8004816:	d101      	bne.n	800481c <I2SEx_TxISR_I2SExt+0x64>
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <I2SEx_TxISR_I2SExt+0x94>)
 800481a:	e001      	b.n	8004820 <I2SEx_TxISR_I2SExt+0x68>
 800481c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004820:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004824:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ff81 	bl	8004740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40003800 	.word	0x40003800
 800484c:	40003400 	.word	0x40003400

08004850 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68d8      	ldr	r0, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	1c99      	adds	r1, r3, #2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004868:	b282      	uxth	r2, r0
 800486a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d113      	bne.n	80048ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004892:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff ff4a 	bl	8004740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a20      	ldr	r2, [pc, #128]	; (8004944 <I2SEx_RxISR_I2SExt+0x90>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <I2SEx_RxISR_I2SExt+0x16>
 80048c6:	4b20      	ldr	r3, [pc, #128]	; (8004948 <I2SEx_RxISR_I2SExt+0x94>)
 80048c8:	e001      	b.n	80048ce <I2SEx_RxISR_I2SExt+0x1a>
 80048ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ce:	68d8      	ldr	r0, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	1c99      	adds	r1, r3, #2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048da:	b282      	uxth	r2, r0
 80048dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d121      	bne.n	800493a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a12      	ldr	r2, [pc, #72]	; (8004944 <I2SEx_RxISR_I2SExt+0x90>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <I2SEx_RxISR_I2SExt+0x50>
 8004900:	4b11      	ldr	r3, [pc, #68]	; (8004948 <I2SEx_RxISR_I2SExt+0x94>)
 8004902:	e001      	b.n	8004908 <I2SEx_RxISR_I2SExt+0x54>
 8004904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	490d      	ldr	r1, [pc, #52]	; (8004944 <I2SEx_RxISR_I2SExt+0x90>)
 8004910:	428b      	cmp	r3, r1
 8004912:	d101      	bne.n	8004918 <I2SEx_RxISR_I2SExt+0x64>
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <I2SEx_RxISR_I2SExt+0x94>)
 8004916:	e001      	b.n	800491c <I2SEx_RxISR_I2SExt+0x68>
 8004918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800491c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004920:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff ff03 	bl	8004740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40003800 	.word	0x40003800
 8004948:	40003400 	.word	0x40003400

0800494c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e318      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	d903      	bls.n	800496e <HAL_RCC_OscConfig+0x22>
 8004966:	21e6      	movs	r1, #230	; 0xe6
 8004968:	4897      	ldr	r0, [pc, #604]	; (8004bc8 <HAL_RCC_OscConfig+0x27c>)
 800496a:	f7fc f980 	bl	8000c6e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8088 	beq.w	8004a8c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00d      	beq.n	80049a0 <HAL_RCC_OscConfig+0x54>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d008      	beq.n	80049a0 <HAL_RCC_OscConfig+0x54>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004996:	d003      	beq.n	80049a0 <HAL_RCC_OscConfig+0x54>
 8004998:	21eb      	movs	r1, #235	; 0xeb
 800499a:	488b      	ldr	r0, [pc, #556]	; (8004bc8 <HAL_RCC_OscConfig+0x27c>)
 800499c:	f7fc f967 	bl	8000c6e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049a0:	4b8a      	ldr	r3, [pc, #552]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d00c      	beq.n	80049c6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ac:	4b87      	ldr	r3, [pc, #540]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d112      	bne.n	80049de <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049b8:	4b84      	ldr	r3, [pc, #528]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c4:	d10b      	bne.n	80049de <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c6:	4b81      	ldr	r3, [pc, #516]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d05b      	beq.n	8004a8a <HAL_RCC_OscConfig+0x13e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d157      	bne.n	8004a8a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e2d8      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e6:	d106      	bne.n	80049f6 <HAL_RCC_OscConfig+0xaa>
 80049e8:	4b78      	ldr	r3, [pc, #480]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a77      	ldr	r2, [pc, #476]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e01d      	b.n	8004a32 <HAL_RCC_OscConfig+0xe6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCC_OscConfig+0xce>
 8004a00:	4b72      	ldr	r3, [pc, #456]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a71      	ldr	r2, [pc, #452]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4b6f      	ldr	r3, [pc, #444]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a6e      	ldr	r2, [pc, #440]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e00b      	b.n	8004a32 <HAL_RCC_OscConfig+0xe6>
 8004a1a:	4b6c      	ldr	r3, [pc, #432]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6b      	ldr	r2, [pc, #428]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b69      	ldr	r3, [pc, #420]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a68      	ldr	r2, [pc, #416]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d013      	beq.n	8004a62 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3a:	f7fc fad5 	bl	8000fe8 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a42:	f7fc fad1 	bl	8000fe8 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	; 0x64
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e29d      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a54:	4b5d      	ldr	r3, [pc, #372]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0xf6>
 8004a60:	e014      	b.n	8004a8c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fc fac1 	bl	8000fe8 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a6a:	f7fc fabd 	bl	8000fe8 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b64      	cmp	r3, #100	; 0x64
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e289      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x11e>
 8004a88:	e000      	b.n	8004a8c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d079      	beq.n	8004b8c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x166>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d004      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x166>
 8004aa8:	f240 111d 	movw	r1, #285	; 0x11d
 8004aac:	4846      	ldr	r0, [pc, #280]	; (8004bc8 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	f7fc f8de 	bl	8000c6e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b1f      	cmp	r3, #31
 8004ab8:	d904      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x178>
 8004aba:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004abe:	4842      	ldr	r0, [pc, #264]	; (8004bc8 <HAL_RCC_OscConfig+0x27c>)
 8004ac0:	f7fc f8d5 	bl	8000c6e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac4:	4b41      	ldr	r3, [pc, #260]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad0:	4b3e      	ldr	r3, [pc, #248]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d11c      	bne.n	8004b16 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004adc:	4b3b      	ldr	r3, [pc, #236]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d116      	bne.n	8004b16 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae8:	4b38      	ldr	r3, [pc, #224]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_OscConfig+0x1b4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e247      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b00:	4b32      	ldr	r3, [pc, #200]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	492f      	ldr	r1, [pc, #188]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b14:	e03a      	b.n	8004b8c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d020      	beq.n	8004b60 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1e:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <HAL_RCC_OscConfig+0x284>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fc fa60 	bl	8000fe8 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2c:	f7fc fa5c 	bl	8000fe8 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e228      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3e:	4b23      	ldr	r3, [pc, #140]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4a:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	491c      	ldr	r1, [pc, #112]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
 8004b5e:	e015      	b.n	8004b8c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x284>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b66:	f7fc fa3f 	bl	8000fe8 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6e:	f7fc fa3b 	bl	8000fe8 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e207      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b80:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_RCC_OscConfig+0x280>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d045      	beq.n	8004c24 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x266>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d004      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x266>
 8004ba8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004bac:	4806      	ldr	r0, [pc, #24]	; (8004bc8 <HAL_RCC_OscConfig+0x27c>)
 8004bae:	f7fc f85e 	bl	8000c6e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01e      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fc fa12 	bl	8000fe8 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	e010      	b.n	8004bea <HAL_RCC_OscConfig+0x29e>
 8004bc8:	080099d8 	.word	0x080099d8
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	42470000 	.word	0x42470000
 8004bd4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd8:	f7fc fa06 	bl	8000fe8 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e1d2      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	4b5e      	ldr	r3, [pc, #376]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x28c>
 8004bf6:	e015      	b.n	8004c24 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf8:	4b5b      	ldr	r3, [pc, #364]	; (8004d68 <HAL_RCC_OscConfig+0x41c>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfe:	f7fc f9f3 	bl	8000fe8 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c06:	f7fc f9ef 	bl	8000fe8 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1bb      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c18:	4b52      	ldr	r3, [pc, #328]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f0      	bne.n	8004c06 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80b0 	beq.w	8004d92 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00c      	beq.n	8004c58 <HAL_RCC_OscConfig+0x30c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d008      	beq.n	8004c58 <HAL_RCC_OscConfig+0x30c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d004      	beq.n	8004c58 <HAL_RCC_OscConfig+0x30c>
 8004c4e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004c52:	4846      	ldr	r0, [pc, #280]	; (8004d6c <HAL_RCC_OscConfig+0x420>)
 8004c54:	f7fc f80b 	bl	8000c6e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c58:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10f      	bne.n	8004c84 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c64:	2300      	movs	r3, #0
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	4a3d      	ldr	r2, [pc, #244]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c72:	6413      	str	r3, [r2, #64]	; 0x40
 8004c74:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	4b3a      	ldr	r3, [pc, #232]	; (8004d70 <HAL_RCC_OscConfig+0x424>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d118      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c90:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_RCC_OscConfig+0x424>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <HAL_RCC_OscConfig+0x424>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9c:	f7fc f9a4 	bl	8000fe8 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fc f9a0 	bl	8000fe8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e16c      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b2e      	ldr	r3, [pc, #184]	; (8004d70 <HAL_RCC_OscConfig+0x424>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x38c>
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd6:	e01c      	b.n	8004d12 <HAL_RCC_OscConfig+0x3c6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCC_OscConfig+0x3ae>
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf8:	e00b      	b.n	8004d12 <HAL_RCC_OscConfig+0x3c6>
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	6713      	str	r3, [r2, #112]	; 0x70
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	4a16      	ldr	r2, [pc, #88]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d015      	beq.n	8004d46 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1a:	f7fc f965 	bl	8000fe8 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d22:	f7fc f961 	bl	8000fe8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e12b      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <HAL_RCC_OscConfig+0x418>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ee      	beq.n	8004d22 <HAL_RCC_OscConfig+0x3d6>
 8004d44:	e01c      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d46:	f7fc f94f 	bl	8000fe8 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4c:	e012      	b.n	8004d74 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fc f94b 	bl	8000fe8 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d909      	bls.n	8004d74 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e115      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
 8004d64:	40023800 	.word	0x40023800
 8004d68:	42470e80 	.word	0x42470e80
 8004d6c:	080099d8 	.word	0x080099d8
 8004d70:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d74:	4b88      	ldr	r3, [pc, #544]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e6      	bne.n	8004d4e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d86:	4b84      	ldr	r3, [pc, #528]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a83      	ldr	r2, [pc, #524]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <HAL_RCC_OscConfig+0x468>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d008      	beq.n	8004db4 <HAL_RCC_OscConfig+0x468>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d004      	beq.n	8004db4 <HAL_RCC_OscConfig+0x468>
 8004daa:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004dae:	487b      	ldr	r0, [pc, #492]	; (8004f9c <HAL_RCC_OscConfig+0x650>)
 8004db0:	f7fb ff5d 	bl	8000c6e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80e8 	beq.w	8004f8e <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dbe:	4b76      	ldr	r3, [pc, #472]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	f000 80a9 	beq.w	8004f1e <HAL_RCC_OscConfig+0x5d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	f040 808d 	bne.w	8004ef0 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_OscConfig+0x4a6>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de6:	d004      	beq.n	8004df2 <HAL_RCC_OscConfig+0x4a6>
 8004de8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004dec:	486b      	ldr	r0, [pc, #428]	; (8004f9c <HAL_RCC_OscConfig+0x650>)
 8004dee:	f7fb ff3e 	bl	8000c6e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d903      	bls.n	8004e02 <HAL_RCC_OscConfig+0x4b6>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	2b3f      	cmp	r3, #63	; 0x3f
 8004e00:	d904      	bls.n	8004e0c <HAL_RCC_OscConfig+0x4c0>
 8004e02:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004e06:	4865      	ldr	r0, [pc, #404]	; (8004f9c <HAL_RCC_OscConfig+0x650>)
 8004e08:	f7fb ff31 	bl	8000c6e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b31      	cmp	r3, #49	; 0x31
 8004e12:	d904      	bls.n	8004e1e <HAL_RCC_OscConfig+0x4d2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004e1c:	d904      	bls.n	8004e28 <HAL_RCC_OscConfig+0x4dc>
 8004e1e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004e22:	485e      	ldr	r0, [pc, #376]	; (8004f9c <HAL_RCC_OscConfig+0x650>)
 8004e24:	f7fb ff23 	bl	8000c6e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d010      	beq.n	8004e52 <HAL_RCC_OscConfig+0x506>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d00c      	beq.n	8004e52 <HAL_RCC_OscConfig+0x506>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d008      	beq.n	8004e52 <HAL_RCC_OscConfig+0x506>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d004      	beq.n	8004e52 <HAL_RCC_OscConfig+0x506>
 8004e48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e4c:	4853      	ldr	r0, [pc, #332]	; (8004f9c <HAL_RCC_OscConfig+0x650>)
 8004e4e:	f7fb ff0e 	bl	8000c6e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d903      	bls.n	8004e62 <HAL_RCC_OscConfig+0x516>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	d904      	bls.n	8004e6c <HAL_RCC_OscConfig+0x520>
 8004e62:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004e66:	484d      	ldr	r0, [pc, #308]	; (8004f9c <HAL_RCC_OscConfig+0x650>)
 8004e68:	f7fb ff01 	bl	8000c6e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6c:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCC_OscConfig+0x654>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fc f8b9 	bl	8000fe8 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fc f8b5 	bl	8000fe8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e081      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8c:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	061b      	lsls	r3, r3, #24
 8004ebc:	4936      	ldr	r1, [pc, #216]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec2:	4b37      	ldr	r3, [pc, #220]	; (8004fa0 <HAL_RCC_OscConfig+0x654>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fc f88e 	bl	8000fe8 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fc f88a 	bl	8000fe8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e056      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x584>
 8004eee:	e04e      	b.n	8004f8e <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	; (8004fa0 <HAL_RCC_OscConfig+0x654>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef6:	f7fc f877 	bl	8000fe8 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efe:	f7fc f873 	bl	8000fe8 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e03f      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f10:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f0      	bne.n	8004efe <HAL_RCC_OscConfig+0x5b2>
 8004f1c:	e037      	b.n	8004f8e <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e032      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f2a:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <HAL_RCC_OscConfig+0x64c>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d028      	beq.n	8004f8a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d121      	bne.n	8004f8a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d11a      	bne.n	8004f8a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d111      	bne.n	8004f8a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	3b01      	subs	r3, #1
 8004f74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x642>
#endif
        {
          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	080099d8 	.word	0x080099d8
 8004fa0:	42470060 	.word	0x42470060

08004fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e174      	b.n	80052a2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x24>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b0f      	cmp	r3, #15
 8004fc6:	d904      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x2e>
 8004fc8:	f240 215a 	movw	r1, #602	; 0x25a
 8004fcc:	487b      	ldr	r0, [pc, #492]	; (80051bc <HAL_RCC_ClockConfig+0x218>)
 8004fce:	f7fb fe4e 	bl	8000c6e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d019      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d016      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d013      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d010      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d00d      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d00a      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b06      	cmp	r3, #6
 8004ffa:	d007      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b07      	cmp	r3, #7
 8005000:	d004      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
 8005002:	f240 215b 	movw	r1, #603	; 0x25b
 8005006:	486d      	ldr	r0, [pc, #436]	; (80051bc <HAL_RCC_ClockConfig+0x218>)
 8005008:	f7fb fe31 	bl	8000c6e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800500c:	4b6c      	ldr	r3, [pc, #432]	; (80051c0 <HAL_RCC_ClockConfig+0x21c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d90c      	bls.n	8005034 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b69      	ldr	r3, [pc, #420]	; (80051c0 <HAL_RCC_ClockConfig+0x21c>)
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b67      	ldr	r3, [pc, #412]	; (80051c0 <HAL_RCC_ClockConfig+0x21c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e136      	b.n	80052a2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d049      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800504c:	4b5d      	ldr	r3, [pc, #372]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4a5c      	ldr	r2, [pc, #368]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 8005052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005064:	4b57      	ldr	r3, [pc, #348]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4a56      	ldr	r2, [pc, #344]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 800506a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d024      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b80      	cmp	r3, #128	; 0x80
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b90      	cmp	r3, #144	; 0x90
 8005086:	d01c      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2ba0      	cmp	r3, #160	; 0xa0
 800508e:	d018      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2bb0      	cmp	r3, #176	; 0xb0
 8005096:	d014      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2bc0      	cmp	r3, #192	; 0xc0
 800509e:	d010      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2bd0      	cmp	r3, #208	; 0xd0
 80050a6:	d00c      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2be0      	cmp	r3, #224	; 0xe0
 80050ae:	d008      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2bf0      	cmp	r3, #240	; 0xf0
 80050b6:	d004      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x11e>
 80050b8:	f240 217e 	movw	r1, #638	; 0x27e
 80050bc:	483f      	ldr	r0, [pc, #252]	; (80051bc <HAL_RCC_ClockConfig+0x218>)
 80050be:	f7fb fdd6 	bl	8000c6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c2:	4b40      	ldr	r3, [pc, #256]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	493d      	ldr	r1, [pc, #244]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d059      	beq.n	8005194 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d010      	beq.n	800510a <HAL_RCC_ClockConfig+0x166>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d00c      	beq.n	800510a <HAL_RCC_ClockConfig+0x166>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d008      	beq.n	800510a <HAL_RCC_ClockConfig+0x166>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d004      	beq.n	800510a <HAL_RCC_ClockConfig+0x166>
 8005100:	f240 2185 	movw	r1, #645	; 0x285
 8005104:	482d      	ldr	r0, [pc, #180]	; (80051bc <HAL_RCC_ClockConfig+0x218>)
 8005106:	f7fb fdb2 	bl	8000c6e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d119      	bne.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e0bf      	b.n	80052a2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d003      	beq.n	8005132 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512e:	2b03      	cmp	r3, #3
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0af      	b.n	80052a2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0a7      	b.n	80052a2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005152:	4b1c      	ldr	r3, [pc, #112]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f023 0203 	bic.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4919      	ldr	r1, [pc, #100]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 8005160:	4313      	orrs	r3, r2
 8005162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005164:	f7fb ff40 	bl	8000fe8 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	e00a      	b.n	8005182 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516c:	f7fb ff3c 	bl	8000fe8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e08f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCC_ClockConfig+0x220>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 020c 	and.w	r2, r3, #12
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	429a      	cmp	r2, r3
 8005192:	d1eb      	bne.n	800516c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_RCC_ClockConfig+0x21c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d212      	bcs.n	80051c8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <HAL_RCC_ClockConfig+0x21c>)
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <HAL_RCC_ClockConfig+0x21c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d007      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e072      	b.n	80052a2 <HAL_RCC_ClockConfig+0x2fe>
 80051bc:	080099d8 	.word	0x080099d8
 80051c0:	40023c00 	.word	0x40023c00
 80051c4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d025      	beq.n	8005220 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d018      	beq.n	800520e <HAL_RCC_ClockConfig+0x26a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d013      	beq.n	800520e <HAL_RCC_ClockConfig+0x26a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051ee:	d00e      	beq.n	800520e <HAL_RCC_ClockConfig+0x26a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80051f8:	d009      	beq.n	800520e <HAL_RCC_ClockConfig+0x26a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005202:	d004      	beq.n	800520e <HAL_RCC_ClockConfig+0x26a>
 8005204:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005208:	4828      	ldr	r0, [pc, #160]	; (80052ac <HAL_RCC_ClockConfig+0x308>)
 800520a:	f7fb fd30 	bl	8000c6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800520e:	4b28      	ldr	r3, [pc, #160]	; (80052b0 <HAL_RCC_ClockConfig+0x30c>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	4925      	ldr	r1, [pc, #148]	; (80052b0 <HAL_RCC_ClockConfig+0x30c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d026      	beq.n	800527a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d018      	beq.n	8005266 <HAL_RCC_ClockConfig+0x2c2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523c:	d013      	beq.n	8005266 <HAL_RCC_ClockConfig+0x2c2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005246:	d00e      	beq.n	8005266 <HAL_RCC_ClockConfig+0x2c2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005250:	d009      	beq.n	8005266 <HAL_RCC_ClockConfig+0x2c2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800525a:	d004      	beq.n	8005266 <HAL_RCC_ClockConfig+0x2c2>
 800525c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005260:	4812      	ldr	r0, [pc, #72]	; (80052ac <HAL_RCC_ClockConfig+0x308>)
 8005262:	f7fb fd04 	bl	8000c6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <HAL_RCC_ClockConfig+0x30c>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	; (80052b0 <HAL_RCC_ClockConfig+0x30c>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_ClockConfig+0x30c>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	; (80052b4 <HAL_RCC_ClockConfig+0x310>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <HAL_RCC_ClockConfig+0x314>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_ClockConfig+0x318>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fb fe60 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	080099d8 	.word	0x080099d8
 80052b0:	40023800 	.word	0x40023800
 80052b4:	08009a88 	.word	0x08009a88
 80052b8:	20000000 	.word	0x20000000
 80052bc:	20000004 	.word	0x20000004

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c4:	b094      	sub	sp, #80	; 0x50
 80052c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	647b      	str	r3, [r7, #68]	; 0x44
 80052cc:	2300      	movs	r3, #0
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d0:	2300      	movs	r3, #0
 80052d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d8:	4b79      	ldr	r3, [pc, #484]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d00d      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x40>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	f200 80e1 	bhi.w	80054ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x34>
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0x3a>
 80052f2:	e0db      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b73      	ldr	r3, [pc, #460]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052f8:	e0db      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052fa:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80052fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052fe:	e0d8      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005300:	4b6f      	ldr	r3, [pc, #444]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005308:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800530a:	4b6d      	ldr	r3, [pc, #436]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d063      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005316:	4b6a      	ldr	r3, [pc, #424]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	099b      	lsrs	r3, r3, #6
 800531c:	2200      	movs	r2, #0
 800531e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005320:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005328:	633b      	str	r3, [r7, #48]	; 0x30
 800532a:	2300      	movs	r3, #0
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	f04f 0000 	mov.w	r0, #0
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	0159      	lsls	r1, r3, #5
 8005340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005344:	0150      	lsls	r0, r2, #5
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4621      	mov	r1, r4
 800534c:	1a51      	subs	r1, r2, r1
 800534e:	6139      	str	r1, [r7, #16]
 8005350:	4629      	mov	r1, r5
 8005352:	eb63 0301 	sbc.w	r3, r3, r1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005364:	4659      	mov	r1, fp
 8005366:	018b      	lsls	r3, r1, #6
 8005368:	4651      	mov	r1, sl
 800536a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800536e:	4651      	mov	r1, sl
 8005370:	018a      	lsls	r2, r1, #6
 8005372:	4651      	mov	r1, sl
 8005374:	ebb2 0801 	subs.w	r8, r2, r1
 8005378:	4659      	mov	r1, fp
 800537a:	eb63 0901 	sbc.w	r9, r3, r1
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800538e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005392:	4690      	mov	r8, r2
 8005394:	4699      	mov	r9, r3
 8005396:	4623      	mov	r3, r4
 8005398:	eb18 0303 	adds.w	r3, r8, r3
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	462b      	mov	r3, r5
 80053a0:	eb49 0303 	adc.w	r3, r9, r3
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053b2:	4629      	mov	r1, r5
 80053b4:	024b      	lsls	r3, r1, #9
 80053b6:	4621      	mov	r1, r4
 80053b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053bc:	4621      	mov	r1, r4
 80053be:	024a      	lsls	r2, r1, #9
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c6:	2200      	movs	r2, #0
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053d0:	f7fa ff02 	bl	80001d8 <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4613      	mov	r3, r2
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053dc:	e058      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053de:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	2200      	movs	r2, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	4611      	mov	r1, r2
 80053ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	2300      	movs	r3, #0
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
 80053f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	f04f 0000 	mov.w	r0, #0
 8005400:	f04f 0100 	mov.w	r1, #0
 8005404:	0159      	lsls	r1, r3, #5
 8005406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800540a:	0150      	lsls	r0, r2, #5
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4641      	mov	r1, r8
 8005412:	ebb2 0a01 	subs.w	sl, r2, r1
 8005416:	4649      	mov	r1, r9
 8005418:	eb63 0b01 	sbc.w	fp, r3, r1
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800542c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005430:	ebb2 040a 	subs.w	r4, r2, sl
 8005434:	eb63 050b 	sbc.w	r5, r3, fp
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	00eb      	lsls	r3, r5, #3
 8005442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005446:	00e2      	lsls	r2, r4, #3
 8005448:	4614      	mov	r4, r2
 800544a:	461d      	mov	r5, r3
 800544c:	4643      	mov	r3, r8
 800544e:	18e3      	adds	r3, r4, r3
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	464b      	mov	r3, r9
 8005454:	eb45 0303 	adc.w	r3, r5, r3
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005466:	4629      	mov	r1, r5
 8005468:	028b      	lsls	r3, r1, #10
 800546a:	4621      	mov	r1, r4
 800546c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005470:	4621      	mov	r1, r4
 8005472:	028a      	lsls	r2, r1, #10
 8005474:	4610      	mov	r0, r2
 8005476:	4619      	mov	r1, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800547a:	2200      	movs	r2, #0
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	61fa      	str	r2, [r7, #28]
 8005480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005484:	f7fa fea8 	bl	80001d8 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4613      	mov	r3, r2
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	3301      	adds	r3, #1
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054aa:	e002      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3750      	adds	r7, #80	; 0x50
 80054b8:	46bd      	mov	sp, r7
 80054ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800
 80054c4:	00f42400 	.word	0x00f42400
 80054c8:	007a1200 	.word	0x007a1200

080054cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000000 	.word	0x20000000

080054e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054e8:	f7ff fff0 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	0a9b      	lsrs	r3, r3, #10
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	4903      	ldr	r1, [pc, #12]	; (8005508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054fa:	5ccb      	ldrb	r3, [r1, r3]
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40023800 	.word	0x40023800
 8005508:	08009a98 	.word	0x08009a98

0800550c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d904      	bls.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800552c:	f640 11eb 	movw	r1, #2539	; 0x9eb
 8005530:	4834      	ldr	r0, [pc, #208]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005532:	f7fb fb9c 	bl	8000c6e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d105      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800554a:	2b00      	cmp	r3, #0
 800554c:	d066      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d903      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b07      	cmp	r3, #7
 800555c:	d904      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800555e:	f640 11f2 	movw	r1, #2546	; 0x9f2
 8005562:	4828      	ldr	r0, [pc, #160]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005564:	f7fb fb83 	bl	8000c6e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b31      	cmp	r3, #49	; 0x31
 800556e:	d904      	bls.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005578:	d904      	bls.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800557a:	f640 11f3 	movw	r1, #2547	; 0x9f3
 800557e:	4821      	ldr	r0, [pc, #132]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005580:	f7fb fb75 	bl	8000c6e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d903      	bls.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b3f      	cmp	r3, #63	; 0x3f
 8005592:	d904      	bls.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8005594:	f640 11f5 	movw	r1, #2549	; 0x9f5
 8005598:	481a      	ldr	r0, [pc, #104]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800559a:	f7fb fb68 	bl	8000c6e <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055a4:	f7fb fd20 	bl	8000fe8 <HAL_GetTick>
 80055a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055ac:	f7fb fd1c 	bl	8000fe8 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e1b3      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	019b      	lsls	r3, r3, #6
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	071b      	lsls	r3, r3, #28
 80055dc:	490b      	ldr	r1, [pc, #44]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055ea:	f7fb fcfd 	bl	8000fe8 <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055f0:	e00e      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055f2:	f7fb fcf9 	bl	8000fe8 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d907      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e190      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005604:	08009a10 	.word	0x08009a10
 8005608:	42470068 	.word	0x42470068
 800560c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005610:	4b88      	ldr	r3, [pc, #544]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ea      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8173 	beq.w	8005910 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005632:	f000 80a6 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563e:	f000 80a0 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	4a7c      	ldr	r2, [pc, #496]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	f000 809a 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	4a7a      	ldr	r2, [pc, #488]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005654:	4293      	cmp	r3, r2
 8005656:	f000 8094 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4a78      	ldr	r2, [pc, #480]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005660:	4293      	cmp	r3, r2
 8005662:	f000 808e 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	4a76      	ldr	r2, [pc, #472]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800566c:	4293      	cmp	r3, r2
 800566e:	f000 8088 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	4a74      	ldr	r2, [pc, #464]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	f000 8082 	beq.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	4a72      	ldr	r2, [pc, #456]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d07c      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	4a70      	ldr	r2, [pc, #448]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d077      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4a6f      	ldr	r2, [pc, #444]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d072      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	4a6d      	ldr	r2, [pc, #436]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d06d      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	4a6c      	ldr	r2, [pc, #432]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d068      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	4a6a      	ldr	r2, [pc, #424]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d063      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	4a69      	ldr	r2, [pc, #420]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d05e      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	4a67      	ldr	r2, [pc, #412]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d059      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4a66      	ldr	r2, [pc, #408]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d054      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	4a64      	ldr	r2, [pc, #400]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04f      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	4a63      	ldr	r2, [pc, #396]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	4a61      	ldr	r2, [pc, #388]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d045      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	4a60      	ldr	r2, [pc, #384]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d040      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	4a5e      	ldr	r2, [pc, #376]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d03b      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	4a5d      	ldr	r2, [pc, #372]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d036      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	4a5b      	ldr	r2, [pc, #364]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d031      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4a5a      	ldr	r2, [pc, #360]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d02c      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	4a58      	ldr	r2, [pc, #352]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d027      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	4a57      	ldr	r2, [pc, #348]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	4a55      	ldr	r2, [pc, #340]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	4a54      	ldr	r2, [pc, #336]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	4a52      	ldr	r2, [pc, #328]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	4a51      	ldr	r2, [pc, #324]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	4a4f      	ldr	r2, [pc, #316]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	4a4e      	ldr	r2, [pc, #312]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005778:	f640 2124 	movw	r1, #2596	; 0xa24
 800577c:	484c      	ldr	r0, [pc, #304]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800577e:	f7fb fa76 	bl	8000c6e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	4a2a      	ldr	r2, [pc, #168]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800578c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005790:	6413      	str	r3, [r2, #64]	; 0x40
 8005792:	4b28      	ldr	r3, [pc, #160]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800579e:	4b45      	ldr	r3, [pc, #276]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a44      	ldr	r2, [pc, #272]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057aa:	f7fb fc1d 	bl	8000fe8 <HAL_GetTick>
 80057ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057b2:	f7fb fc19 	bl	8000fe8 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0b0      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057c4:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d073      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d06c      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057f8:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057fe:	4b2e      	ldr	r3, [pc, #184]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005804:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d158      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005816:	f7fb fbe7 	bl	8000fe8 <HAL_GetTick>
 800581a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581c:	e04e      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581e:	f7fb fbe3 	bl	8000fe8 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f241 3288 	movw	r2, #5000	; 0x1388
 800582c:	4293      	cmp	r3, r2
 800582e:	d945      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e078      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005834:	40023800 	.word	0x40023800
 8005838:	00020300 	.word	0x00020300
 800583c:	00030300 	.word	0x00030300
 8005840:	00040300 	.word	0x00040300
 8005844:	00050300 	.word	0x00050300
 8005848:	00060300 	.word	0x00060300
 800584c:	00070300 	.word	0x00070300
 8005850:	00080300 	.word	0x00080300
 8005854:	00090300 	.word	0x00090300
 8005858:	000a0300 	.word	0x000a0300
 800585c:	000b0300 	.word	0x000b0300
 8005860:	000c0300 	.word	0x000c0300
 8005864:	000d0300 	.word	0x000d0300
 8005868:	000e0300 	.word	0x000e0300
 800586c:	000f0300 	.word	0x000f0300
 8005870:	00100300 	.word	0x00100300
 8005874:	00110300 	.word	0x00110300
 8005878:	00120300 	.word	0x00120300
 800587c:	00130300 	.word	0x00130300
 8005880:	00140300 	.word	0x00140300
 8005884:	00150300 	.word	0x00150300
 8005888:	00160300 	.word	0x00160300
 800588c:	00170300 	.word	0x00170300
 8005890:	00180300 	.word	0x00180300
 8005894:	00190300 	.word	0x00190300
 8005898:	001a0300 	.word	0x001a0300
 800589c:	001b0300 	.word	0x001b0300
 80058a0:	001c0300 	.word	0x001c0300
 80058a4:	001d0300 	.word	0x001d0300
 80058a8:	001e0300 	.word	0x001e0300
 80058ac:	001f0300 	.word	0x001f0300
 80058b0:	08009a10 	.word	0x08009a10
 80058b4:	40007000 	.word	0x40007000
 80058b8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058bc:	4b1c      	ldr	r3, [pc, #112]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0aa      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d4:	d10d      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80058d6:	4b16      	ldr	r3, [pc, #88]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ea:	4911      	ldr	r1, [pc, #68]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]
 80058f0:	e005      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80058f2:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80058f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80058fc:	6093      	str	r3, [r2, #8]
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005900:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590a:	4909      	ldr	r1, [pc, #36]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800590c:	4313      	orrs	r3, r2
 800590e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	7d1a      	ldrb	r2, [r3, #20]
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005922:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800
 8005934:	424711e0 	.word	0x424711e0

08005938 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d141      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005956:	4b25      	ldr	r3, [pc, #148]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800596c:	d131      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800596e:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005970:	617b      	str	r3, [r7, #20]
          break;
 8005972:	e031      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005974:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005982:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800598c:	4a19      	ldr	r2, [pc, #100]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e008      	b.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059a0:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80059a8:	4b10      	ldr	r3, [pc, #64]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80059be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c2:	0f1b      	lsrs	r3, r3, #28
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ce:	617b      	str	r3, [r7, #20]
          break;
 80059d0:	e002      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
          break;
 80059d6:	bf00      	nop
        }
      }
      break;
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 80059da:	bf00      	nop
    }
  }
  return frequency;
 80059dc:	697b      	ldr	r3, [r7, #20]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40023800 	.word	0x40023800
 80059f0:	00bb8000 	.word	0x00bb8000
 80059f4:	007a1200 	.word	0x007a1200
 80059f8:	00f42400 	.word	0x00f42400

080059fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e18c      	b.n	8005d28 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a75      	ldr	r2, [pc, #468]	; (8005be8 <HAL_SPI_Init+0x1ec>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <HAL_SPI_Init+0x4e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a73      	ldr	r2, [pc, #460]	; (8005bec <HAL_SPI_Init+0x1f0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_SPI_Init+0x4e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a72      	ldr	r2, [pc, #456]	; (8005bf0 <HAL_SPI_Init+0x1f4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_SPI_Init+0x4e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a70      	ldr	r2, [pc, #448]	; (8005bf4 <HAL_SPI_Init+0x1f8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_SPI_Init+0x4e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a6f      	ldr	r2, [pc, #444]	; (8005bf8 <HAL_SPI_Init+0x1fc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_SPI_Init+0x4e>
 8005a40:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a44:	486d      	ldr	r0, [pc, #436]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005a46:	f7fb f912 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_SPI_Init+0x6a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5a:	d004      	beq.n	8005a66 <HAL_SPI_Init+0x6a>
 8005a5c:	f240 1141 	movw	r1, #321	; 0x141
 8005a60:	4866      	ldr	r0, [pc, #408]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005a62:	f7fb f904 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <HAL_SPI_Init+0x90>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a76:	d009      	beq.n	8005a8c <HAL_SPI_Init+0x90>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a80:	d004      	beq.n	8005a8c <HAL_SPI_Init+0x90>
 8005a82:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005a86:	485d      	ldr	r0, [pc, #372]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005a88:	f7fb f8f1 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a94:	d008      	beq.n	8005aa8 <HAL_SPI_Init+0xac>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <HAL_SPI_Init+0xac>
 8005a9e:	f240 1143 	movw	r1, #323	; 0x143
 8005aa2:	4856      	ldr	r0, [pc, #344]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005aa4:	f7fb f8e3 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab0:	d00d      	beq.n	8005ace <HAL_SPI_Init+0xd2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_SPI_Init+0xd2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ac2:	d004      	beq.n	8005ace <HAL_SPI_Init+0xd2>
 8005ac4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005ac8:	484c      	ldr	r0, [pc, #304]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005aca:	f7fb f8d0 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d020      	beq.n	8005b18 <HAL_SPI_Init+0x11c>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d01c      	beq.n	8005b18 <HAL_SPI_Init+0x11c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d018      	beq.n	8005b18 <HAL_SPI_Init+0x11c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	2b18      	cmp	r3, #24
 8005aec:	d014      	beq.n	8005b18 <HAL_SPI_Init+0x11c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d010      	beq.n	8005b18 <HAL_SPI_Init+0x11c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	2b28      	cmp	r3, #40	; 0x28
 8005afc:	d00c      	beq.n	8005b18 <HAL_SPI_Init+0x11c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	2b30      	cmp	r3, #48	; 0x30
 8005b04:	d008      	beq.n	8005b18 <HAL_SPI_Init+0x11c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	2b38      	cmp	r3, #56	; 0x38
 8005b0c:	d004      	beq.n	8005b18 <HAL_SPI_Init+0x11c>
 8005b0e:	f240 1145 	movw	r1, #325	; 0x145
 8005b12:	483a      	ldr	r0, [pc, #232]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005b14:	f7fb f8ab 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_SPI_Init+0x136>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d004      	beq.n	8005b32 <HAL_SPI_Init+0x136>
 8005b28:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005b2c:	4833      	ldr	r0, [pc, #204]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005b2e:	f7fb f89e 	bl	8000c6e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <HAL_SPI_Init+0x150>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d004      	beq.n	8005b4c <HAL_SPI_Init+0x150>
 8005b42:	f240 1147 	movw	r1, #327	; 0x147
 8005b46:	482d      	ldr	r0, [pc, #180]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005b48:	f7fb f891 	bl	8000c6e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d155      	bne.n	8005c00 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_SPI_Init+0x172>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d004      	beq.n	8005b6e <HAL_SPI_Init+0x172>
 8005b64:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005b68:	4824      	ldr	r0, [pc, #144]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005b6a:	f7fb f880 	bl	8000c6e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <HAL_SPI_Init+0x18c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d004      	beq.n	8005b88 <HAL_SPI_Init+0x18c>
 8005b7e:	f240 114b 	movw	r1, #331	; 0x14b
 8005b82:	481e      	ldr	r0, [pc, #120]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005b84:	f7fb f873 	bl	8000c6e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b90:	d125      	bne.n	8005bde <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d05d      	beq.n	8005c56 <HAL_SPI_Init+0x25a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d059      	beq.n	8005c56 <HAL_SPI_Init+0x25a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d055      	beq.n	8005c56 <HAL_SPI_Init+0x25a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	2b18      	cmp	r3, #24
 8005bb0:	d051      	beq.n	8005c56 <HAL_SPI_Init+0x25a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d04d      	beq.n	8005c56 <HAL_SPI_Init+0x25a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	2b28      	cmp	r3, #40	; 0x28
 8005bc0:	d049      	beq.n	8005c56 <HAL_SPI_Init+0x25a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b30      	cmp	r3, #48	; 0x30
 8005bc8:	d045      	beq.n	8005c56 <HAL_SPI_Init+0x25a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	2b38      	cmp	r3, #56	; 0x38
 8005bd0:	d041      	beq.n	8005c56 <HAL_SPI_Init+0x25a>
 8005bd2:	f240 114f 	movw	r1, #335	; 0x14f
 8005bd6:	4809      	ldr	r0, [pc, #36]	; (8005bfc <HAL_SPI_Init+0x200>)
 8005bd8:	f7fb f849 	bl	8000c6e <assert_failed>
 8005bdc:	e03b      	b.n	8005c56 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	61da      	str	r2, [r3, #28]
 8005be4:	e037      	b.n	8005c56 <HAL_SPI_Init+0x25a>
 8005be6:	bf00      	nop
 8005be8:	40013000 	.word	0x40013000
 8005bec:	40003800 	.word	0x40003800
 8005bf0:	40003c00 	.word	0x40003c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40015000 	.word	0x40015000
 8005bfc:	08009a4c 	.word	0x08009a4c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <HAL_SPI_Init+0x24e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d01c      	beq.n	8005c4a <HAL_SPI_Init+0x24e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d018      	beq.n	8005c4a <HAL_SPI_Init+0x24e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	2b18      	cmp	r3, #24
 8005c1e:	d014      	beq.n	8005c4a <HAL_SPI_Init+0x24e>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d010      	beq.n	8005c4a <HAL_SPI_Init+0x24e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	2b28      	cmp	r3, #40	; 0x28
 8005c2e:	d00c      	beq.n	8005c4a <HAL_SPI_Init+0x24e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d008      	beq.n	8005c4a <HAL_SPI_Init+0x24e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	2b38      	cmp	r3, #56	; 0x38
 8005c3e:	d004      	beq.n	8005c4a <HAL_SPI_Init+0x24e>
 8005c40:	f240 1159 	movw	r1, #345	; 0x159
 8005c44:	483a      	ldr	r0, [pc, #232]	; (8005d30 <HAL_SPI_Init+0x334>)
 8005c46:	f7fb f812 	bl	8000c6e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fb f83d 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	ea42 0103 	orr.w	r1, r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	0c1b      	lsrs	r3, r3, #16
 8005cf4:	f003 0104 	and.w	r1, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	f003 0210 	and.w	r2, r3, #16
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	08009a4c 	.word	0x08009a4c

08005d34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d34:	b084      	sub	sp, #16
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	f107 001c 	add.w	r0, r7, #28
 8005d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d46:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d123      	bne.n	8005d96 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d105      	bne.n	8005d8a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9dc 	bl	8006148 <USB_CoreReset>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	e01b      	b.n	8005dce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9d0 	bl	8006148 <USB_CoreReset>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8005dc0:	e005      	b.n	8005dce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dce:	7fbb      	ldrb	r3, [r7, #30]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d10b      	bne.n	8005dec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f043 0206 	orr.w	r2, r3, #6
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005df8:	b004      	add	sp, #16
 8005dfa:	4770      	bx	lr

08005dfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f043 0201 	orr.w	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f023 0201 	bic.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d115      	bne.n	8005e8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e6e:	200a      	movs	r0, #10
 8005e70:	f7fb f8c6 	bl	8001000 <HAL_Delay>
      ms += 10U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	330a      	adds	r3, #10
 8005e78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f956 	bl	800612c <USB_GetMode>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d01e      	beq.n	8005ec4 <USB_SetCurrentMode+0x84>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2bc7      	cmp	r3, #199	; 0xc7
 8005e8a:	d9f0      	bls.n	8005e6e <USB_SetCurrentMode+0x2e>
 8005e8c:	e01a      	b.n	8005ec4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d115      	bne.n	8005ec0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ea0:	200a      	movs	r0, #10
 8005ea2:	f7fb f8ad 	bl	8001000 <HAL_Delay>
      ms += 10U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	330a      	adds	r3, #10
 8005eaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f93d 	bl	800612c <USB_GetMode>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <USB_SetCurrentMode+0x84>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2bc7      	cmp	r3, #199	; 0xc7
 8005ebc:	d9f0      	bls.n	8005ea0 <USB_SetCurrentMode+0x60>
 8005ebe:	e001      	b.n	8005ec4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e005      	b.n	8005ed0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2bc8      	cmp	r3, #200	; 0xc8
 8005ec8:	d101      	bne.n	8005ece <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ef2:	d901      	bls.n	8005ef8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e01b      	b.n	8005f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	daf2      	bge.n	8005ee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	019b      	lsls	r3, r3, #6
 8005f08:	f043 0220 	orr.w	r2, r3, #32
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f1c:	d901      	bls.n	8005f22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e006      	b.n	8005f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d0f0      	beq.n	8005f10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f54:	d901      	bls.n	8005f5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e018      	b.n	8005f8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	daf2      	bge.n	8005f48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2210      	movs	r2, #16
 8005f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f78:	d901      	bls.n	8005f7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e006      	b.n	8005f8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d0f0      	beq.n	8005f6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	71fb      	strb	r3, [r7, #7]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d123      	bne.n	8006006 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fbe:	88bb      	ldrh	r3, [r7, #4]
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	e018      	b.n	8005ffe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	031a      	lsls	r2, r3, #12
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd8:	461a      	mov	r2, r3
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	429a      	cmp	r2, r3
 8006004:	d3e2      	bcc.n	8005fcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3724      	adds	r7, #36	; 0x24
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006014:	b480      	push	{r7}
 8006016:	b08b      	sub	sp, #44	; 0x2c
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	089b      	lsrs	r3, r3, #2
 800602e:	b29b      	uxth	r3, r3
 8006030:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	623b      	str	r3, [r7, #32]
 800603e:	e014      	b.n	800606a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	601a      	str	r2, [r3, #0]
    pDest++;
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	3301      	adds	r3, #1
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	3301      	adds	r3, #1
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	3301      	adds	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	3301      	adds	r3, #1
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	6a3a      	ldr	r2, [r7, #32]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	429a      	cmp	r2, r3
 8006070:	d3e6      	bcc.n	8006040 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006072:	8bfb      	ldrh	r3, [r7, #30]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01e      	beq.n	80060b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006082:	461a      	mov	r2, r3
 8006084:	f107 0310 	add.w	r3, r7, #16
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	fa22 f303 	lsr.w	r3, r2, r3
 8006098:	b2da      	uxtb	r2, r3
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	701a      	strb	r2, [r3, #0]
      i++;
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	3301      	adds	r3, #1
 80060a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	3301      	adds	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060aa:	8bfb      	ldrh	r3, [r7, #30]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060b0:	8bfb      	ldrh	r3, [r7, #30]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1ea      	bne.n	800608c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	372c      	adds	r7, #44	; 0x2c
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4013      	ands	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060dc:	68fb      	ldr	r3, [r7, #12]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	4013      	ands	r3, r2
 800611c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800611e:	68bb      	ldr	r3, [r7, #8]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	f003 0301 	and.w	r3, r3, #1
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006160:	d901      	bls.n	8006166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e01b      	b.n	800619e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	daf2      	bge.n	8006154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f043 0201 	orr.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800618a:	d901      	bls.n	8006190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e006      	b.n	800619e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b01      	cmp	r3, #1
 800619a:	d0f0      	beq.n	800617e <USB_CoreReset+0x36>

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061ac:	b084      	sub	sp, #16
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061cc:	461a      	mov	r2, r3
 80061ce:	2300      	movs	r3, #0
 80061d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d119      	bne.n	8006236 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006206:	2b01      	cmp	r3, #1
 8006208:	d10a      	bne.n	8006220 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006218:	f043 0304 	orr.w	r3, r3, #4
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e014      	b.n	800624a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800622e:	f023 0304 	bic.w	r3, r3, #4
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	e009      	b.n	800624a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006244:	f023 0304 	bic.w	r3, r3, #4
 8006248:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800624a:	2110      	movs	r1, #16
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fe43 	bl	8005ed8 <USB_FlushTxFifo>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fe6d 	bl	8005f3c <USB_FlushRxFifo>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	e015      	b.n	800629e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	461a      	mov	r2, r3
 8006280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006284:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	3301      	adds	r3, #1
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80062a2:	461a      	mov	r2, r3
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d3e3      	bcc.n	8006272 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062b6:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2280      	movs	r2, #128	; 0x80
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a0e      	ldr	r2, [pc, #56]	; (80062fc <USB_HostInit+0x150>)
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a0e      	ldr	r2, [pc, #56]	; (8006300 <USB_HostInit+0x154>)
 80062c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d105      	bne.n	80062e0 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f043 0210 	orr.w	r2, r3, #16
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	4b07      	ldr	r3, [pc, #28]	; (8006304 <USB_HostInit+0x158>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062f8:	b004      	add	sp, #16
 80062fa:	4770      	bx	lr
 80062fc:	00600080 	.word	0x00600080
 8006300:	004000e0 	.word	0x004000e0
 8006304:	a3200008 	.word	0xa3200008

08006308 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006326:	f023 0303 	bic.w	r3, r3, #3
 800632a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006340:	4313      	orrs	r3, r2
 8006342:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d107      	bne.n	800635a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006350:	461a      	mov	r2, r3
 8006352:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006356:	6053      	str	r3, [r2, #4]
 8006358:	e00c      	b.n	8006374 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d107      	bne.n	8006370 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006366:	461a      	mov	r2, r3
 8006368:	f241 7370 	movw	r3, #6000	; 0x1770
 800636c:	6053      	str	r3, [r2, #4]
 800636e:	e001      	b.n	8006374 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063a2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80063b2:	2064      	movs	r0, #100	; 0x64
 80063b4:	f7fa fe24 	bl	8001000 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80063c6:	200a      	movs	r0, #10
 80063c8:	f7fa fe1a 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <USB_DriveVbus+0x44>
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d106      	bne.n	800641a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006418:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006424:	d109      	bne.n	800643a <USB_DriveVbus+0x64>
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006438:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	0c5b      	lsrs	r3, r3, #17
 8006466:	f003 0303 	and.w	r3, r3, #3
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	b29b      	uxth	r3, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	70fb      	strb	r3, [r7, #3]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70bb      	strb	r3, [r7, #2]
 80064ae:	4613      	mov	r3, r2
 80064b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	461a      	mov	r2, r3
 80064c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80064ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d867      	bhi.n	80065a6 <USB_HC_Init+0x10e>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <USB_HC_Init+0x44>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	08006569 	.word	0x08006569
 80064e4:	080064ed 	.word	0x080064ed
 80064e8:	0800652b 	.word	0x0800652b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f8:	461a      	mov	r2, r3
 80064fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80064fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006500:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006504:	2b00      	cmp	r3, #0
 8006506:	da51      	bge.n	80065ac <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006526:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006528:	e040      	b.n	80065ac <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4413      	add	r3, r2
 8006532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006536:	461a      	mov	r2, r3
 8006538:	f240 639d 	movw	r3, #1693	; 0x69d
 800653c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800653e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006542:	2b00      	cmp	r3, #0
 8006544:	da34      	bge.n	80065b0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	78fa      	ldrb	r2, [r7, #3]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	440a      	add	r2, r1
 800655c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006564:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006566:	e023      	b.n	80065b0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	461a      	mov	r2, r3
 8006576:	f240 2325 	movw	r3, #549	; 0x225
 800657a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800657c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006580:	2b00      	cmp	r3, #0
 8006582:	da17      	bge.n	80065b4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	78fa      	ldrb	r2, [r7, #3]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	440a      	add	r2, r1
 800659a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80065a2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80065a4:	e006      	b.n	80065b4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	77fb      	strb	r3, [r7, #31]
      break;
 80065aa:	e004      	b.n	80065b6 <USB_HC_Init+0x11e>
      break;
 80065ac:	bf00      	nop
 80065ae:	e002      	b.n	80065b6 <USB_HC_Init+0x11e>
      break;
 80065b0:	bf00      	nop
 80065b2:	e000      	b.n	80065b6 <USB_HC_Init+0x11e>
      break;
 80065b4:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	461a      	mov	r2, r3
 80065c4:	2300      	movs	r3, #0
 80065c6:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	78fa      	ldrb	r2, [r7, #3]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e2:	f043 0302 	orr.w	r3, r3, #2
 80065e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ee:	699a      	ldr	r2, [r3, #24]
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	2101      	movs	r1, #1
 80065f8:	fa01 f303 	lsl.w	r3, r1, r3
 80065fc:	6939      	ldr	r1, [r7, #16]
 80065fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006602:	4313      	orrs	r3, r2
 8006604:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006612:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006616:	2b00      	cmp	r3, #0
 8006618:	da03      	bge.n	8006622 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800661a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	e001      	b.n	8006626 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff ff0e 	bl	8006448 <USB_GetHostSpeed>
 800662c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800662e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006632:	2b02      	cmp	r3, #2
 8006634:	d106      	bne.n	8006644 <USB_HC_Init+0x1ac>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d003      	beq.n	8006644 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800663c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	e001      	b.n	8006648 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006648:	787b      	ldrb	r3, [r7, #1]
 800664a:	059b      	lsls	r3, r3, #22
 800664c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006650:	78bb      	ldrb	r3, [r7, #2]
 8006652:	02db      	lsls	r3, r3, #11
 8006654:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006658:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800665a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800665e:	049b      	lsls	r3, r3, #18
 8006660:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006664:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006666:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006668:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800666c:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	431a      	orrs	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006676:	78fa      	ldrb	r2, [r7, #3]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	440a      	add	r2, r1
 800667e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006686:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006688:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800668c:	2b03      	cmp	r3, #3
 800668e:	d003      	beq.n	8006698 <USB_HC_Init+0x200>
 8006690:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d10f      	bne.n	80066b8 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	78fa      	ldrb	r2, [r7, #3]
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066b6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80066b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop

080066c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08c      	sub	sp, #48	; 0x30
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80066dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066e0:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	799b      	ldrb	r3, [r3, #6]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d158      	bne.n	800679c <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80066ea:	2301      	movs	r3, #1
 80066ec:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	78db      	ldrb	r3, [r3, #3]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	8a92      	ldrh	r2, [r2, #20]
 80066fc:	fb03 f202 	mul.w	r2, r3, r2
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	61da      	str	r2, [r3, #28]
 8006704:	e079      	b.n	80067fa <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	7c9b      	ldrb	r3, [r3, #18]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d130      	bne.n	8006770 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	2bbc      	cmp	r3, #188	; 0xbc
 8006714:	d918      	bls.n	8006748 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	8a9b      	ldrh	r3, [r3, #20]
 800671a:	461a      	mov	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d003      	beq.n	8006738 <USB_HC_StartXfer+0x74>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d103      	bne.n	8006740 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2202      	movs	r2, #2
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	e05c      	b.n	80067fa <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2201      	movs	r2, #1
 8006744:	60da      	str	r2, [r3, #12]
 8006746:	e058      	b.n	80067fa <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6a1a      	ldr	r2, [r3, #32]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d007      	beq.n	8006768 <USB_HC_StartXfer+0xa4>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d003      	beq.n	8006768 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2204      	movs	r2, #4
 8006764:	60da      	str	r2, [r3, #12]
 8006766:	e048      	b.n	80067fa <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2203      	movs	r2, #3
 800676c:	60da      	str	r2, [r3, #12]
 800676e:	e044      	b.n	80067fa <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d10d      	bne.n	8006792 <USB_HC_StartXfer+0xce>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	8a92      	ldrh	r2, [r2, #20]
 800677e:	4293      	cmp	r3, r2
 8006780:	d907      	bls.n	8006792 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	8a92      	ldrh	r2, [r2, #20]
 8006788:	fb03 f202 	mul.w	r2, r3, r2
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	61da      	str	r2, [r3, #28]
 8006790:	e033      	b.n	80067fa <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61da      	str	r2, [r3, #28]
 800679a:	e02e      	b.n	80067fa <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d018      	beq.n	80067d6 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	8a92      	ldrh	r2, [r2, #20]
 80067ac:	4413      	add	r3, r2
 80067ae:	3b01      	subs	r3, #1
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	8a92      	ldrh	r2, [r2, #20]
 80067b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067b8:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80067ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067bc:	8b7b      	ldrh	r3, [r7, #26]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d90b      	bls.n	80067da <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80067c2:	8b7b      	ldrh	r3, [r7, #26]
 80067c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	8a92      	ldrh	r2, [r2, #20]
 80067cc:	fb03 f202 	mul.w	r2, r3, r2
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	61da      	str	r2, [r3, #28]
 80067d4:	e001      	b.n	80067da <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80067d6:	2301      	movs	r3, #1
 80067d8:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	78db      	ldrb	r3, [r3, #3]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	8a92      	ldrh	r2, [r2, #20]
 80067e8:	fb03 f202 	mul.w	r2, r3, r2
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	61da      	str	r2, [r3, #28]
 80067f0:	e003      	b.n	80067fa <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6a1a      	ldr	r2, [r3, #32]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006802:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006804:	04d9      	lsls	r1, r3, #19
 8006806:	4ba4      	ldr	r3, [pc, #656]	; (8006a98 <USB_HC_StartXfer+0x3d4>)
 8006808:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800680a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	7d9b      	ldrb	r3, [r3, #22]
 8006810:	075b      	lsls	r3, r3, #29
 8006812:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006816:	69f9      	ldr	r1, [r7, #28]
 8006818:	0148      	lsls	r0, r1, #5
 800681a:	6a39      	ldr	r1, [r7, #32]
 800681c:	4401      	add	r1, r0
 800681e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006822:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006824:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6999      	ldr	r1, [r3, #24]
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	460a      	mov	r2, r1
 800683e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf0c      	ite	eq
 8006850:	2301      	moveq	r3, #1
 8006852:	2300      	movne	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	6a3a      	ldr	r2, [r7, #32]
 800686c:	440a      	add	r2, r1
 800686e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006872:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006876:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	7e7b      	ldrb	r3, [r7, #25]
 8006888:	075b      	lsls	r3, r3, #29
 800688a:	69f9      	ldr	r1, [r7, #28]
 800688c:	0148      	lsls	r0, r1, #5
 800688e:	6a39      	ldr	r1, [r7, #32]
 8006890:	4401      	add	r1, r0
 8006892:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006896:	4313      	orrs	r3, r2
 8006898:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	799b      	ldrb	r3, [r3, #6]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	f040 80c4 	bne.w	8006a2c <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	7c5b      	ldrb	r3, [r3, #17]
 80068a8:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80068ae:	4313      	orrs	r3, r2
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	0151      	lsls	r1, r2, #5
 80068b4:	6a3a      	ldr	r2, [r7, #32]
 80068b6:	440a      	add	r2, r1
 80068b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80068bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80068c0:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	6a3a      	ldr	r2, [r7, #32]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	79db      	ldrb	r3, [r3, #7]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d123      	bne.n	8006932 <USB_HC_StartXfer+0x26e>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11f      	bne.n	8006932 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	6a3a      	ldr	r2, [r7, #32]
 8006906:	440a      	add	r2, r1
 8006908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800690c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006910:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	6a3a      	ldr	r2, [r7, #32]
 8006926:	440a      	add	r2, r1
 8006928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800692c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006930:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	7c9b      	ldrb	r3, [r3, #18]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d003      	beq.n	8006942 <USB_HC_StartXfer+0x27e>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7c9b      	ldrb	r3, [r3, #18]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d117      	bne.n	8006972 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006946:	2b01      	cmp	r3, #1
 8006948:	d113      	bne.n	8006972 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	78db      	ldrb	r3, [r3, #3]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10f      	bne.n	8006972 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006970:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7c9b      	ldrb	r3, [r3, #18]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d163      	bne.n	8006a42 <USB_HC_StartXfer+0x37e>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	78db      	ldrb	r3, [r3, #3]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d15f      	bne.n	8006a42 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	3b01      	subs	r3, #1
 8006988:	2b03      	cmp	r3, #3
 800698a:	d859      	bhi.n	8006a40 <USB_HC_StartXfer+0x37c>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <USB_HC_StartXfer+0x2d0>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069c7 	.word	0x080069c7
 800699c:	080069e9 	.word	0x080069e9
 80069a0:	08006a0b 	.word	0x08006a0b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	6a3a      	ldr	r2, [r7, #32]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c2:	6053      	str	r3, [r2, #4]
          break;
 80069c4:	e03d      	b.n	8006a42 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e0:	f043 030e 	orr.w	r3, r3, #14
 80069e4:	6053      	str	r3, [r2, #4]
          break;
 80069e6:	e02c      	b.n	8006a42 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	6a3a      	ldr	r2, [r7, #32]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a06:	6053      	str	r3, [r2, #4]
          break;
 8006a08:	e01b      	b.n	8006a42 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	6a3a      	ldr	r2, [r7, #32]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a28:	6053      	str	r3, [r2, #4]
          break;
 8006a2a:	e00a      	b.n	8006a42 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6053      	str	r3, [r2, #4]
 8006a3e:	e000      	b.n	8006a42 <USB_HC_StartXfer+0x37e>
          break;
 8006a40:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a58:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	78db      	ldrb	r3, [r3, #3]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	e003      	b.n	8006a74 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a72:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a7a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a88:	461a      	mov	r2, r3
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	e055      	b.n	8006b44 <USB_HC_StartXfer+0x480>
 8006a98:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	78db      	ldrb	r3, [r3, #3]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d14e      	bne.n	8006b42 <USB_HC_StartXfer+0x47e>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d04a      	beq.n	8006b42 <USB_HC_StartXfer+0x47e>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	79db      	ldrb	r3, [r3, #7]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d146      	bne.n	8006b42 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	7c9b      	ldrb	r3, [r3, #18]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d831      	bhi.n	8006b20 <USB_HC_StartXfer+0x45c>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <USB_HC_StartXfer+0x400>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006af9 	.word	0x08006af9
 8006acc:	08006ad5 	.word	0x08006ad5
 8006ad0:	08006af9 	.word	0x08006af9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	3303      	adds	r3, #3
 8006ada:	089b      	lsrs	r3, r3, #2
 8006adc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006ade:	8afa      	ldrh	r2, [r7, #22]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d91c      	bls.n	8006b24 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f043 0220 	orr.w	r2, r3, #32
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006af6:	e015      	b.n	8006b24 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	3303      	adds	r3, #3
 8006afe:	089b      	lsrs	r3, r3, #2
 8006b00:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006b02:	8afa      	ldrh	r2, [r7, #22]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d90a      	bls.n	8006b28 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b1e:	e003      	b.n	8006b28 <USB_HC_StartXfer+0x464>

      default:
        break;
 8006b20:	bf00      	nop
 8006b22:	e002      	b.n	8006b2a <USB_HC_StartXfer+0x466>
        break;
 8006b24:	bf00      	nop
 8006b26:	e000      	b.n	8006b2a <USB_HC_StartXfer+0x466>
        break;
 8006b28:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6999      	ldr	r1, [r3, #24]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	785a      	ldrb	r2, [r3, #1]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2000      	movs	r0, #0
 8006b3a:	9000      	str	r0, [sp, #0]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff fa2b 	bl	8005f98 <USB_WritePacket>
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3728      	adds	r7, #40	; 0x28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	b29b      	uxth	r3, r3
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b089      	sub	sp, #36	; 0x24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	0c9b      	lsrs	r3, r3, #18
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	0fdb      	lsrs	r3, r3, #31
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	0fdb      	lsrs	r3, r3, #31
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d10d      	bne.n	8006bf0 <USB_HC_Halt+0x82>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <USB_HC_Halt+0x82>
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d002      	beq.n	8006bec <USB_HC_Halt+0x7e>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d101      	bne.n	8006bf0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	e0d8      	b.n	8006da2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <USB_HC_Halt+0x8e>
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d173      	bne.n	8006ce4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c1a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d14a      	bne.n	8006cbe <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d133      	bne.n	8006c9c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c52:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c72:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c80:	d82e      	bhi.n	8006ce0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c98:	d0ec      	beq.n	8006c74 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c9a:	e081      	b.n	8006da0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cba:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cbc:	e070      	b.n	8006da0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cdc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cde:	e05f      	b.n	8006da0 <USB_HC_Halt+0x232>
            break;
 8006ce0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ce2:	e05d      	b.n	8006da0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d02:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d133      	bne.n	8006d7c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d52:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d60:	d81d      	bhi.n	8006d9e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d78:	d0ec      	beq.n	8006d54 <USB_HC_Halt+0x1e6>
 8006d7a:	e011      	b.n	8006da0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	0151      	lsls	r1, r2, #5
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	440a      	add	r2, r1
 8006d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	e000      	b.n	8006da0 <USB_HC_Halt+0x232>
          break;
 8006d9e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3724      	adds	r7, #36	; 0x24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b088      	sub	sp, #32
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff f82b 	bl	8005e1e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dc8:	2110      	movs	r1, #16
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff f884 	bl	8005ed8 <USB_FlushTxFifo>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff f8ae 	bl	8005f3c <USB_FlushRxFifo>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	e01f      	b.n	8006e30 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e06:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e0e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e16:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e24:	461a      	mov	r2, r3
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	61bb      	str	r3, [r7, #24]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d9dc      	bls.n	8006df0 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	e034      	b.n	8006ea6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e52:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e5a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e62:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e70:	461a      	mov	r2, r3
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e82:	d80c      	bhi.n	8006e9e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9a:	d0ec      	beq.n	8006e76 <USB_StopHost+0xc8>
 8006e9c:	e000      	b.n	8006ea0 <USB_StopHost+0xf2>
        break;
 8006e9e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b0f      	cmp	r3, #15
 8006eaa:	d9c7      	bls.n	8006e3c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eb8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ec0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fe ff9a 	bl	8005dfc <USB_EnableGlobalInt>

  return ret;
 8006ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ed2:	b590      	push	{r4, r7, lr}
 8006ed4:	b089      	sub	sp, #36	; 0x24
 8006ed6:	af04      	add	r7, sp, #16
 8006ed8:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006eda:	2301      	movs	r3, #1
 8006edc:	2202      	movs	r2, #2
 8006ede:	2102      	movs	r1, #2
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fc86 	bl	80077f2 <USBH_FindInterface>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	2bff      	cmp	r3, #255	; 0xff
 8006eee:	d002      	beq.n	8006ef6 <USBH_CDC_InterfaceInit+0x24>
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d901      	bls.n	8006efa <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e13d      	b.n	8007176 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fc5b 	bl	80077ba <USBH_SelectInterface>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e131      	b.n	8007176 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006f18:	2050      	movs	r0, #80	; 0x50
 8006f1a:	f002 fb75 	bl	8009608 <malloc>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006f32:	2302      	movs	r3, #2
 8006f34:	e11f      	b.n	8007176 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006f36:	2250      	movs	r2, #80	; 0x50
 8006f38:	2100      	movs	r1, #0
 8006f3a:	68b8      	ldr	r0, [r7, #8]
 8006f3c:	f002 fc20 	bl	8009780 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	211a      	movs	r1, #26
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	b25b      	sxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	da15      	bge.n	8006f84 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	211a      	movs	r1, #26
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	4413      	add	r3, r2
 8006f64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	211a      	movs	r1, #26
 8006f74:	fb01 f303 	mul.w	r3, r1, r3
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f7e:	881a      	ldrh	r2, [r3, #0]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 ffcf 	bl	8008f2e <USBH_AllocPipe>
 8006f90:	4603      	mov	r3, r0
 8006f92:	461a      	mov	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	7819      	ldrb	r1, [r3, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	7858      	ldrb	r0, [r3, #1]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	8952      	ldrh	r2, [r2, #10]
 8006fb0:	9202      	str	r2, [sp, #8]
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	9201      	str	r2, [sp, #4]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	4623      	mov	r3, r4
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 ff87 	bl	8008ed0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f002 fa96 	bl	80094fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	210a      	movs	r1, #10
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fc0b 	bl	80077f2 <USBH_FindInterface>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2bff      	cmp	r3, #255	; 0xff
 8006fe4:	d002      	beq.n	8006fec <USBH_CDC_InterfaceInit+0x11a>
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d901      	bls.n	8006ff0 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fec:	2302      	movs	r3, #2
 8006fee:	e0c2      	b.n	8007176 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	211a      	movs	r1, #26
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b25b      	sxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	da16      	bge.n	8007036 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	211a      	movs	r1, #26
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	4413      	add	r3, r2
 8007014:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	211a      	movs	r1, #26
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800702e:	881a      	ldrh	r2, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	835a      	strh	r2, [r3, #26]
 8007034:	e015      	b.n	8007062 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	211a      	movs	r1, #26
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	211a      	movs	r1, #26
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	4413      	add	r3, r2
 8007058:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	211a      	movs	r1, #26
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	4413      	add	r3, r2
 800706e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	b25b      	sxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	da16      	bge.n	80070a8 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	211a      	movs	r1, #26
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	4413      	add	r3, r2
 8007086:	f203 3356 	addw	r3, r3, #854	; 0x356
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	211a      	movs	r1, #26
 8007096:	fb01 f303 	mul.w	r3, r1, r3
 800709a:	4413      	add	r3, r2
 800709c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070a0:	881a      	ldrh	r2, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	835a      	strh	r2, [r3, #26]
 80070a6:	e015      	b.n	80070d4 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	211a      	movs	r1, #26
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	4413      	add	r3, r2
 80070b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	211a      	movs	r1, #26
 80070c4:	fb01 f303 	mul.w	r3, r1, r3
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070ce:	881a      	ldrh	r2, [r3, #0]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	7b9b      	ldrb	r3, [r3, #14]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 ff27 	bl	8008f2e <USBH_AllocPipe>
 80070e0:	4603      	mov	r3, r0
 80070e2:	461a      	mov	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	7bdb      	ldrb	r3, [r3, #15]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 ff1d 	bl	8008f2e <USBH_AllocPipe>
 80070f4:	4603      	mov	r3, r0
 80070f6:	461a      	mov	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	7b59      	ldrb	r1, [r3, #13]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	7b98      	ldrb	r0, [r3, #14]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	8b12      	ldrh	r2, [r2, #24]
 8007114:	9202      	str	r2, [sp, #8]
 8007116:	2202      	movs	r2, #2
 8007118:	9201      	str	r2, [sp, #4]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4623      	mov	r3, r4
 800711e:	4602      	mov	r2, r0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fed5 	bl	8008ed0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	7b19      	ldrb	r1, [r3, #12]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	7bd8      	ldrb	r0, [r3, #15]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	8b52      	ldrh	r2, [r2, #26]
 800713e:	9202      	str	r2, [sp, #8]
 8007140:	2202      	movs	r2, #2
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	4623      	mov	r3, r4
 8007148:	4602      	mov	r2, r0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 fec0 	bl	8008ed0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	7b5b      	ldrb	r3, [r3, #13]
 800715c:	2200      	movs	r2, #0
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f002 f9cb 	bl	80094fc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	7b1b      	ldrb	r3, [r3, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f002 f9c4 	bl	80094fc <USBH_LL_SetToggle>

  return USBH_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	bd90      	pop	{r4, r7, pc}

0800717e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00e      	beq.n	80071b6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 feb5 	bl	8008f0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fee0 	bl	8008f70 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	7b1b      	ldrb	r3, [r3, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00e      	beq.n	80071dc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	7b1b      	ldrb	r3, [r3, #12]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fea2 	bl	8008f0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	7b1b      	ldrb	r3, [r3, #12]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fecd 	bl	8008f70 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	7b5b      	ldrb	r3, [r3, #13]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00e      	beq.n	8007202 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	7b5b      	ldrb	r3, [r3, #13]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fe8f 	bl	8008f0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	7b5b      	ldrb	r3, [r3, #13]
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 feba 	bl	8008f70 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	4618      	mov	r0, r3
 8007218:	f002 f9fe 	bl	8009618 <free>
    phost->pActiveClass->pData = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007222:	2200      	movs	r2, #0
 8007224:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3340      	adds	r3, #64	; 0x40
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f8b2 	bl	80073b2 <GetLineCoding>
 800724e:	4603      	mov	r3, r0
 8007250:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d105      	bne.n	8007264 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800725e:	2102      	movs	r1, #2
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007264:	7afb      	ldrb	r3, [r7, #11]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007278:	2301      	movs	r3, #1
 800727a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007290:	2b04      	cmp	r3, #4
 8007292:	d877      	bhi.n	8007384 <USBH_CDC_Process+0x114>
 8007294:	a201      	add	r2, pc, #4	; (adr r2, 800729c <USBH_CDC_Process+0x2c>)
 8007296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729a:	bf00      	nop
 800729c:	080072b1 	.word	0x080072b1
 80072a0:	080072b7 	.word	0x080072b7
 80072a4:	080072e7 	.word	0x080072e7
 80072a8:	0800735b 	.word	0x0800735b
 80072ac:	08007369 	.word	0x08007369
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]
      break;
 80072b4:	e06d      	b.n	8007392 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f897 	bl	80073f0 <SetLineCoding>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072d4:	e058      	b.n	8007388 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d055      	beq.n	8007388 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2204      	movs	r2, #4
 80072e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80072e4:	e050      	b.n	8007388 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	3340      	adds	r3, #64	; 0x40
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f860 	bl	80073b2 <GetLineCoding>
 80072f2:	4603      	mov	r3, r0
 80072f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d126      	bne.n	800734a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730e:	791b      	ldrb	r3, [r3, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d13b      	bne.n	800738c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007320:	429a      	cmp	r2, r3
 8007322:	d133      	bne.n	800738c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007330:	429a      	cmp	r2, r3
 8007332:	d12b      	bne.n	800738c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800733e:	429a      	cmp	r2, r3
 8007340:	d124      	bne.n	800738c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f958 	bl	80075f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007348:	e020      	b.n	800738c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d01d      	beq.n	800738c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2204      	movs	r2, #4
 8007354:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007358:	e018      	b.n	800738c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f867 	bl	800742e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f8da 	bl	800751a <CDC_ProcessReception>
      break;
 8007366:	e014      	b.n	8007392 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 f822 	bl	80083b4 <USBH_ClrFeature>
 8007370:	4603      	mov	r3, r0
 8007372:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007382:	e005      	b.n	8007390 <USBH_CDC_Process+0x120>

    default:
      break;
 8007384:	bf00      	nop
 8007386:	e004      	b.n	8007392 <USBH_CDC_Process+0x122>
      break;
 8007388:	bf00      	nop
 800738a:	e002      	b.n	8007392 <USBH_CDC_Process+0x122>
      break;
 800738c:	bf00      	nop
 800738e:	e000      	b.n	8007392 <USBH_CDC_Process+0x122>
      break;
 8007390:	bf00      	nop

  }

  return status;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	22a1      	movs	r2, #161	; 0xa1
 80073c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2221      	movs	r2, #33	; 0x21
 80073c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2207      	movs	r2, #7
 80073d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2207      	movs	r2, #7
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fb23 	bl	8008a2c <USBH_CtlReq>
 80073e6:	4603      	mov	r3, r0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2221      	movs	r2, #33	; 0x21
 80073fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2207      	movs	r2, #7
 8007416:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2207      	movs	r2, #7
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 fb04 	bl	8008a2c <USBH_CtlReq>
 8007424:	4603      	mov	r3, r0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af02      	add	r7, sp, #8
 8007434:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007440:	2300      	movs	r3, #0
 8007442:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800744a:	2b01      	cmp	r3, #1
 800744c:	d002      	beq.n	8007454 <CDC_ProcessTransmission+0x26>
 800744e:	2b02      	cmp	r3, #2
 8007450:	d023      	beq.n	800749a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007452:	e05e      	b.n	8007512 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	8b12      	ldrh	r2, [r2, #24]
 800745c:	4293      	cmp	r3, r2
 800745e:	d90b      	bls.n	8007478 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	69d9      	ldr	r1, [r3, #28]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8b1a      	ldrh	r2, [r3, #24]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	7b5b      	ldrb	r3, [r3, #13]
 800746c:	2001      	movs	r0, #1
 800746e:	9000      	str	r0, [sp, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fcea 	bl	8008e4a <USBH_BulkSendData>
 8007476:	e00b      	b.n	8007490 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	7b5b      	ldrb	r3, [r3, #13]
 8007486:	2001      	movs	r0, #1
 8007488:	9000      	str	r0, [sp, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fcdd 	bl	8008e4a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007498:	e03b      	b.n	8007512 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	7b5b      	ldrb	r3, [r3, #13]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f002 f801 	bl	80094a8 <USBH_LL_GetURBState>
 80074a6:	4603      	mov	r3, r0
 80074a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d128      	bne.n	8007502 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	8b12      	ldrh	r2, [r2, #24]
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d90e      	bls.n	80074da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	8b12      	ldrh	r2, [r2, #24]
 80074c4:	1a9a      	subs	r2, r3, r2
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	8b12      	ldrh	r2, [r2, #24]
 80074d2:	441a      	add	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	61da      	str	r2, [r3, #28]
 80074d8:	e002      	b.n	80074e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80074f0:	e00e      	b.n	8007510 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f868 	bl	80075d0 <USBH_CDC_TransmitCallback>
      break;
 8007500:	e006      	b.n	8007510 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d103      	bne.n	8007510 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007510:	bf00      	nop
  }
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b086      	sub	sp, #24
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800752c:	2300      	movs	r3, #0
 800752e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007536:	2b03      	cmp	r3, #3
 8007538:	d002      	beq.n	8007540 <CDC_ProcessReception+0x26>
 800753a:	2b04      	cmp	r3, #4
 800753c:	d00e      	beq.n	800755c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800753e:	e043      	b.n	80075c8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	6a19      	ldr	r1, [r3, #32]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	8b5a      	ldrh	r2, [r3, #26]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	7b1b      	ldrb	r3, [r3, #12]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fca1 	bl	8008e94 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2204      	movs	r2, #4
 8007556:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800755a:	e035      	b.n	80075c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	7b1b      	ldrb	r3, [r3, #12]
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 ffa0 	bl	80094a8 <USBH_LL_GetURBState>
 8007568:	4603      	mov	r3, r0
 800756a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800756c:	7cfb      	ldrb	r3, [r7, #19]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d129      	bne.n	80075c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	7b1b      	ldrb	r3, [r3, #12]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 ff03 	bl	8009384 <USBH_LL_GetLastXferSize>
 800757e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	429a      	cmp	r2, r3
 8007588:	d016      	beq.n	80075b8 <CDC_ProcessReception+0x9e>
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	8b5b      	ldrh	r3, [r3, #26]
 800758e:	461a      	mov	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4293      	cmp	r3, r2
 8007594:	d910      	bls.n	80075b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1ad2      	subs	r2, r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	441a      	add	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2203      	movs	r2, #3
 80075b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80075b6:	e006      	b.n	80075c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f80f 	bl	80075e4 <USBH_CDC_ReceiveCallback>
      break;
 80075c6:	bf00      	nop
  }
}
 80075c8:	bf00      	nop
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007620:	2302      	movs	r3, #2
 8007622:	e029      	b.n	8007678 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	79fa      	ldrb	r2, [r7, #7]
 8007628:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f81f 	bl	8007680 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f001 fdd3 	bl	800921c <USBH_LL_Init>

  return USBH_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e009      	b.n	80076a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	33e0      	adds	r3, #224	; 0xe0
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	2200      	movs	r2, #0
 800769e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b0f      	cmp	r3, #15
 80076aa:	d9f2      	bls.n	8007692 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	e009      	b.n	80076c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3301      	adds	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076cc:	d3f1      	bcc.n	80076b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2240      	movs	r2, #64	; 0x40
 80076f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	331c      	adds	r3, #28
 800771e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007722:	2100      	movs	r1, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f002 f82b 	bl	8009780 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f002 f822 	bl	8009780 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007742:	2212      	movs	r2, #18
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f002 f81a 	bl	8009780 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007752:	223e      	movs	r2, #62	; 0x3e
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f002 f812 	bl	8009780 <memset>

  return USBH_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d016      	beq.n	80077a8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10e      	bne.n	80077a2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800778a:	1c59      	adds	r1, r3, #1
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	33de      	adds	r3, #222	; 0xde
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
 80077a0:	e004      	b.n	80077ac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80077a2:	2302      	movs	r3, #2
 80077a4:	73fb      	strb	r3, [r7, #15]
 80077a6:	e001      	b.n	80077ac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80077a8:	2302      	movs	r3, #2
 80077aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d204      	bcs.n	80077e0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	78fa      	ldrb	r2, [r7, #3]
 80077da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80077de:	e001      	b.n	80077e4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80077e0:	2302      	movs	r3, #2
 80077e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b087      	sub	sp, #28
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	4608      	mov	r0, r1
 80077fc:	4611      	mov	r1, r2
 80077fe:	461a      	mov	r2, r3
 8007800:	4603      	mov	r3, r0
 8007802:	70fb      	strb	r3, [r7, #3]
 8007804:	460b      	mov	r3, r1
 8007806:	70bb      	strb	r3, [r7, #2]
 8007808:	4613      	mov	r3, r2
 800780a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800781a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800781c:	e025      	b.n	800786a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	221a      	movs	r2, #26
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	3308      	adds	r3, #8
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	3302      	adds	r3, #2
 800782e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	795b      	ldrb	r3, [r3, #5]
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	429a      	cmp	r2, r3
 8007838:	d002      	beq.n	8007840 <USBH_FindInterface+0x4e>
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	2bff      	cmp	r3, #255	; 0xff
 800783e:	d111      	bne.n	8007864 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007844:	78ba      	ldrb	r2, [r7, #2]
 8007846:	429a      	cmp	r2, r3
 8007848:	d002      	beq.n	8007850 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800784a:	78bb      	ldrb	r3, [r7, #2]
 800784c:	2bff      	cmp	r3, #255	; 0xff
 800784e:	d109      	bne.n	8007864 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007854:	787a      	ldrb	r2, [r7, #1]
 8007856:	429a      	cmp	r2, r3
 8007858:	d002      	beq.n	8007860 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800785a:	787b      	ldrb	r3, [r7, #1]
 800785c:	2bff      	cmp	r3, #255	; 0xff
 800785e:	d101      	bne.n	8007864 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	e006      	b.n	8007872 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	3301      	adds	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d9d6      	bls.n	800781e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007870:	23ff      	movs	r3, #255	; 0xff
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fd04 	bl	8009294 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800788c:	2101      	movs	r1, #1
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 fe1d 	bl	80094ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af04      	add	r7, sp, #16
 80078a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80078a8:	2302      	movs	r3, #2
 80078aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d102      	bne.n	80078c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2203      	movs	r2, #3
 80078c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b0b      	cmp	r3, #11
 80078ca:	f200 81be 	bhi.w	8007c4a <USBH_Process+0x3aa>
 80078ce:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <USBH_Process+0x34>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	08007905 	.word	0x08007905
 80078d8:	08007937 	.word	0x08007937
 80078dc:	0800799f 	.word	0x0800799f
 80078e0:	08007be5 	.word	0x08007be5
 80078e4:	08007c4b 	.word	0x08007c4b
 80078e8:	08007a43 	.word	0x08007a43
 80078ec:	08007b8b 	.word	0x08007b8b
 80078f0:	08007a79 	.word	0x08007a79
 80078f4:	08007a99 	.word	0x08007a99
 80078f8:	08007ab9 	.word	0x08007ab9
 80078fc:	08007afd 	.word	0x08007afd
 8007900:	08007bcd 	.word	0x08007bcd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 819e 	beq.w	8007c4e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007918:	20c8      	movs	r0, #200	; 0xc8
 800791a:	f001 fe22 	bl	8009562 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fd15 	bl	800934e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007934:	e18b      	b.n	8007c4e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800793c:	2b01      	cmp	r3, #1
 800793e:	d107      	bne.n	8007950 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800794e:	e18d      	b.n	8007c6c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800795a:	d914      	bls.n	8007986 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007962:	3301      	adds	r3, #1
 8007964:	b2da      	uxtb	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007972:	2b03      	cmp	r3, #3
 8007974:	d903      	bls.n	800797e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	220d      	movs	r2, #13
 800797a:	701a      	strb	r2, [r3, #0]
      break;
 800797c:	e176      	b.n	8007c6c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
      break;
 8007984:	e172      	b.n	8007c6c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800798c:	f103 020a 	add.w	r2, r3, #10
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007996:	200a      	movs	r0, #10
 8007998:	f001 fde3 	bl	8009562 <USBH_Delay>
      break;
 800799c:	e166      	b.n	8007c6c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079ae:	2104      	movs	r1, #4
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80079b4:	2064      	movs	r0, #100	; 0x64
 80079b6:	f001 fdd4 	bl	8009562 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fca0 	bl	8009300 <USBH_LL_GetSpeed>
 80079c0:	4603      	mov	r3, r0
 80079c2:	461a      	mov	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2205      	movs	r2, #5
 80079ce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 faab 	bl	8008f2e <USBH_AllocPipe>
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80079e0:	2180      	movs	r1, #128	; 0x80
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 faa3 	bl	8008f2e <USBH_AllocPipe>
 80079e8:	4603      	mov	r3, r0
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7919      	ldrb	r1, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a04:	b292      	uxth	r2, r2
 8007a06:	9202      	str	r2, [sp, #8]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	9201      	str	r2, [sp, #4]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2280      	movs	r2, #128	; 0x80
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fa5c 	bl	8008ed0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	7959      	ldrb	r1, [r3, #5]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a2c:	b292      	uxth	r2, r2
 8007a2e:	9202      	str	r2, [sp, #8]
 8007a30:	2200      	movs	r2, #0
 8007a32:	9201      	str	r2, [sp, #4]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4603      	mov	r3, r0
 8007a38:	2200      	movs	r2, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 fa48 	bl	8008ed0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a40:	e114      	b.n	8007c6c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f918 	bl	8007c78 <USBH_HandleEnum>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 80fe 	bne.w	8007c52 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d103      	bne.n	8007a70 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2208      	movs	r2, #8
 8007a6c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a6e:	e0f0      	b.n	8007c52 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2207      	movs	r2, #7
 8007a74:	701a      	strb	r2, [r3, #0]
      break;
 8007a76:	e0ec      	b.n	8007c52 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 80e9 	beq.w	8007c56 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2208      	movs	r2, #8
 8007a94:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007a96:	e0de      	b.n	8007c56 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc3f 	bl	8008326 <USBH_SetCfg>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 80d5 	bne.w	8007c5a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2209      	movs	r2, #9
 8007ab4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ab6:	e0d0      	b.n	8007c5a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d016      	beq.n	8007af4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc4f 	bl	800836c <USBH_SetFeature>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d103      	bne.n	8007ae2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	220a      	movs	r2, #10
 8007ade:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ae0:	e0bd      	b.n	8007c5e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	f040 80b9 	bne.w	8007c5e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	220a      	movs	r2, #10
 8007af0:	701a      	strb	r2, [r3, #0]
      break;
 8007af2:	e0b4      	b.n	8007c5e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	220a      	movs	r2, #10
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e0b0      	b.n	8007c5e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80ad 	beq.w	8007c62 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]
 8007b14:	e016      	b.n	8007b44 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007b16:	7bfa      	ldrb	r2, [r7, #15]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	32de      	adds	r2, #222	; 0xde
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	791a      	ldrb	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d108      	bne.n	8007b3e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007b2c:	7bfa      	ldrb	r2, [r7, #15]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	32de      	adds	r2, #222	; 0xde
 8007b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007b3c:	e005      	b.n	8007b4a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	3301      	adds	r3, #1
 8007b42:	73fb      	strb	r3, [r7, #15]
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0e5      	beq.n	8007b16 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d016      	beq.n	8007b82 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2206      	movs	r2, #6
 8007b6a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b72:	2103      	movs	r1, #3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b78:	e073      	b.n	8007c62 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	220d      	movs	r2, #13
 8007b7e:	701a      	strb	r2, [r3, #0]
      break;
 8007b80:	e06f      	b.n	8007c62 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	220d      	movs	r2, #13
 8007b86:	701a      	strb	r2, [r3, #0]
      break;
 8007b88:	e06b      	b.n	8007c62 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d017      	beq.n	8007bc4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	220b      	movs	r2, #11
 8007bb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bb2:	e058      	b.n	8007c66 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d154      	bne.n	8007c66 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	220d      	movs	r2, #13
 8007bc0:	701a      	strb	r2, [r3, #0]
      break;
 8007bc2:	e050      	b.n	8007c66 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	220d      	movs	r2, #13
 8007bc8:	701a      	strb	r2, [r3, #0]
      break;
 8007bca:	e04c      	b.n	8007c66 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d049      	beq.n	8007c6a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	4798      	blx	r3
      }
      break;
 8007be2:	e042      	b.n	8007c6a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff fd47 	bl	8007680 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c20:	2105      	movs	r1, #5
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d107      	bne.n	8007c42 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff fe1f 	bl	800787e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c40:	e014      	b.n	8007c6c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 fb26 	bl	8009294 <USBH_LL_Start>
      break;
 8007c48:	e010      	b.n	8007c6c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e00e      	b.n	8007c6c <USBH_Process+0x3cc>
      break;
 8007c4e:	bf00      	nop
 8007c50:	e00c      	b.n	8007c6c <USBH_Process+0x3cc>
      break;
 8007c52:	bf00      	nop
 8007c54:	e00a      	b.n	8007c6c <USBH_Process+0x3cc>
    break;
 8007c56:	bf00      	nop
 8007c58:	e008      	b.n	8007c6c <USBH_Process+0x3cc>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e006      	b.n	8007c6c <USBH_Process+0x3cc>
      break;
 8007c5e:	bf00      	nop
 8007c60:	e004      	b.n	8007c6c <USBH_Process+0x3cc>
      break;
 8007c62:	bf00      	nop
 8007c64:	e002      	b.n	8007c6c <USBH_Process+0x3cc>
      break;
 8007c66:	bf00      	nop
 8007c68:	e000      	b.n	8007c6c <USBH_Process+0x3cc>
      break;
 8007c6a:	bf00      	nop
  }
  return USBH_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop

08007c78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af04      	add	r7, sp, #16
 8007c7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007c84:	2301      	movs	r3, #1
 8007c86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b07      	cmp	r3, #7
 8007c8e:	f200 81c1 	bhi.w	8008014 <USBH_HandleEnum+0x39c>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <USBH_HandleEnum+0x20>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cb9 	.word	0x08007cb9
 8007c9c:	08007d77 	.word	0x08007d77
 8007ca0:	08007de1 	.word	0x08007de1
 8007ca4:	08007e6f 	.word	0x08007e6f
 8007ca8:	08007ed9 	.word	0x08007ed9
 8007cac:	08007f49 	.word	0x08007f49
 8007cb0:	08007f8f 	.word	0x08007f8f
 8007cb4:	08007fd5 	.word	0x08007fd5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007cb8:	2108      	movs	r1, #8
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa50 	bl	8008160 <USBH_Get_DevDesc>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d130      	bne.n	8007d2c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7919      	ldrb	r1, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007cee:	b292      	uxth	r2, r2
 8007cf0:	9202      	str	r2, [sp, #8]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	9201      	str	r2, [sp, #4]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2280      	movs	r2, #128	; 0x80
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f8e7 	bl	8008ed0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7959      	ldrb	r1, [r3, #5]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d16:	b292      	uxth	r2, r2
 8007d18:	9202      	str	r2, [sp, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	9201      	str	r2, [sp, #4]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4603      	mov	r3, r0
 8007d22:	2200      	movs	r2, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f8d3 	bl	8008ed0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d2a:	e175      	b.n	8008018 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	f040 8172 	bne.w	8008018 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d903      	bls.n	8007d56 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	220d      	movs	r2, #13
 8007d52:	701a      	strb	r2, [r3, #0]
      break;
 8007d54:	e160      	b.n	8008018 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	795b      	ldrb	r3, [r3, #5]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 f907 	bl	8008f70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 f901 	bl	8008f70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
      break;
 8007d74:	e150      	b.n	8008018 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007d76:	2112      	movs	r1, #18
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f9f1 	bl	8008160 <USBH_Get_DevDesc>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d8e:	e145      	b.n	800801c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	f040 8142 	bne.w	800801c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d903      	bls.n	8007dba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	220d      	movs	r2, #13
 8007db6:	701a      	strb	r2, [r3, #0]
      break;
 8007db8:	e130      	b.n	800801c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	795b      	ldrb	r3, [r3, #5]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f8d5 	bl	8008f70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 f8cf 	bl	8008f70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
      break;
 8007dde:	e11d      	b.n	800801c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007de0:	2101      	movs	r1, #1
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa7b 	bl	80082de <USBH_SetAddress>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d132      	bne.n	8007e58 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007df2:	2002      	movs	r0, #2
 8007df4:	f001 fbb5 	bl	8009562 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2203      	movs	r2, #3
 8007e04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7919      	ldrb	r1, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e1a:	b292      	uxth	r2, r2
 8007e1c:	9202      	str	r2, [sp, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	9201      	str	r2, [sp, #4]
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	4603      	mov	r3, r0
 8007e26:	2280      	movs	r2, #128	; 0x80
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f851 	bl	8008ed0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7959      	ldrb	r1, [r3, #5]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e42:	b292      	uxth	r2, r2
 8007e44:	9202      	str	r2, [sp, #8]
 8007e46:	2200      	movs	r2, #0
 8007e48:	9201      	str	r2, [sp, #4]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2200      	movs	r2, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f83d 	bl	8008ed0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e56:	e0e3      	b.n	8008020 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	f040 80e0 	bne.w	8008020 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	220d      	movs	r2, #13
 8007e64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	705a      	strb	r2, [r3, #1]
      break;
 8007e6c:	e0d8      	b.n	8008020 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007e6e:	2109      	movs	r1, #9
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f9a1 	bl	80081b8 <USBH_Get_CfgDesc>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d103      	bne.n	8007e88 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2204      	movs	r2, #4
 8007e84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e86:	e0cd      	b.n	8008024 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	f040 80ca 	bne.w	8008024 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e96:	3301      	adds	r3, #1
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d903      	bls.n	8007eb2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	220d      	movs	r2, #13
 8007eae:	701a      	strb	r2, [r3, #0]
      break;
 8007eb0:	e0b8      	b.n	8008024 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	795b      	ldrb	r3, [r3, #5]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 f859 	bl	8008f70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	791b      	ldrb	r3, [r3, #4]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 f853 	bl	8008f70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
      break;
 8007ed6:	e0a5      	b.n	8008024 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f969 	bl	80081b8 <USBH_Get_CfgDesc>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ef6:	e097      	b.n	8008028 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	f040 8094 	bne.w	8008028 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f06:	3301      	adds	r3, #1
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d903      	bls.n	8007f22 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	220d      	movs	r2, #13
 8007f1e:	701a      	strb	r2, [r3, #0]
      break;
 8007f20:	e082      	b.n	8008028 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	795b      	ldrb	r3, [r3, #5]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 f821 	bl	8008f70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	791b      	ldrb	r3, [r3, #4]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 f81b 	bl	8008f70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
      break;
 8007f46:	e06f      	b.n	8008028 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d019      	beq.n	8007f86 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f5e:	23ff      	movs	r3, #255	; 0xff
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f953 	bl	800820c <USBH_Get_StringDesc>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d103      	bne.n	8007f78 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2206      	movs	r2, #6
 8007f74:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f76:	e059      	b.n	800802c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d156      	bne.n	800802c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2206      	movs	r2, #6
 8007f82:	705a      	strb	r2, [r3, #1]
      break;
 8007f84:	e052      	b.n	800802c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2206      	movs	r2, #6
 8007f8a:	705a      	strb	r2, [r3, #1]
      break;
 8007f8c:	e04e      	b.n	800802c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d019      	beq.n	8007fcc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007fa4:	23ff      	movs	r3, #255	; 0xff
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f930 	bl	800820c <USBH_Get_StringDesc>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d103      	bne.n	8007fbe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2207      	movs	r2, #7
 8007fba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007fbc:	e038      	b.n	8008030 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d135      	bne.n	8008030 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	705a      	strb	r2, [r3, #1]
      break;
 8007fca:	e031      	b.n	8008030 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2207      	movs	r2, #7
 8007fd0:	705a      	strb	r2, [r3, #1]
      break;
 8007fd2:	e02d      	b.n	8008030 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d017      	beq.n	800800e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fea:	23ff      	movs	r3, #255	; 0xff
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f90d 	bl	800820c <USBH_Get_StringDesc>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008000:	e018      	b.n	8008034 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d115      	bne.n	8008034 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
      break;
 800800c:	e012      	b.n	8008034 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
      break;
 8008012:	e00f      	b.n	8008034 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008014:	bf00      	nop
 8008016:	e00e      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008018:	bf00      	nop
 800801a:	e00c      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 800801c:	bf00      	nop
 800801e:	e00a      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008020:	bf00      	nop
 8008022:	e008      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008024:	bf00      	nop
 8008026:	e006      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008028:	bf00      	nop
 800802a:	e004      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 800802c:	bf00      	nop
 800802e:	e002      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008034:	bf00      	nop
  }
  return Status;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f804 	bl	8008082 <USBH_HandleSof>
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b0b      	cmp	r3, #11
 8008092:	d10a      	bne.n	80080aa <USBH_HandleSof+0x28>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
  }
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80080c2:	bf00      	nop
}
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80080de:	bf00      	nop
}
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f8c6 	bl	80092ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	791b      	ldrb	r3, [r3, #4]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 ff13 	bl	8008f70 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	795b      	ldrb	r3, [r3, #5]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 ff0d 	bl	8008f70 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af02      	add	r7, sp, #8
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800816c:	887b      	ldrh	r3, [r7, #2]
 800816e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008172:	d901      	bls.n	8008178 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008174:	2303      	movs	r3, #3
 8008176:	e01b      	b.n	80081b0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800817e:	887b      	ldrh	r3, [r7, #2]
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4613      	mov	r3, r2
 8008184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f872 	bl	8008274 <USBH_GetDescriptor>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d109      	bne.n	80081ae <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081a0:	887a      	ldrh	r2, [r7, #2]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f929 	bl	80083fc <USBH_ParseDevDesc>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af02      	add	r7, sp, #8
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	331c      	adds	r3, #28
 80081c8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80081ca:	887b      	ldrh	r3, [r7, #2]
 80081cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d0:	d901      	bls.n	80081d6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e016      	b.n	8008204 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80081d6:	887b      	ldrh	r3, [r7, #2]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e0:	2100      	movs	r1, #0
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f846 	bl	8008274 <USBH_GetDescriptor>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d107      	bne.n	8008202 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80081f2:	887b      	ldrh	r3, [r7, #2]
 80081f4:	461a      	mov	r2, r3
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f9b3 	bl	8008564 <USBH_ParseCfgDesc>
 80081fe:	4603      	mov	r3, r0
 8008200:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af02      	add	r7, sp, #8
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	607a      	str	r2, [r7, #4]
 8008216:	461a      	mov	r2, r3
 8008218:	460b      	mov	r3, r1
 800821a:	72fb      	strb	r3, [r7, #11]
 800821c:	4613      	mov	r3, r2
 800821e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008220:	893b      	ldrh	r3, [r7, #8]
 8008222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008226:	d802      	bhi.n	800822e <USBH_Get_StringDesc+0x22>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800822e:	2303      	movs	r3, #3
 8008230:	e01c      	b.n	800826c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800823a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008242:	893b      	ldrh	r3, [r7, #8]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	460b      	mov	r3, r1
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 f812 	bl	8008274 <USBH_GetDescriptor>
 8008250:	4603      	mov	r3, r0
 8008252:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d107      	bne.n	800826a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008260:	893a      	ldrh	r2, [r7, #8]
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fb93 	bl	8008990 <USBH_ParseStringDesc>
  }

  return status;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	72fb      	strb	r3, [r7, #11]
 8008282:	4613      	mov	r3, r2
 8008284:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	789b      	ldrb	r3, [r3, #2]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d11c      	bne.n	80082c8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008294:	b2da      	uxtb	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2206      	movs	r2, #6
 800829e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	893a      	ldrh	r2, [r7, #8]
 80082a4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80082a6:	893b      	ldrh	r3, [r7, #8]
 80082a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80082ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b0:	d104      	bne.n	80082bc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f240 4209 	movw	r2, #1033	; 0x409
 80082b8:	829a      	strh	r2, [r3, #20]
 80082ba:	e002      	b.n	80082c2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8b3a      	ldrh	r2, [r7, #24]
 80082c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80082c8:	8b3b      	ldrh	r3, [r7, #24]
 80082ca:	461a      	mov	r2, r3
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 fbac 	bl	8008a2c <USBH_CtlReq>
 80082d4:	4603      	mov	r3, r0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	460b      	mov	r3, r1
 80082e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	789b      	ldrb	r3, [r3, #2]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10f      	bne.n	8008312 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2205      	movs	r2, #5
 80082fc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008312:	2200      	movs	r2, #0
 8008314:	2100      	movs	r1, #0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fb88 	bl	8008a2c <USBH_CtlReq>
 800831c:	4603      	mov	r3, r0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	789b      	ldrb	r3, [r3, #2]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d10e      	bne.n	8008358 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2209      	movs	r2, #9
 8008344:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	887a      	ldrh	r2, [r7, #2]
 800834a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008358:	2200      	movs	r2, #0
 800835a:	2100      	movs	r1, #0
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fb65 	bl	8008a2c <USBH_CtlReq>
 8008362:	4603      	mov	r3, r0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	789b      	ldrb	r3, [r3, #2]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10f      	bne.n	80083a0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2203      	movs	r2, #3
 800838a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	b29a      	uxth	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083a0:	2200      	movs	r2, #0
 80083a2:	2100      	movs	r1, #0
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fb41 	bl	8008a2c <USBH_CtlReq>
 80083aa:	4603      	mov	r3, r0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	789b      	ldrb	r3, [r3, #2]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d10f      	bne.n	80083e8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083e8:	2200      	movs	r2, #0
 80083ea:	2100      	movs	r1, #0
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fb1d 	bl	8008a2c <USBH_CtlReq>
 80083f2:	4603      	mov	r3, r0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	4613      	mov	r3, r2
 8008408:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008410:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800841c:	2302      	movs	r3, #2
 800841e:	e098      	b.n	8008552 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	785a      	ldrb	r2, [r3, #1]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3302      	adds	r3, #2
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	b29a      	uxth	r2, r3
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	3303      	adds	r3, #3
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	b29b      	uxth	r3, r3
 8008444:	4313      	orrs	r3, r2
 8008446:	b29a      	uxth	r2, r3
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	791a      	ldrb	r2, [r3, #4]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	795a      	ldrb	r2, [r3, #5]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	799a      	ldrb	r2, [r3, #6]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	79da      	ldrb	r2, [r3, #7]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800847c:	2b01      	cmp	r3, #1
 800847e:	d11b      	bne.n	80084b8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	79db      	ldrb	r3, [r3, #7]
 8008484:	2b20      	cmp	r3, #32
 8008486:	dc0f      	bgt.n	80084a8 <USBH_ParseDevDesc+0xac>
 8008488:	2b08      	cmp	r3, #8
 800848a:	db0f      	blt.n	80084ac <USBH_ParseDevDesc+0xb0>
 800848c:	3b08      	subs	r3, #8
 800848e:	4a34      	ldr	r2, [pc, #208]	; (8008560 <USBH_ParseDevDesc+0x164>)
 8008490:	fa22 f303 	lsr.w	r3, r2, r3
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	bf14      	ite	ne
 800849c:	2301      	movne	r3, #1
 800849e:	2300      	moveq	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <USBH_ParseDevDesc+0xb8>
 80084a6:	e001      	b.n	80084ac <USBH_ParseDevDesc+0xb0>
 80084a8:	2b40      	cmp	r3, #64	; 0x40
 80084aa:	d003      	beq.n	80084b4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	2208      	movs	r2, #8
 80084b0:	71da      	strb	r2, [r3, #7]
        break;
 80084b2:	e000      	b.n	80084b6 <USBH_ParseDevDesc+0xba>
        break;
 80084b4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80084b6:	e00e      	b.n	80084d6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d107      	bne.n	80084d2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	79db      	ldrb	r3, [r3, #7]
 80084c6:	2b08      	cmp	r3, #8
 80084c8:	d005      	beq.n	80084d6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2208      	movs	r2, #8
 80084ce:	71da      	strb	r2, [r3, #7]
 80084d0:	e001      	b.n	80084d6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80084d2:	2303      	movs	r3, #3
 80084d4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d939      	bls.n	8008550 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	3308      	adds	r3, #8
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	3309      	adds	r3, #9
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	021b      	lsls	r3, r3, #8
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	4313      	orrs	r3, r2
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	330a      	adds	r3, #10
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	b29a      	uxth	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	330b      	adds	r3, #11
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	b29b      	uxth	r3, r3
 800850c:	4313      	orrs	r3, r2
 800850e:	b29a      	uxth	r2, r3
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	330c      	adds	r3, #12
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b29a      	uxth	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	330d      	adds	r3, #13
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	b29b      	uxth	r3, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	b29a      	uxth	r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	7b9a      	ldrb	r2, [r3, #14]
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	7bda      	ldrb	r2, [r3, #15]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	7c1a      	ldrb	r2, [r3, #16]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	7c5a      	ldrb	r2, [r3, #17]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008550:	7dfb      	ldrb	r3, [r7, #23]
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	01000101 	.word	0x01000101

08008564 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08c      	sub	sp, #48	; 0x30
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008578:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008592:	2302      	movs	r3, #2
 8008594:	e0db      	b.n	800874e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	781a      	ldrb	r2, [r3, #0]
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	785a      	ldrb	r2, [r3, #1]
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	3302      	adds	r3, #2
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	3303      	adds	r3, #3
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	4313      	orrs	r3, r2
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c6:	bf28      	it	cs
 80085c8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	791a      	ldrb	r2, [r3, #4]
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	795a      	ldrb	r2, [r3, #5]
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	799a      	ldrb	r2, [r3, #6]
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	79da      	ldrb	r2, [r3, #7]
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	7a1a      	ldrb	r2, [r3, #8]
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b09      	cmp	r3, #9
 8008600:	d002      	beq.n	8008608 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	2209      	movs	r2, #9
 8008606:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	2b09      	cmp	r3, #9
 800860c:	f240 809d 	bls.w	800874a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008610:	2309      	movs	r3, #9
 8008612:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008614:	2300      	movs	r3, #0
 8008616:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008618:	e081      	b.n	800871e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800861a:	f107 0316 	add.w	r3, r7, #22
 800861e:	4619      	mov	r1, r3
 8008620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008622:	f000 f9e8 	bl	80089f6 <USBH_GetNextDesc>
 8008626:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	2b04      	cmp	r3, #4
 800862e:	d176      	bne.n	800871e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b09      	cmp	r3, #9
 8008636:	d002      	beq.n	800863e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	2209      	movs	r2, #9
 800863c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800863e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008642:	221a      	movs	r2, #26
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	3308      	adds	r3, #8
 800864a:	6a3a      	ldr	r2, [r7, #32]
 800864c:	4413      	add	r3, r2
 800864e:	3302      	adds	r3, #2
 8008650:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008654:	69f8      	ldr	r0, [r7, #28]
 8008656:	f000 f87e 	bl	8008756 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008664:	e043      	b.n	80086ee <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008666:	f107 0316 	add.w	r3, r7, #22
 800866a:	4619      	mov	r1, r3
 800866c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800866e:	f000 f9c2 	bl	80089f6 <USBH_GetNextDesc>
 8008672:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	785b      	ldrb	r3, [r3, #1]
 8008678:	2b05      	cmp	r3, #5
 800867a:	d138      	bne.n	80086ee <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	795b      	ldrb	r3, [r3, #5]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d113      	bne.n	80086ac <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008688:	2b02      	cmp	r3, #2
 800868a:	d003      	beq.n	8008694 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	799b      	ldrb	r3, [r3, #6]
 8008690:	2b03      	cmp	r3, #3
 8008692:	d10b      	bne.n	80086ac <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	79db      	ldrb	r3, [r3, #7]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10b      	bne.n	80086b4 <USBH_ParseCfgDesc+0x150>
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	d007      	beq.n	80086b4 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	2209      	movs	r2, #9
 80086a8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086aa:	e003      	b.n	80086b4 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	2207      	movs	r2, #7
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	e000      	b.n	80086b6 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086b4:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80086b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80086be:	3201      	adds	r2, #1
 80086c0:	00d2      	lsls	r2, r2, #3
 80086c2:	211a      	movs	r1, #26
 80086c4:	fb01 f303 	mul.w	r3, r1, r3
 80086c8:	4413      	add	r3, r2
 80086ca:	3308      	adds	r3, #8
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	4413      	add	r3, r2
 80086d0:	3304      	adds	r3, #4
 80086d2:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80086d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086d6:	69b9      	ldr	r1, [r7, #24]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f870 	bl	80087be <USBH_ParseEPDesc>
 80086de:	4603      	mov	r3, r0
 80086e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80086e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086e8:	3301      	adds	r3, #1
 80086ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	791b      	ldrb	r3, [r3, #4]
 80086f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d204      	bcs.n	8008704 <USBH_ParseCfgDesc+0x1a0>
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	885a      	ldrh	r2, [r3, #2]
 80086fe:	8afb      	ldrh	r3, [r7, #22]
 8008700:	429a      	cmp	r2, r3
 8008702:	d8b0      	bhi.n	8008666 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800870c:	429a      	cmp	r2, r3
 800870e:	d201      	bcs.n	8008714 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008710:	2303      	movs	r3, #3
 8008712:	e01c      	b.n	800874e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008718:	3301      	adds	r3, #1
 800871a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800871e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008722:	2b01      	cmp	r3, #1
 8008724:	d805      	bhi.n	8008732 <USBH_ParseCfgDesc+0x1ce>
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	885a      	ldrh	r2, [r3, #2]
 800872a:	8afb      	ldrh	r3, [r7, #22]
 800872c:	429a      	cmp	r2, r3
 800872e:	f63f af74 	bhi.w	800861a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	791b      	ldrb	r3, [r3, #4]
 8008736:	2b02      	cmp	r3, #2
 8008738:	bf28      	it	cs
 800873a:	2302      	movcs	r3, #2
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008742:	429a      	cmp	r2, r3
 8008744:	d201      	bcs.n	800874a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008746:	2303      	movs	r3, #3
 8008748:	e001      	b.n	800874e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800874a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800874e:	4618      	mov	r0, r3
 8008750:	3730      	adds	r7, #48	; 0x30
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	785a      	ldrb	r2, [r3, #1]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	789a      	ldrb	r2, [r3, #2]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	78da      	ldrb	r2, [r3, #3]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	3304      	adds	r3, #4
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b02      	cmp	r3, #2
 8008788:	bf28      	it	cs
 800878a:	2302      	movcs	r3, #2
 800878c:	b2da      	uxtb	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	795a      	ldrb	r2, [r3, #5]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	799a      	ldrb	r2, [r3, #6]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	79da      	ldrb	r2, [r3, #7]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	7a1a      	ldrb	r2, [r3, #8]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	721a      	strb	r2, [r3, #8]
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80087be:	b480      	push	{r7}
 80087c0:	b087      	sub	sp, #28
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	785a      	ldrb	r2, [r3, #1]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	789a      	ldrb	r2, [r3, #2]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	78da      	ldrb	r2, [r3, #3]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3304      	adds	r3, #4
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3305      	adds	r3, #5
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	b29b      	uxth	r3, r3
 8008802:	4313      	orrs	r3, r2
 8008804:	b29a      	uxth	r2, r3
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	799a      	ldrb	r2, [r3, #6]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	889b      	ldrh	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800881e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008822:	d804      	bhi.n	800882e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882c:	d901      	bls.n	8008832 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800882e:	2303      	movs	r3, #3
 8008830:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008838:	2b00      	cmp	r3, #0
 800883a:	d136      	bne.n	80088aa <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	78db      	ldrb	r3, [r3, #3]
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d108      	bne.n	800885a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	889b      	ldrh	r3, [r3, #4]
 800884c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008850:	f240 8097 	bls.w	8008982 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008854:	2303      	movs	r3, #3
 8008856:	75fb      	strb	r3, [r7, #23]
 8008858:	e093      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	78db      	ldrb	r3, [r3, #3]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	889b      	ldrh	r3, [r3, #4]
 800886a:	2b40      	cmp	r3, #64	; 0x40
 800886c:	f240 8089 	bls.w	8008982 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008870:	2303      	movs	r3, #3
 8008872:	75fb      	strb	r3, [r7, #23]
 8008874:	e085      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	78db      	ldrb	r3, [r3, #3]
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b01      	cmp	r3, #1
 8008880:	d005      	beq.n	800888e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	78db      	ldrb	r3, [r3, #3]
 8008886:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800888a:	2b03      	cmp	r3, #3
 800888c:	d10a      	bne.n	80088a4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	799b      	ldrb	r3, [r3, #6]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <USBH_ParseEPDesc+0xe0>
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	799b      	ldrb	r3, [r3, #6]
 800889a:	2b10      	cmp	r3, #16
 800889c:	d970      	bls.n	8008980 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800889e:	2303      	movs	r3, #3
 80088a0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088a2:	e06d      	b.n	8008980 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80088a4:	2303      	movs	r3, #3
 80088a6:	75fb      	strb	r3, [r7, #23]
 80088a8:	e06b      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d13c      	bne.n	800892e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	78db      	ldrb	r3, [r3, #3]
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d005      	beq.n	80088cc <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	889b      	ldrh	r3, [r3, #4]
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	d956      	bls.n	8008982 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80088d4:	2303      	movs	r3, #3
 80088d6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80088d8:	e053      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	78db      	ldrb	r3, [r3, #3]
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d10e      	bne.n	8008904 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	799b      	ldrb	r3, [r3, #6]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d007      	beq.n	80088fe <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80088f2:	2b10      	cmp	r3, #16
 80088f4:	d803      	bhi.n	80088fe <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80088fa:	2b40      	cmp	r3, #64	; 0x40
 80088fc:	d941      	bls.n	8008982 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80088fe:	2303      	movs	r3, #3
 8008900:	75fb      	strb	r3, [r7, #23]
 8008902:	e03e      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	78db      	ldrb	r3, [r3, #3]
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	2b03      	cmp	r3, #3
 800890e:	d10b      	bne.n	8008928 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	799b      	ldrb	r3, [r3, #6]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <USBH_ParseEPDesc+0x164>
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	889b      	ldrh	r3, [r3, #4]
 800891c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008920:	d32f      	bcc.n	8008982 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008922:	2303      	movs	r3, #3
 8008924:	75fb      	strb	r3, [r7, #23]
 8008926:	e02c      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008928:	2303      	movs	r3, #3
 800892a:	75fb      	strb	r3, [r7, #23]
 800892c:	e029      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008934:	2b02      	cmp	r3, #2
 8008936:	d120      	bne.n	800897a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	78db      	ldrb	r3, [r3, #3]
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d106      	bne.n	8008952 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	889b      	ldrh	r3, [r3, #4]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d01a      	beq.n	8008982 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800894c:	2303      	movs	r3, #3
 800894e:	75fb      	strb	r3, [r7, #23]
 8008950:	e017      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	78db      	ldrb	r3, [r3, #3]
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	2b03      	cmp	r3, #3
 800895c:	d10a      	bne.n	8008974 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	799b      	ldrb	r3, [r3, #6]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <USBH_ParseEPDesc+0x1b0>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	889b      	ldrh	r3, [r3, #4]
 800896a:	2b08      	cmp	r3, #8
 800896c:	d909      	bls.n	8008982 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800896e:	2303      	movs	r3, #3
 8008970:	75fb      	strb	r3, [r7, #23]
 8008972:	e006      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008974:	2303      	movs	r3, #3
 8008976:	75fb      	strb	r3, [r7, #23]
 8008978:	e003      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800897a:	2303      	movs	r3, #3
 800897c:	75fb      	strb	r3, [r7, #23]
 800897e:	e000      	b.n	8008982 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008980:	bf00      	nop
  }

  return status;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
}
 8008984:	4618      	mov	r0, r3
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	4613      	mov	r3, r2
 800899c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d120      	bne.n	80089ea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	1e9a      	subs	r2, r3, #2
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	4293      	cmp	r3, r2
 80089b2:	bf28      	it	cs
 80089b4:	4613      	movcs	r3, r2
 80089b6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3302      	adds	r3, #2
 80089bc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80089be:	2300      	movs	r3, #0
 80089c0:	82fb      	strh	r3, [r7, #22]
 80089c2:	e00b      	b.n	80089dc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80089c4:	8afb      	ldrh	r3, [r7, #22]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4413      	add	r3, r2
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	701a      	strb	r2, [r3, #0]
      pdest++;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80089d6:	8afb      	ldrh	r3, [r7, #22]
 80089d8:	3302      	adds	r3, #2
 80089da:	82fb      	strh	r3, [r7, #22]
 80089dc:	8afa      	ldrh	r2, [r7, #22]
 80089de:	8abb      	ldrh	r3, [r7, #20]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d3ef      	bcc.n	80089c4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2200      	movs	r2, #0
 80089e8:	701a      	strb	r2, [r3, #0]
  }
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	881a      	ldrh	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	4613      	mov	r3, r2
 8008a38:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	789b      	ldrb	r3, [r3, #2]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d002      	beq.n	8008a4c <USBH_CtlReq+0x20>
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d00f      	beq.n	8008a6a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008a4a:	e027      	b.n	8008a9c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	88fa      	ldrh	r2, [r7, #6]
 8008a56:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2202      	movs	r2, #2
 8008a62:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008a64:	2301      	movs	r3, #1
 8008a66:	75fb      	strb	r3, [r7, #23]
      break;
 8008a68:	e018      	b.n	8008a9c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 f81c 	bl	8008aa8 <USBH_HandleControl>
 8008a70:	4603      	mov	r3, r0
 8008a72:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <USBH_CtlReq+0x54>
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d106      	bne.n	8008a8e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	761a      	strb	r2, [r3, #24]
      break;
 8008a8c:	e005      	b.n	8008a9a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d102      	bne.n	8008a9a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	709a      	strb	r2, [r3, #2]
      break;
 8008a9a:	bf00      	nop
  }
  return status;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af02      	add	r7, sp, #8
 8008aae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7e1b      	ldrb	r3, [r3, #24]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	2b0a      	cmp	r3, #10
 8008ac0:	f200 8156 	bhi.w	8008d70 <USBH_HandleControl+0x2c8>
 8008ac4:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <USBH_HandleControl+0x24>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008b13 	.word	0x08008b13
 8008ad4:	08008b7d 	.word	0x08008b7d
 8008ad8:	08008ba3 	.word	0x08008ba3
 8008adc:	08008bdb 	.word	0x08008bdb
 8008ae0:	08008c05 	.word	0x08008c05
 8008ae4:	08008c57 	.word	0x08008c57
 8008ae8:	08008c79 	.word	0x08008c79
 8008aec:	08008cb5 	.word	0x08008cb5
 8008af0:	08008cdb 	.word	0x08008cdb
 8008af4:	08008d19 	.word	0x08008d19
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f103 0110 	add.w	r1, r3, #16
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	795b      	ldrb	r3, [r3, #5]
 8008b02:	461a      	mov	r2, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f943 	bl	8008d90 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	761a      	strb	r2, [r3, #24]
      break;
 8008b10:	e139      	b.n	8008d86 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	795b      	ldrb	r3, [r3, #5]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fcc5 	bl	80094a8 <USBH_LL_GetURBState>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d11e      	bne.n	8008b66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	7c1b      	ldrb	r3, [r3, #16]
 8008b2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	8adb      	ldrh	r3, [r3, #22]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008b3a:	7b7b      	ldrb	r3, [r7, #13]
 8008b3c:	2b80      	cmp	r3, #128	; 0x80
 8008b3e:	d103      	bne.n	8008b48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2203      	movs	r2, #3
 8008b44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b46:	e115      	b.n	8008d74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2205      	movs	r2, #5
 8008b4c:	761a      	strb	r2, [r3, #24]
      break;
 8008b4e:	e111      	b.n	8008d74 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008b50:	7b7b      	ldrb	r3, [r7, #13]
 8008b52:	2b80      	cmp	r3, #128	; 0x80
 8008b54:	d103      	bne.n	8008b5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2209      	movs	r2, #9
 8008b5a:	761a      	strb	r2, [r3, #24]
      break;
 8008b5c:	e10a      	b.n	8008d74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2207      	movs	r2, #7
 8008b62:	761a      	strb	r2, [r3, #24]
      break;
 8008b64:	e106      	b.n	8008d74 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	d003      	beq.n	8008b74 <USBH_HandleControl+0xcc>
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	f040 8100 	bne.w	8008d74 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	220b      	movs	r2, #11
 8008b78:	761a      	strb	r2, [r3, #24]
      break;
 8008b7a:	e0fb      	b.n	8008d74 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6899      	ldr	r1, [r3, #8]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	899a      	ldrh	r2, [r3, #12]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	791b      	ldrb	r3, [r3, #4]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f93a 	bl	8008e0e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ba0:	e0f1      	b.n	8008d86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	791b      	ldrb	r3, [r3, #4]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fc7d 	bl	80094a8 <USBH_LL_GetURBState>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d102      	bne.n	8008bbe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2209      	movs	r2, #9
 8008bbc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b05      	cmp	r3, #5
 8008bc2:	d102      	bne.n	8008bca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008bc8:	e0d6      	b.n	8008d78 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	f040 80d3 	bne.w	8008d78 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	220b      	movs	r2, #11
 8008bd6:	761a      	strb	r2, [r3, #24]
      break;
 8008bd8:	e0ce      	b.n	8008d78 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6899      	ldr	r1, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	899a      	ldrh	r2, [r3, #12]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	795b      	ldrb	r3, [r3, #5]
 8008be6:	2001      	movs	r0, #1
 8008be8:	9000      	str	r0, [sp, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f8ea 	bl	8008dc4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2206      	movs	r2, #6
 8008c00:	761a      	strb	r2, [r3, #24]
      break;
 8008c02:	e0c0      	b.n	8008d86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	795b      	ldrb	r3, [r3, #5]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fc4c 	bl	80094a8 <USBH_LL_GetURBState>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d103      	bne.n	8008c22 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2207      	movs	r2, #7
 8008c1e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c20:	e0ac      	b.n	8008d7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b05      	cmp	r3, #5
 8008c26:	d105      	bne.n	8008c34 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	220c      	movs	r2, #12
 8008c2c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	73fb      	strb	r3, [r7, #15]
      break;
 8008c32:	e0a3      	b.n	8008d7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d103      	bne.n	8008c42 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2205      	movs	r2, #5
 8008c3e:	761a      	strb	r2, [r3, #24]
      break;
 8008c40:	e09c      	b.n	8008d7c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	f040 8099 	bne.w	8008d7c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	220b      	movs	r2, #11
 8008c4e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008c50:	2302      	movs	r3, #2
 8008c52:	73fb      	strb	r3, [r7, #15]
      break;
 8008c54:	e092      	b.n	8008d7c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	791b      	ldrb	r3, [r3, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f8d5 	bl	8008e0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2208      	movs	r2, #8
 8008c74:	761a      	strb	r2, [r3, #24]

      break;
 8008c76:	e086      	b.n	8008d86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	791b      	ldrb	r3, [r3, #4]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fc12 	bl	80094a8 <USBH_LL_GetURBState>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d105      	bne.n	8008c9a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	220d      	movs	r2, #13
 8008c92:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c98:	e072      	b.n	8008d80 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d103      	bne.n	8008ca8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	220b      	movs	r2, #11
 8008ca4:	761a      	strb	r2, [r3, #24]
      break;
 8008ca6:	e06b      	b.n	8008d80 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	d168      	bne.n	8008d80 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb2:	e065      	b.n	8008d80 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	795b      	ldrb	r3, [r3, #5]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	9200      	str	r2, [sp, #0]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f87f 	bl	8008dc4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	220a      	movs	r2, #10
 8008cd6:	761a      	strb	r2, [r3, #24]
      break;
 8008cd8:	e055      	b.n	8008d86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	795b      	ldrb	r3, [r3, #5]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fbe1 	bl	80094a8 <USBH_LL_GetURBState>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d105      	bne.n	8008cfc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	220d      	movs	r2, #13
 8008cf8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cfa:	e043      	b.n	8008d84 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d103      	bne.n	8008d0a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2209      	movs	r2, #9
 8008d06:	761a      	strb	r2, [r3, #24]
      break;
 8008d08:	e03c      	b.n	8008d84 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d139      	bne.n	8008d84 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	220b      	movs	r2, #11
 8008d14:	761a      	strb	r2, [r3, #24]
      break;
 8008d16:	e035      	b.n	8008d84 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	7e5b      	ldrb	r3, [r3, #25]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	765a      	strb	r2, [r3, #25]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7e5b      	ldrb	r3, [r3, #25]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d806      	bhi.n	8008d3a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008d38:	e025      	b.n	8008d86 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d40:	2106      	movs	r1, #6
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	795b      	ldrb	r3, [r3, #5]
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f90c 	bl	8008f70 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	791b      	ldrb	r3, [r3, #4]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f906 	bl	8008f70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6e:	e00a      	b.n	8008d86 <USBH_HandleControl+0x2de>

    default:
      break;
 8008d70:	bf00      	nop
 8008d72:	e008      	b.n	8008d86 <USBH_HandleControl+0x2de>
      break;
 8008d74:	bf00      	nop
 8008d76:	e006      	b.n	8008d86 <USBH_HandleControl+0x2de>
      break;
 8008d78:	bf00      	nop
 8008d7a:	e004      	b.n	8008d86 <USBH_HandleControl+0x2de>
      break;
 8008d7c:	bf00      	nop
 8008d7e:	e002      	b.n	8008d86 <USBH_HandleControl+0x2de>
      break;
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <USBH_HandleControl+0x2de>
      break;
 8008d84:	bf00      	nop
  }

  return status;
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af04      	add	r7, sp, #16
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d9e:	79f9      	ldrb	r1, [r7, #7]
 8008da0:	2300      	movs	r3, #0
 8008da2:	9303      	str	r3, [sp, #12]
 8008da4:	2308      	movs	r3, #8
 8008da6:	9302      	str	r3, [sp, #8]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	2300      	movs	r3, #0
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	2200      	movs	r2, #0
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fb46 	bl	8009446 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af04      	add	r7, sp, #16
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	80fb      	strh	r3, [r7, #6]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008de8:	7979      	ldrb	r1, [r7, #5]
 8008dea:	7e3b      	ldrb	r3, [r7, #24]
 8008dec:	9303      	str	r3, [sp, #12]
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	9302      	str	r3, [sp, #8]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	2301      	movs	r3, #1
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fb21 	bl	8009446 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b088      	sub	sp, #32
 8008e12:	af04      	add	r7, sp, #16
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	80fb      	strh	r3, [r7, #6]
 8008e20:	4613      	mov	r3, r2
 8008e22:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e24:	7979      	ldrb	r1, [r7, #5]
 8008e26:	2300      	movs	r3, #0
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	88fb      	ldrh	r3, [r7, #6]
 8008e2c:	9302      	str	r3, [sp, #8]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	2301      	movs	r3, #1
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	2300      	movs	r3, #0
 8008e38:	2201      	movs	r2, #1
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fb03 	bl	8009446 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e40:	2300      	movs	r3, #0

}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b088      	sub	sp, #32
 8008e4e:	af04      	add	r7, sp, #16
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	4611      	mov	r1, r2
 8008e56:	461a      	mov	r2, r3
 8008e58:	460b      	mov	r3, r1
 8008e5a:	80fb      	strh	r3, [r7, #6]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e6e:	7979      	ldrb	r1, [r7, #5]
 8008e70:	7e3b      	ldrb	r3, [r7, #24]
 8008e72:	9303      	str	r3, [sp, #12]
 8008e74:	88fb      	ldrh	r3, [r7, #6]
 8008e76:	9302      	str	r3, [sp, #8]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	2302      	movs	r3, #2
 8008e82:	2200      	movs	r2, #0
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fade 	bl	8009446 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af04      	add	r7, sp, #16
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	80fb      	strh	r3, [r7, #6]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008eaa:	7979      	ldrb	r1, [r7, #5]
 8008eac:	2300      	movs	r3, #0
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	88fb      	ldrh	r3, [r7, #6]
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 fac0 	bl	8009446 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af04      	add	r7, sp, #16
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	4608      	mov	r0, r1
 8008eda:	4611      	mov	r1, r2
 8008edc:	461a      	mov	r2, r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	70fb      	strb	r3, [r7, #3]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70bb      	strb	r3, [r7, #2]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008eea:	7878      	ldrb	r0, [r7, #1]
 8008eec:	78ba      	ldrb	r2, [r7, #2]
 8008eee:	78f9      	ldrb	r1, [r7, #3]
 8008ef0:	8b3b      	ldrh	r3, [r7, #24]
 8008ef2:	9302      	str	r3, [sp, #8]
 8008ef4:	7d3b      	ldrb	r3, [r7, #20]
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	7c3b      	ldrb	r3, [r7, #16]
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	4603      	mov	r3, r0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa53 	bl	80093aa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa72 	bl	8009408 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f836 	bl	8008fac <USBH_GetFreePipe>
 8008f40:	4603      	mov	r3, r0
 8008f42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008f44:	89fb      	ldrh	r3, [r7, #14]
 8008f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00a      	beq.n	8008f64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008f4e:	78fa      	ldrb	r2, [r7, #3]
 8008f50:	89fb      	ldrh	r3, [r7, #14]
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	33e0      	adds	r3, #224	; 0xe0
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008f64:	89fb      	ldrh	r3, [r7, #14]
 8008f66:	b2db      	uxtb	r3, r3
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	2b0f      	cmp	r3, #15
 8008f80:	d80d      	bhi.n	8008f9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	33e0      	adds	r3, #224	; 0xe0
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	33e0      	adds	r3, #224	; 0xe0
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	e00f      	b.n	8008fde <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	33e0      	adds	r3, #224	; 0xe0
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d102      	bne.n	8008fd8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	e007      	b.n	8008fe8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	73fb      	strb	r3, [r7, #15]
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	2b0f      	cmp	r3, #15
 8008fe2:	d9ec      	bls.n	8008fbe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	490e      	ldr	r1, [pc, #56]	; (8009034 <MX_USB_HOST_Init+0x40>)
 8008ffc:	480e      	ldr	r0, [pc, #56]	; (8009038 <MX_USB_HOST_Init+0x44>)
 8008ffe:	f7fe fb05 	bl	800760c <USBH_Init>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009008:	f7f7 fe2c 	bl	8000c64 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800900c:	490b      	ldr	r1, [pc, #44]	; (800903c <MX_USB_HOST_Init+0x48>)
 800900e:	480a      	ldr	r0, [pc, #40]	; (8009038 <MX_USB_HOST_Init+0x44>)
 8009010:	f7fe fba9 	bl	8007766 <USBH_RegisterClass>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800901a:	f7f7 fe23 	bl	8000c64 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800901e:	4806      	ldr	r0, [pc, #24]	; (8009038 <MX_USB_HOST_Init+0x44>)
 8009020:	f7fe fc2d 	bl	800787e <USBH_Start>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800902a:	f7f7 fe1b 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800902e:	bf00      	nop
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	08009055 	.word	0x08009055
 8009038:	200001e0 	.word	0x200001e0
 800903c:	2000000c 	.word	0x2000000c

08009040 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009044:	4802      	ldr	r0, [pc, #8]	; (8009050 <MX_USB_HOST_Process+0x10>)
 8009046:	f7fe fc2b 	bl	80078a0 <USBH_Process>
}
 800904a:	bf00      	nop
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	200001e0 	.word	0x200001e0

08009054 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	3b01      	subs	r3, #1
 8009064:	2b04      	cmp	r3, #4
 8009066:	d819      	bhi.n	800909c <USBH_UserProcess+0x48>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <USBH_UserProcess+0x1c>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	0800909d 	.word	0x0800909d
 8009074:	0800908d 	.word	0x0800908d
 8009078:	0800909d 	.word	0x0800909d
 800907c:	08009095 	.word	0x08009095
 8009080:	08009085 	.word	0x08009085
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <USBH_UserProcess+0x58>)
 8009086:	2203      	movs	r2, #3
 8009088:	701a      	strb	r2, [r3, #0]
  break;
 800908a:	e008      	b.n	800909e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <USBH_UserProcess+0x58>)
 800908e:	2202      	movs	r2, #2
 8009090:	701a      	strb	r2, [r3, #0]
  break;
 8009092:	e004      	b.n	800909e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <USBH_UserProcess+0x58>)
 8009096:	2201      	movs	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]
  break;
 800909a:	e000      	b.n	800909e <USBH_UserProcess+0x4a>

  default:
  break;
 800909c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	200005b8 	.word	0x200005b8

080090b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	; 0x28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b8:	f107 0314 	add.w	r3, r7, #20
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	609a      	str	r2, [r3, #8]
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090d0:	d147      	bne.n	8009162 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	4b25      	ldr	r3, [pc, #148]	; (800916c <HAL_HCD_MspInit+0xbc>)
 80090d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090da:	4a24      	ldr	r2, [pc, #144]	; (800916c <HAL_HCD_MspInit+0xbc>)
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	6313      	str	r3, [r2, #48]	; 0x30
 80090e2:	4b22      	ldr	r3, [pc, #136]	; (800916c <HAL_HCD_MspInit+0xbc>)
 80090e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	613b      	str	r3, [r7, #16]
 80090ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80090ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80090fc:	f107 0314 	add.w	r3, r7, #20
 8009100:	4619      	mov	r1, r3
 8009102:	481b      	ldr	r0, [pc, #108]	; (8009170 <HAL_HCD_MspInit+0xc0>)
 8009104:	f7f8 f8e0 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009108:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800910c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800910e:	2302      	movs	r3, #2
 8009110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009116:	2303      	movs	r3, #3
 8009118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800911a:	230a      	movs	r3, #10
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800911e:	f107 0314 	add.w	r3, r7, #20
 8009122:	4619      	mov	r1, r3
 8009124:	4812      	ldr	r0, [pc, #72]	; (8009170 <HAL_HCD_MspInit+0xc0>)
 8009126:	f7f8 f8cf 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800912a:	4b10      	ldr	r3, [pc, #64]	; (800916c <HAL_HCD_MspInit+0xbc>)
 800912c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912e:	4a0f      	ldr	r2, [pc, #60]	; (800916c <HAL_HCD_MspInit+0xbc>)
 8009130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009134:	6353      	str	r3, [r2, #52]	; 0x34
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	4b0c      	ldr	r3, [pc, #48]	; (800916c <HAL_HCD_MspInit+0xbc>)
 800913c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913e:	4a0b      	ldr	r2, [pc, #44]	; (800916c <HAL_HCD_MspInit+0xbc>)
 8009140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009144:	6453      	str	r3, [r2, #68]	; 0x44
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <HAL_HCD_MspInit+0xbc>)
 8009148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009152:	2200      	movs	r2, #0
 8009154:	2100      	movs	r1, #0
 8009156:	2043      	movs	r0, #67	; 0x43
 8009158:	f7f8 f866 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800915c:	2043      	movs	r0, #67	; 0x43
 800915e:	f7f8 f88f 	bl	8001280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009162:	bf00      	nop
 8009164:	3728      	adds	r7, #40	; 0x28
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	40023800 	.word	0x40023800
 8009170:	40020000 	.word	0x40020000

08009174 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe ff6b 	bl	800805e <USBH_LL_IncTimer>
}
 8009188:	bf00      	nop
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe ffa3 	bl	80080ea <USBH_LL_Connect>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe ffac 	bl	8008118 <USBH_LL_Disconnect>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
 80091d4:	4613      	mov	r3, r2
 80091d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe ff5d 	bl	80080b2 <USBH_LL_PortEnabled>
}
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe ff5d 	bl	80080ce <USBH_LL_PortDisabled>
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800922a:	2b01      	cmp	r3, #1
 800922c:	d12a      	bne.n	8009284 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800922e:	4a18      	ldr	r2, [pc, #96]	; (8009290 <USBH_LL_Init+0x74>)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a15      	ldr	r2, [pc, #84]	; (8009290 <USBH_LL_Init+0x74>)
 800923a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800923e:	4b14      	ldr	r3, [pc, #80]	; (8009290 <USBH_LL_Init+0x74>)
 8009240:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009244:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009246:	4b12      	ldr	r3, [pc, #72]	; (8009290 <USBH_LL_Init+0x74>)
 8009248:	2208      	movs	r2, #8
 800924a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800924c:	4b10      	ldr	r3, [pc, #64]	; (8009290 <USBH_LL_Init+0x74>)
 800924e:	2201      	movs	r2, #1
 8009250:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009252:	4b0f      	ldr	r3, [pc, #60]	; (8009290 <USBH_LL_Init+0x74>)
 8009254:	2200      	movs	r2, #0
 8009256:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009258:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <USBH_LL_Init+0x74>)
 800925a:	2202      	movs	r2, #2
 800925c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800925e:	4b0c      	ldr	r3, [pc, #48]	; (8009290 <USBH_LL_Init+0x74>)
 8009260:	2200      	movs	r2, #0
 8009262:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009264:	480a      	ldr	r0, [pc, #40]	; (8009290 <USBH_LL_Init+0x74>)
 8009266:	f7f8 fb21 	bl	80018ac <HAL_HCD_Init>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009270:	f7f7 fcf8 	bl	8000c64 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009274:	4806      	ldr	r0, [pc, #24]	; (8009290 <USBH_LL_Init+0x74>)
 8009276:	f7f8 ff8d 	bl	8002194 <HAL_HCD_GetCurrentFrame>
 800927a:	4603      	mov	r3, r0
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7fe fede 	bl	8008040 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	200005bc 	.word	0x200005bc

08009294 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7f8 fefa 	bl	80020a4 <HAL_HCD_Start>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f95e 	bl	8009578 <USBH_Get_USB_Status>
 80092bc:	4603      	mov	r3, r0
 80092be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7f8 ff02 	bl	80020ea <HAL_HCD_Stop>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 f943 	bl	8009578 <USBH_Get_USB_Status>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009308:	2301      	movs	r3, #1
 800930a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009312:	4618      	mov	r0, r3
 8009314:	f7f8 ff4c 	bl	80021b0 <HAL_HCD_GetCurrentSpeed>
 8009318:	4603      	mov	r3, r0
 800931a:	2b02      	cmp	r3, #2
 800931c:	d00c      	beq.n	8009338 <USBH_LL_GetSpeed+0x38>
 800931e:	2b02      	cmp	r3, #2
 8009320:	d80d      	bhi.n	800933e <USBH_LL_GetSpeed+0x3e>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <USBH_LL_GetSpeed+0x2c>
 8009326:	2b01      	cmp	r3, #1
 8009328:	d003      	beq.n	8009332 <USBH_LL_GetSpeed+0x32>
 800932a:	e008      	b.n	800933e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
    break;
 8009330:	e008      	b.n	8009344 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009332:	2301      	movs	r3, #1
 8009334:	73fb      	strb	r3, [r7, #15]
    break;
 8009336:	e005      	b.n	8009344 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009338:	2302      	movs	r3, #2
 800933a:	73fb      	strb	r3, [r7, #15]
    break;
 800933c:	e002      	b.n	8009344 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
    break;
 8009342:	bf00      	nop
  }
  return  speed;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009364:	4618      	mov	r0, r3
 8009366:	f7f8 fedd 	bl	8002124 <HAL_HCD_ResetPort>
 800936a:	4603      	mov	r3, r0
 800936c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f901 	bl	8009578 <USBH_Get_USB_Status>
 8009376:	4603      	mov	r3, r0
 8009378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800937a:	7bbb      	ldrb	r3, [r7, #14]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	4611      	mov	r1, r2
 800939a:	4618      	mov	r0, r3
 800939c:	f7f8 fee5 	bl	800216a <HAL_HCD_HC_GetXferCount>
 80093a0:	4603      	mov	r3, r0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093aa:	b590      	push	{r4, r7, lr}
 80093ac:	b089      	sub	sp, #36	; 0x24
 80093ae:	af04      	add	r7, sp, #16
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	4608      	mov	r0, r1
 80093b4:	4611      	mov	r1, r2
 80093b6:	461a      	mov	r2, r3
 80093b8:	4603      	mov	r3, r0
 80093ba:	70fb      	strb	r3, [r7, #3]
 80093bc:	460b      	mov	r3, r1
 80093be:	70bb      	strb	r3, [r7, #2]
 80093c0:	4613      	mov	r3, r2
 80093c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80093d2:	787c      	ldrb	r4, [r7, #1]
 80093d4:	78ba      	ldrb	r2, [r7, #2]
 80093d6:	78f9      	ldrb	r1, [r7, #3]
 80093d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093da:	9302      	str	r3, [sp, #8]
 80093dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	4623      	mov	r3, r4
 80093ea:	f7f8 fad1 	bl	8001990 <HAL_HCD_HC_Init>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 f8bf 	bl	8009578 <USBH_Get_USB_Status>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	bd90      	pop	{r4, r7, pc}

08009408 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f7f8 fb6a 	bl	8001b00 <HAL_HCD_HC_Halt>
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	4618      	mov	r0, r3
 8009434:	f000 f8a0 	bl	8009578 <USBH_Get_USB_Status>
 8009438:	4603      	mov	r3, r0
 800943a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800943c:	7bbb      	ldrb	r3, [r7, #14]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009446:	b590      	push	{r4, r7, lr}
 8009448:	b089      	sub	sp, #36	; 0x24
 800944a:	af04      	add	r7, sp, #16
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	4608      	mov	r0, r1
 8009450:	4611      	mov	r1, r2
 8009452:	461a      	mov	r2, r3
 8009454:	4603      	mov	r3, r0
 8009456:	70fb      	strb	r3, [r7, #3]
 8009458:	460b      	mov	r3, r1
 800945a:	70bb      	strb	r3, [r7, #2]
 800945c:	4613      	mov	r3, r2
 800945e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800946e:	787c      	ldrb	r4, [r7, #1]
 8009470:	78ba      	ldrb	r2, [r7, #2]
 8009472:	78f9      	ldrb	r1, [r7, #3]
 8009474:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009478:	9303      	str	r3, [sp, #12]
 800947a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	4623      	mov	r3, r4
 800948a:	f7f8 fb5d 	bl	8001b48 <HAL_HCD_HC_SubmitRequest>
 800948e:	4603      	mov	r3, r0
 8009490:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	4618      	mov	r0, r3
 8009496:	f000 f86f 	bl	8009578 <USBH_Get_USB_Status>
 800949a:	4603      	mov	r3, r0
 800949c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800949e:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd90      	pop	{r4, r7, pc}

080094a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f7f8 fe3e 	bl	8002140 <HAL_HCD_HC_GetURBState>
 80094c4:	4603      	mov	r3, r0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d103      	bne.n	80094ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f872 	bl	80095d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80094ec:	20c8      	movs	r0, #200	; 0xc8
 80094ee:	f7f7 fd87 	bl	8001000 <HAL_Delay>
  return USBH_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	70fb      	strb	r3, [r7, #3]
 8009508:	4613      	mov	r3, r2
 800950a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009512:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	68f9      	ldr	r1, [r7, #12]
 8009518:	4613      	mov	r3, r2
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	3317      	adds	r3, #23
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	68f9      	ldr	r1, [r7, #12]
 800952e:	4613      	mov	r3, r2
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	1a9b      	subs	r3, r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	333c      	adds	r3, #60	; 0x3c
 800953a:	78ba      	ldrb	r2, [r7, #2]
 800953c:	701a      	strb	r2, [r3, #0]
 800953e:	e009      	b.n	8009554 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	68f9      	ldr	r1, [r7, #12]
 8009544:	4613      	mov	r3, r2
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	333d      	adds	r3, #61	; 0x3d
 8009550:	78ba      	ldrb	r2, [r7, #2]
 8009552:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7f7 fd48 	bl	8001000 <HAL_Delay>
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	2b03      	cmp	r3, #3
 800958a:	d817      	bhi.n	80095bc <USBH_Get_USB_Status+0x44>
 800958c:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <USBH_Get_USB_Status+0x1c>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	080095a5 	.word	0x080095a5
 8009598:	080095ab 	.word	0x080095ab
 800959c:	080095b1 	.word	0x080095b1
 80095a0:	080095b7 	.word	0x080095b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
    break;
 80095a8:	e00b      	b.n	80095c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80095aa:	2302      	movs	r3, #2
 80095ac:	73fb      	strb	r3, [r7, #15]
    break;
 80095ae:	e008      	b.n	80095c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80095b0:	2301      	movs	r3, #1
 80095b2:	73fb      	strb	r3, [r7, #15]
    break;
 80095b4:	e005      	b.n	80095c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80095b6:	2302      	movs	r3, #2
 80095b8:	73fb      	strb	r3, [r7, #15]
    break;
 80095ba:	e002      	b.n	80095c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80095bc:	2302      	movs	r3, #2
 80095be:	73fb      	strb	r3, [r7, #15]
    break;
 80095c0:	bf00      	nop
  }
  return usb_status;
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d102      	bne.n	80095ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
 80095e8:	e001      	b.n	80095ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80095ea:	2301      	movs	r3, #1
 80095ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	461a      	mov	r2, r3
 80095f2:	2101      	movs	r1, #1
 80095f4:	4803      	ldr	r0, [pc, #12]	; (8009604 <MX_DriverVbusFS+0x34>)
 80095f6:	f7f8 f927 	bl	8001848 <HAL_GPIO_WritePin>
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	40020800 	.word	0x40020800

08009608 <malloc>:
 8009608:	4b02      	ldr	r3, [pc, #8]	; (8009614 <malloc+0xc>)
 800960a:	4601      	mov	r1, r0
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f000 b82b 	b.w	8009668 <_malloc_r>
 8009612:	bf00      	nop
 8009614:	20000078 	.word	0x20000078

08009618 <free>:
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <free+0xc>)
 800961a:	4601      	mov	r1, r0
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f000 b8f3 	b.w	8009808 <_free_r>
 8009622:	bf00      	nop
 8009624:	20000078 	.word	0x20000078

08009628 <sbrk_aligned>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4e0e      	ldr	r6, [pc, #56]	; (8009664 <sbrk_aligned+0x3c>)
 800962c:	460c      	mov	r4, r1
 800962e:	6831      	ldr	r1, [r6, #0]
 8009630:	4605      	mov	r5, r0
 8009632:	b911      	cbnz	r1, 800963a <sbrk_aligned+0x12>
 8009634:	f000 f8ac 	bl	8009790 <_sbrk_r>
 8009638:	6030      	str	r0, [r6, #0]
 800963a:	4621      	mov	r1, r4
 800963c:	4628      	mov	r0, r5
 800963e:	f000 f8a7 	bl	8009790 <_sbrk_r>
 8009642:	1c43      	adds	r3, r0, #1
 8009644:	d00a      	beq.n	800965c <sbrk_aligned+0x34>
 8009646:	1cc4      	adds	r4, r0, #3
 8009648:	f024 0403 	bic.w	r4, r4, #3
 800964c:	42a0      	cmp	r0, r4
 800964e:	d007      	beq.n	8009660 <sbrk_aligned+0x38>
 8009650:	1a21      	subs	r1, r4, r0
 8009652:	4628      	mov	r0, r5
 8009654:	f000 f89c 	bl	8009790 <_sbrk_r>
 8009658:	3001      	adds	r0, #1
 800965a:	d101      	bne.n	8009660 <sbrk_aligned+0x38>
 800965c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009660:	4620      	mov	r0, r4
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	200009a0 	.word	0x200009a0

08009668 <_malloc_r>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	1ccd      	adds	r5, r1, #3
 800966e:	f025 0503 	bic.w	r5, r5, #3
 8009672:	3508      	adds	r5, #8
 8009674:	2d0c      	cmp	r5, #12
 8009676:	bf38      	it	cc
 8009678:	250c      	movcc	r5, #12
 800967a:	2d00      	cmp	r5, #0
 800967c:	4607      	mov	r7, r0
 800967e:	db01      	blt.n	8009684 <_malloc_r+0x1c>
 8009680:	42a9      	cmp	r1, r5
 8009682:	d905      	bls.n	8009690 <_malloc_r+0x28>
 8009684:	230c      	movs	r3, #12
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	2600      	movs	r6, #0
 800968a:	4630      	mov	r0, r6
 800968c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009690:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009764 <_malloc_r+0xfc>
 8009694:	f000 f868 	bl	8009768 <__malloc_lock>
 8009698:	f8d8 3000 	ldr.w	r3, [r8]
 800969c:	461c      	mov	r4, r3
 800969e:	bb5c      	cbnz	r4, 80096f8 <_malloc_r+0x90>
 80096a0:	4629      	mov	r1, r5
 80096a2:	4638      	mov	r0, r7
 80096a4:	f7ff ffc0 	bl	8009628 <sbrk_aligned>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	4604      	mov	r4, r0
 80096ac:	d155      	bne.n	800975a <_malloc_r+0xf2>
 80096ae:	f8d8 4000 	ldr.w	r4, [r8]
 80096b2:	4626      	mov	r6, r4
 80096b4:	2e00      	cmp	r6, #0
 80096b6:	d145      	bne.n	8009744 <_malloc_r+0xdc>
 80096b8:	2c00      	cmp	r4, #0
 80096ba:	d048      	beq.n	800974e <_malloc_r+0xe6>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	4631      	mov	r1, r6
 80096c0:	4638      	mov	r0, r7
 80096c2:	eb04 0903 	add.w	r9, r4, r3
 80096c6:	f000 f863 	bl	8009790 <_sbrk_r>
 80096ca:	4581      	cmp	r9, r0
 80096cc:	d13f      	bne.n	800974e <_malloc_r+0xe6>
 80096ce:	6821      	ldr	r1, [r4, #0]
 80096d0:	1a6d      	subs	r5, r5, r1
 80096d2:	4629      	mov	r1, r5
 80096d4:	4638      	mov	r0, r7
 80096d6:	f7ff ffa7 	bl	8009628 <sbrk_aligned>
 80096da:	3001      	adds	r0, #1
 80096dc:	d037      	beq.n	800974e <_malloc_r+0xe6>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	442b      	add	r3, r5
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	f8d8 3000 	ldr.w	r3, [r8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d038      	beq.n	800975e <_malloc_r+0xf6>
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	42a2      	cmp	r2, r4
 80096f0:	d12b      	bne.n	800974a <_malloc_r+0xe2>
 80096f2:	2200      	movs	r2, #0
 80096f4:	605a      	str	r2, [r3, #4]
 80096f6:	e00f      	b.n	8009718 <_malloc_r+0xb0>
 80096f8:	6822      	ldr	r2, [r4, #0]
 80096fa:	1b52      	subs	r2, r2, r5
 80096fc:	d41f      	bmi.n	800973e <_malloc_r+0xd6>
 80096fe:	2a0b      	cmp	r2, #11
 8009700:	d917      	bls.n	8009732 <_malloc_r+0xca>
 8009702:	1961      	adds	r1, r4, r5
 8009704:	42a3      	cmp	r3, r4
 8009706:	6025      	str	r5, [r4, #0]
 8009708:	bf18      	it	ne
 800970a:	6059      	strne	r1, [r3, #4]
 800970c:	6863      	ldr	r3, [r4, #4]
 800970e:	bf08      	it	eq
 8009710:	f8c8 1000 	streq.w	r1, [r8]
 8009714:	5162      	str	r2, [r4, r5]
 8009716:	604b      	str	r3, [r1, #4]
 8009718:	4638      	mov	r0, r7
 800971a:	f104 060b 	add.w	r6, r4, #11
 800971e:	f000 f829 	bl	8009774 <__malloc_unlock>
 8009722:	f026 0607 	bic.w	r6, r6, #7
 8009726:	1d23      	adds	r3, r4, #4
 8009728:	1af2      	subs	r2, r6, r3
 800972a:	d0ae      	beq.n	800968a <_malloc_r+0x22>
 800972c:	1b9b      	subs	r3, r3, r6
 800972e:	50a3      	str	r3, [r4, r2]
 8009730:	e7ab      	b.n	800968a <_malloc_r+0x22>
 8009732:	42a3      	cmp	r3, r4
 8009734:	6862      	ldr	r2, [r4, #4]
 8009736:	d1dd      	bne.n	80096f4 <_malloc_r+0x8c>
 8009738:	f8c8 2000 	str.w	r2, [r8]
 800973c:	e7ec      	b.n	8009718 <_malloc_r+0xb0>
 800973e:	4623      	mov	r3, r4
 8009740:	6864      	ldr	r4, [r4, #4]
 8009742:	e7ac      	b.n	800969e <_malloc_r+0x36>
 8009744:	4634      	mov	r4, r6
 8009746:	6876      	ldr	r6, [r6, #4]
 8009748:	e7b4      	b.n	80096b4 <_malloc_r+0x4c>
 800974a:	4613      	mov	r3, r2
 800974c:	e7cc      	b.n	80096e8 <_malloc_r+0x80>
 800974e:	230c      	movs	r3, #12
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	4638      	mov	r0, r7
 8009754:	f000 f80e 	bl	8009774 <__malloc_unlock>
 8009758:	e797      	b.n	800968a <_malloc_r+0x22>
 800975a:	6025      	str	r5, [r4, #0]
 800975c:	e7dc      	b.n	8009718 <_malloc_r+0xb0>
 800975e:	605b      	str	r3, [r3, #4]
 8009760:	deff      	udf	#255	; 0xff
 8009762:	bf00      	nop
 8009764:	2000099c 	.word	0x2000099c

08009768 <__malloc_lock>:
 8009768:	4801      	ldr	r0, [pc, #4]	; (8009770 <__malloc_lock+0x8>)
 800976a:	f000 b84b 	b.w	8009804 <__retarget_lock_acquire_recursive>
 800976e:	bf00      	nop
 8009770:	20000adc 	.word	0x20000adc

08009774 <__malloc_unlock>:
 8009774:	4801      	ldr	r0, [pc, #4]	; (800977c <__malloc_unlock+0x8>)
 8009776:	f000 b846 	b.w	8009806 <__retarget_lock_release_recursive>
 800977a:	bf00      	nop
 800977c:	20000adc 	.word	0x20000adc

08009780 <memset>:
 8009780:	4402      	add	r2, r0
 8009782:	4603      	mov	r3, r0
 8009784:	4293      	cmp	r3, r2
 8009786:	d100      	bne.n	800978a <memset+0xa>
 8009788:	4770      	bx	lr
 800978a:	f803 1b01 	strb.w	r1, [r3], #1
 800978e:	e7f9      	b.n	8009784 <memset+0x4>

08009790 <_sbrk_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d06      	ldr	r5, [pc, #24]	; (80097ac <_sbrk_r+0x1c>)
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	f7f7 fb4c 	bl	8000e38 <_sbrk>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_sbrk_r+0x1a>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_sbrk_r+0x1a>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	20000ae0 	.word	0x20000ae0

080097b0 <__errno>:
 80097b0:	4b01      	ldr	r3, [pc, #4]	; (80097b8 <__errno+0x8>)
 80097b2:	6818      	ldr	r0, [r3, #0]
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000078 	.word	0x20000078

080097bc <__libc_init_array>:
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	4d0d      	ldr	r5, [pc, #52]	; (80097f4 <__libc_init_array+0x38>)
 80097c0:	4c0d      	ldr	r4, [pc, #52]	; (80097f8 <__libc_init_array+0x3c>)
 80097c2:	1b64      	subs	r4, r4, r5
 80097c4:	10a4      	asrs	r4, r4, #2
 80097c6:	2600      	movs	r6, #0
 80097c8:	42a6      	cmp	r6, r4
 80097ca:	d109      	bne.n	80097e0 <__libc_init_array+0x24>
 80097cc:	4d0b      	ldr	r5, [pc, #44]	; (80097fc <__libc_init_array+0x40>)
 80097ce:	4c0c      	ldr	r4, [pc, #48]	; (8009800 <__libc_init_array+0x44>)
 80097d0:	f000 f866 	bl	80098a0 <_init>
 80097d4:	1b64      	subs	r4, r4, r5
 80097d6:	10a4      	asrs	r4, r4, #2
 80097d8:	2600      	movs	r6, #0
 80097da:	42a6      	cmp	r6, r4
 80097dc:	d105      	bne.n	80097ea <__libc_init_array+0x2e>
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e4:	4798      	blx	r3
 80097e6:	3601      	adds	r6, #1
 80097e8:	e7ee      	b.n	80097c8 <__libc_init_array+0xc>
 80097ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ee:	4798      	blx	r3
 80097f0:	3601      	adds	r6, #1
 80097f2:	e7f2      	b.n	80097da <__libc_init_array+0x1e>
 80097f4:	08009aa8 	.word	0x08009aa8
 80097f8:	08009aa8 	.word	0x08009aa8
 80097fc:	08009aa8 	.word	0x08009aa8
 8009800:	08009aac 	.word	0x08009aac

08009804 <__retarget_lock_acquire_recursive>:
 8009804:	4770      	bx	lr

08009806 <__retarget_lock_release_recursive>:
 8009806:	4770      	bx	lr

08009808 <_free_r>:
 8009808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800980a:	2900      	cmp	r1, #0
 800980c:	d044      	beq.n	8009898 <_free_r+0x90>
 800980e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009812:	9001      	str	r0, [sp, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f1a1 0404 	sub.w	r4, r1, #4
 800981a:	bfb8      	it	lt
 800981c:	18e4      	addlt	r4, r4, r3
 800981e:	f7ff ffa3 	bl	8009768 <__malloc_lock>
 8009822:	4a1e      	ldr	r2, [pc, #120]	; (800989c <_free_r+0x94>)
 8009824:	9801      	ldr	r0, [sp, #4]
 8009826:	6813      	ldr	r3, [r2, #0]
 8009828:	b933      	cbnz	r3, 8009838 <_free_r+0x30>
 800982a:	6063      	str	r3, [r4, #4]
 800982c:	6014      	str	r4, [r2, #0]
 800982e:	b003      	add	sp, #12
 8009830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009834:	f7ff bf9e 	b.w	8009774 <__malloc_unlock>
 8009838:	42a3      	cmp	r3, r4
 800983a:	d908      	bls.n	800984e <_free_r+0x46>
 800983c:	6825      	ldr	r5, [r4, #0]
 800983e:	1961      	adds	r1, r4, r5
 8009840:	428b      	cmp	r3, r1
 8009842:	bf01      	itttt	eq
 8009844:	6819      	ldreq	r1, [r3, #0]
 8009846:	685b      	ldreq	r3, [r3, #4]
 8009848:	1949      	addeq	r1, r1, r5
 800984a:	6021      	streq	r1, [r4, #0]
 800984c:	e7ed      	b.n	800982a <_free_r+0x22>
 800984e:	461a      	mov	r2, r3
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	b10b      	cbz	r3, 8009858 <_free_r+0x50>
 8009854:	42a3      	cmp	r3, r4
 8009856:	d9fa      	bls.n	800984e <_free_r+0x46>
 8009858:	6811      	ldr	r1, [r2, #0]
 800985a:	1855      	adds	r5, r2, r1
 800985c:	42a5      	cmp	r5, r4
 800985e:	d10b      	bne.n	8009878 <_free_r+0x70>
 8009860:	6824      	ldr	r4, [r4, #0]
 8009862:	4421      	add	r1, r4
 8009864:	1854      	adds	r4, r2, r1
 8009866:	42a3      	cmp	r3, r4
 8009868:	6011      	str	r1, [r2, #0]
 800986a:	d1e0      	bne.n	800982e <_free_r+0x26>
 800986c:	681c      	ldr	r4, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	6053      	str	r3, [r2, #4]
 8009872:	440c      	add	r4, r1
 8009874:	6014      	str	r4, [r2, #0]
 8009876:	e7da      	b.n	800982e <_free_r+0x26>
 8009878:	d902      	bls.n	8009880 <_free_r+0x78>
 800987a:	230c      	movs	r3, #12
 800987c:	6003      	str	r3, [r0, #0]
 800987e:	e7d6      	b.n	800982e <_free_r+0x26>
 8009880:	6825      	ldr	r5, [r4, #0]
 8009882:	1961      	adds	r1, r4, r5
 8009884:	428b      	cmp	r3, r1
 8009886:	bf04      	itt	eq
 8009888:	6819      	ldreq	r1, [r3, #0]
 800988a:	685b      	ldreq	r3, [r3, #4]
 800988c:	6063      	str	r3, [r4, #4]
 800988e:	bf04      	itt	eq
 8009890:	1949      	addeq	r1, r1, r5
 8009892:	6021      	streq	r1, [r4, #0]
 8009894:	6054      	str	r4, [r2, #4]
 8009896:	e7ca      	b.n	800982e <_free_r+0x26>
 8009898:	b003      	add	sp, #12
 800989a:	bd30      	pop	{r4, r5, pc}
 800989c:	2000099c 	.word	0x2000099c

080098a0 <_init>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr

080098ac <_fini>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr
